{"ast":null,"code":"import { Direction } from '../geometry/geometry.js';\nimport { ImporterThreeBase } from './importerthree.js';\nimport * as THREE from 'three';\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader.js';\nexport class ImporterThreeSvg extends ImporterThreeBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'svg';\n  }\n\n  GetUpDirection() {\n    return Direction.Z;\n  }\n\n  CreateLoader(manager) {\n    return new SVGLoader(manager);\n  }\n\n  GetMainObject(loadedObject) {\n    function ShowFill(path) {\n      const style = path.userData.style;\n\n      if (style.fill === undefined || style.fill === 'none') {\n        return false;\n      }\n\n      return true;\n    }\n\n    function GetOrCreateMaterial(materials, style, opacity) {\n      let material = null;\n\n      for (let existingMaterial of materials) {\n        if (existingMaterial.style === style && existingMaterial.opacity === opacity) {\n          material = existingMaterial.material;\n          break;\n        }\n      }\n\n      if (material === null) {\n        material = new THREE.MeshPhongMaterial({\n          color: new THREE.Color().setStyle(style),\n          opacity: opacity,\n          transparent: opacity < 1.0\n        });\n        materials.push({\n          style: style,\n          opacity: opacity,\n          material: material\n        });\n      }\n\n      return material;\n    }\n\n    let materials = [];\n    let object = new THREE.Object3D();\n    object.rotation.x = Math.PI;\n\n    for (let path of loadedObject.paths) {\n      const shapes = SVGLoader.createShapes(path);\n\n      if (ShowFill(path)) {\n        let pathStyle = path.userData.style;\n        let pathMaterial = GetOrCreateMaterial(materials, pathStyle.fill, pathStyle.opacity);\n\n        for (const shape of shapes) {\n          const geometry = new THREE.ExtrudeGeometry(shape, {\n            depth: 10,\n            bevelEnabled: false\n          });\n          const mesh = new THREE.Mesh(geometry, pathMaterial);\n          mesh.name = path.userData.node.id;\n          object.add(mesh);\n        }\n      }\n    }\n\n    return object;\n  }\n\n}","map":{"version":3,"names":["Direction","ImporterThreeBase","THREE","SVGLoader","ImporterThreeSvg","constructor","CanImportExtension","extension","GetUpDirection","Z","CreateLoader","manager","GetMainObject","loadedObject","ShowFill","path","style","userData","fill","undefined","GetOrCreateMaterial","materials","opacity","material","existingMaterial","MeshPhongMaterial","color","Color","setStyle","transparent","push","object","Object3D","rotation","x","Math","PI","paths","shapes","createShapes","pathStyle","pathMaterial","shape","geometry","ExtrudeGeometry","depth","bevelEnabled","mesh","Mesh","name","node","id","add"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importersvg.js"],"sourcesContent":["import { Direction } from '../geometry/geometry.js';\r\nimport { ImporterThreeBase } from './importerthree.js';\r\n\r\nimport * as THREE from 'three';\r\nimport { SVGLoader } from 'three/examples/jsm/loaders/SVGLoader.js';\r\n\r\nexport class ImporterThreeSvg extends ImporterThreeBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'svg';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Z;\r\n    }\r\n\r\n    CreateLoader (manager)\r\n    {\r\n        return new SVGLoader (manager);\r\n    }\r\n\r\n    GetMainObject (loadedObject)\r\n    {\r\n        function ShowFill (path)\r\n        {\r\n            const style = path.userData.style;\r\n            if (style.fill === undefined || style.fill === 'none') {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function GetOrCreateMaterial (materials, style, opacity)\r\n        {\r\n            let material = null;\r\n            for (let existingMaterial of materials) {\r\n                if (existingMaterial.style === style && existingMaterial.opacity === opacity) {\r\n                    material = existingMaterial.material;\r\n                    break;\r\n                }\r\n            }\r\n            if (material === null) {\r\n                material = new THREE.MeshPhongMaterial ({\r\n                    color: new THREE.Color ().setStyle (style),\r\n                    opacity: opacity,\r\n                    transparent: opacity < 1.0\r\n                });\r\n                materials.push ({\r\n                    style : style,\r\n                    opacity : opacity,\r\n                    material : material\r\n                });\r\n            }\r\n            return material;\r\n        }\r\n\r\n        let materials = [];\r\n\r\n        let object = new THREE.Object3D ();\r\n        object.rotation.x = Math.PI;\r\n\r\n        for (let path of loadedObject.paths) {\r\n            const shapes = SVGLoader.createShapes (path);\r\n            if (ShowFill (path)) {\r\n                let pathStyle = path.userData.style;\r\n                let pathMaterial = GetOrCreateMaterial (materials, pathStyle.fill, pathStyle.opacity);\r\n                for (const shape of shapes) {\r\n                    const geometry = new THREE.ExtrudeGeometry (shape, {\r\n                        depth: 10,\r\n                        bevelEnabled: false\r\n                    });\r\n                    const mesh = new THREE.Mesh (geometry, pathMaterial);\r\n                    mesh.name = path.userData.node.id;\r\n                    object.add (mesh);\r\n                }\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}