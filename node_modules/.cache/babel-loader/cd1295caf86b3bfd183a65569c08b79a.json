{"ast":null,"code":"import { Quaternion } from './quaternion.js';\nimport { Coord3D, VectorLength3D } from './coord3d.js';\nimport { Coord4D } from './coord4d.js';\nimport { IsEqual, IsNegative } from './geometry.js';\nimport { QuaternionFromAxisAngle } from './quaternion.js';\nexport class Matrix {\n  constructor(matrix) {\n    this.matrix = null;\n\n    if (matrix !== undefined && matrix !== null) {\n      this.matrix = matrix;\n    }\n  }\n\n  IsValid() {\n    return this.matrix !== null;\n  }\n\n  Set(matrix) {\n    this.matrix = matrix;\n    return this;\n  }\n\n  Get() {\n    return this.matrix;\n  }\n\n  Clone() {\n    let result = [this.matrix[0], this.matrix[1], this.matrix[2], this.matrix[3], this.matrix[4], this.matrix[5], this.matrix[6], this.matrix[7], this.matrix[8], this.matrix[9], this.matrix[10], this.matrix[11], this.matrix[12], this.matrix[13], this.matrix[14], this.matrix[15]];\n    return new Matrix(result);\n  }\n\n  CreateIdentity() {\n    this.matrix = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0];\n    return this;\n  }\n\n  IsIdentity() {\n    let identity = new Matrix().CreateIdentity().Get();\n\n    for (let i = 0; i < 16; i++) {\n      if (!IsEqual(this.matrix[i], identity[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  CreateTranslation(x, y, z) {\n    this.matrix = [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0];\n    return this;\n  }\n\n  CreateRotation(x, y, z, w) {\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    this.matrix = [1.0 - (yy + zz), xy + wz, xz - wy, 0.0, xy - wz, 1.0 - (xx + zz), yz + wx, 0.0, xz + wy, yz - wx, 1.0 - (xx + yy), 0.0, 0.0, 0.0, 0.0, 1.0];\n    return this;\n  }\n\n  CreateRotationAxisAngle(axis, angle) {\n    let quaternion = QuaternionFromAxisAngle(axis, angle);\n    return this.CreateRotation(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n  }\n\n  CreateScale(x, y, z) {\n    this.matrix = [x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0];\n    return this;\n  }\n\n  ComposeTRS(translation, rotation, scale) {\n    let tx = translation.x;\n    let ty = translation.y;\n    let tz = translation.z;\n    let qx = rotation.x;\n    let qy = rotation.y;\n    let qz = rotation.z;\n    let qw = rotation.w;\n    let sx = scale.x;\n    let sy = scale.y;\n    let sz = scale.z;\n    let x2 = qx + qx;\n    let y2 = qy + qy;\n    let z2 = qz + qz;\n    let xx = qx * x2;\n    let xy = qx * y2;\n    let xz = qx * z2;\n    let yy = qy * y2;\n    let yz = qy * z2;\n    let zz = qz * z2;\n    let wx = qw * x2;\n    let wy = qw * y2;\n    let wz = qw * z2;\n    this.matrix = [(1.0 - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0.0, (xy - wz) * sy, (1.0 - (xx + zz)) * sy, (yz + wx) * sy, 0.0, (xz + wy) * sz, (yz - wx) * sz, (1.0 - (xx + yy)) * sz, 0.0, tx, ty, tz, 1.0];\n    return this;\n  }\n\n  DecomposeTRS() {\n    let translation = new Coord3D(this.matrix[12], this.matrix[13], this.matrix[14]);\n    let sx = VectorLength3D(this.matrix[0], this.matrix[1], this.matrix[2]);\n    let sy = VectorLength3D(this.matrix[4], this.matrix[5], this.matrix[6]);\n    let sz = VectorLength3D(this.matrix[8], this.matrix[9], this.matrix[10]);\n    let determinant = this.Determinant();\n\n    if (IsNegative(determinant)) {\n      sx *= -1.0;\n    }\n\n    let scale = new Coord3D(sx, sy, sz);\n    let m00 = this.matrix[0] / sx;\n    let m01 = this.matrix[4] / sy;\n    let m02 = this.matrix[8] / sz;\n    let m10 = this.matrix[1] / sx;\n    let m11 = this.matrix[5] / sy;\n    let m12 = this.matrix[9] / sz;\n    let m20 = this.matrix[2] / sx;\n    let m21 = this.matrix[6] / sy;\n    let m22 = this.matrix[10] / sz; // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n    let rotation = null;\n    let tr = m00 + m11 + m22;\n\n    if (tr > 0.0) {\n      let s = Math.sqrt(tr + 1.0) * 2.0;\n      rotation = new Quaternion((m21 - m12) / s, (m02 - m20) / s, (m10 - m01) / s, 0.25 * s);\n    } else if (m00 > m11 && m00 > m22) {\n      let s = Math.sqrt(1.0 + m00 - m11 - m22) * 2.0;\n      rotation = new Quaternion(0.25 * s, (m01 + m10) / s, (m02 + m20) / s, (m21 - m12) / s);\n    } else if (m11 > m22) {\n      let s = Math.sqrt(1.0 + m11 - m00 - m22) * 2.0;\n      rotation = new Quaternion((m01 + m10) / s, 0.25 * s, (m12 + m21) / s, (m02 - m20) / s);\n    } else {\n      let s = Math.sqrt(1.0 + m22 - m00 - m11) * 2.0;\n      rotation = new Quaternion((m02 + m20) / s, (m12 + m21) / s, 0.25 * s, (m10 - m01) / s);\n    }\n\n    return {\n      translation: translation,\n      rotation: rotation,\n      scale: scale\n    };\n  }\n\n  Determinant() {\n    let a00 = this.matrix[0];\n    let a01 = this.matrix[1];\n    let a02 = this.matrix[2];\n    let a03 = this.matrix[3];\n    let a10 = this.matrix[4];\n    let a11 = this.matrix[5];\n    let a12 = this.matrix[6];\n    let a13 = this.matrix[7];\n    let a20 = this.matrix[8];\n    let a21 = this.matrix[9];\n    let a22 = this.matrix[10];\n    let a23 = this.matrix[11];\n    let a30 = this.matrix[12];\n    let a31 = this.matrix[13];\n    let a32 = this.matrix[14];\n    let a33 = this.matrix[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n    return determinant;\n  }\n\n  Invert() {\n    let a00 = this.matrix[0];\n    let a01 = this.matrix[1];\n    let a02 = this.matrix[2];\n    let a03 = this.matrix[3];\n    let a10 = this.matrix[4];\n    let a11 = this.matrix[5];\n    let a12 = this.matrix[6];\n    let a13 = this.matrix[7];\n    let a20 = this.matrix[8];\n    let a21 = this.matrix[9];\n    let a22 = this.matrix[10];\n    let a23 = this.matrix[11];\n    let a30 = this.matrix[12];\n    let a31 = this.matrix[13];\n    let a32 = this.matrix[14];\n    let a33 = this.matrix[15];\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n    let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (IsEqual(determinant, 0.0)) {\n      return null;\n    }\n\n    let result = [(a11 * b11 - a12 * b10 + a13 * b09) / determinant, (a02 * b10 - a01 * b11 - a03 * b09) / determinant, (a31 * b05 - a32 * b04 + a33 * b03) / determinant, (a22 * b04 - a21 * b05 - a23 * b03) / determinant, (a12 * b08 - a10 * b11 - a13 * b07) / determinant, (a00 * b11 - a02 * b08 + a03 * b07) / determinant, (a32 * b02 - a30 * b05 - a33 * b01) / determinant, (a20 * b05 - a22 * b02 + a23 * b01) / determinant, (a10 * b10 - a11 * b08 + a13 * b06) / determinant, (a01 * b08 - a00 * b10 - a03 * b06) / determinant, (a30 * b04 - a31 * b02 + a33 * b00) / determinant, (a21 * b02 - a20 * b04 - a23 * b00) / determinant, (a11 * b07 - a10 * b09 - a12 * b06) / determinant, (a00 * b09 - a01 * b07 + a02 * b06) / determinant, (a31 * b01 - a30 * b03 - a32 * b00) / determinant, (a20 * b03 - a21 * b01 + a22 * b00) / determinant];\n    return new Matrix(result);\n  }\n\n  Transpose() {\n    let result = [this.matrix[0], this.matrix[4], this.matrix[8], this.matrix[12], this.matrix[1], this.matrix[5], this.matrix[9], this.matrix[13], this.matrix[2], this.matrix[6], this.matrix[10], this.matrix[14], this.matrix[3], this.matrix[7], this.matrix[11], this.matrix[15]];\n    return new Matrix(result);\n  }\n\n  InvertTranspose() {\n    let result = this.Invert();\n\n    if (result === null) {\n      return null;\n    }\n\n    return result.Transpose();\n  }\n\n  MultiplyVector(vector) {\n    let a00 = vector.x;\n    let a01 = vector.y;\n    let a02 = vector.z;\n    let a03 = vector.w;\n    let b00 = this.matrix[0];\n    let b01 = this.matrix[1];\n    let b02 = this.matrix[2];\n    let b03 = this.matrix[3];\n    let b10 = this.matrix[4];\n    let b11 = this.matrix[5];\n    let b12 = this.matrix[6];\n    let b13 = this.matrix[7];\n    let b20 = this.matrix[8];\n    let b21 = this.matrix[9];\n    let b22 = this.matrix[10];\n    let b23 = this.matrix[11];\n    let b30 = this.matrix[12];\n    let b31 = this.matrix[13];\n    let b32 = this.matrix[14];\n    let b33 = this.matrix[15];\n    let result = new Coord4D(a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30, a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31, a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32, a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33);\n    return result;\n  }\n\n  MultiplyMatrix(matrix) {\n    let a00 = this.matrix[0];\n    let a01 = this.matrix[1];\n    let a02 = this.matrix[2];\n    let a03 = this.matrix[3];\n    let a10 = this.matrix[4];\n    let a11 = this.matrix[5];\n    let a12 = this.matrix[6];\n    let a13 = this.matrix[7];\n    let a20 = this.matrix[8];\n    let a21 = this.matrix[9];\n    let a22 = this.matrix[10];\n    let a23 = this.matrix[11];\n    let a30 = this.matrix[12];\n    let a31 = this.matrix[13];\n    let a32 = this.matrix[14];\n    let a33 = this.matrix[15];\n    let b00 = matrix.matrix[0];\n    let b01 = matrix.matrix[1];\n    let b02 = matrix.matrix[2];\n    let b03 = matrix.matrix[3];\n    let b10 = matrix.matrix[4];\n    let b11 = matrix.matrix[5];\n    let b12 = matrix.matrix[6];\n    let b13 = matrix.matrix[7];\n    let b20 = matrix.matrix[8];\n    let b21 = matrix.matrix[9];\n    let b22 = matrix.matrix[10];\n    let b23 = matrix.matrix[11];\n    let b30 = matrix.matrix[12];\n    let b31 = matrix.matrix[13];\n    let b32 = matrix.matrix[14];\n    let b33 = matrix.matrix[15];\n    let result = [a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30, a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31, a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32, a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33, a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30, a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31, a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32, a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33, a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30, a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31, a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32, a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33, a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30, a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31, a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32, a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33];\n    return new Matrix(result);\n  }\n\n}\nexport function MatrixIsEqual(a, b) {\n  const aMatrix = a.Get();\n  const bMatrix = b.Get();\n\n  for (let i = 0; i < 16; i++) {\n    if (!IsEqual(aMatrix[i], bMatrix[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["Quaternion","Coord3D","VectorLength3D","Coord4D","IsEqual","IsNegative","QuaternionFromAxisAngle","Matrix","constructor","matrix","undefined","IsValid","Set","Get","Clone","result","CreateIdentity","IsIdentity","identity","i","CreateTranslation","x","y","z","CreateRotation","w","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","CreateRotationAxisAngle","axis","angle","quaternion","CreateScale","ComposeTRS","translation","rotation","scale","tx","ty","tz","qx","qy","qz","qw","sx","sy","sz","DecomposeTRS","determinant","Determinant","m00","m01","m02","m10","m11","m12","m20","m21","m22","tr","s","Math","sqrt","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b04","b05","b06","b07","b08","b09","b10","b11","Invert","Transpose","InvertTranspose","MultiplyVector","vector","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","MultiplyMatrix","MatrixIsEqual","a","b","aMatrix","bMatrix"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/geometry/matrix.js"],"sourcesContent":["import { Quaternion } from './quaternion.js';\r\nimport { Coord3D, VectorLength3D } from './coord3d.js';\r\nimport { Coord4D } from './coord4d.js';\r\nimport { IsEqual, IsNegative } from './geometry.js';\r\nimport { QuaternionFromAxisAngle } from './quaternion.js';\r\n\r\nexport class Matrix\r\n{\r\n    constructor (matrix)\r\n    {\r\n        this.matrix = null;\r\n        if (matrix !== undefined && matrix !== null) {\r\n            this.matrix = matrix;\r\n        }\r\n    }\r\n\r\n    IsValid ()\r\n    {\r\n        return this.matrix !== null;\r\n    }\r\n\r\n    Set (matrix)\r\n    {\r\n        this.matrix = matrix;\r\n        return this;\r\n    }\r\n\r\n    Get ()\r\n    {\r\n        return this.matrix;\r\n    }\r\n\r\n    Clone ()\r\n    {\r\n        let result = [\r\n            this.matrix[0], this.matrix[1], this.matrix[2], this.matrix[3],\r\n            this.matrix[4], this.matrix[5], this.matrix[6], this.matrix[7],\r\n            this.matrix[8], this.matrix[9], this.matrix[10], this.matrix[11],\r\n            this.matrix[12], this.matrix[13], this.matrix[14], this.matrix[15]\r\n        ];\r\n        return new Matrix (result);\r\n    }\r\n\r\n    CreateIdentity ()\r\n    {\r\n        this.matrix = [\r\n            1.0, 0.0, 0.0, 0.0,\r\n            0.0, 1.0, 0.0, 0.0,\r\n            0.0, 0.0, 1.0, 0.0,\r\n            0.0, 0.0, 0.0, 1.0\r\n        ];\r\n        return this;\r\n    }\r\n\r\n    IsIdentity ()\r\n    {\r\n        let identity = new Matrix ().CreateIdentity ().Get ();\r\n        for (let i = 0; i < 16; i++) {\r\n            if (!IsEqual (this.matrix[i], identity[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    CreateTranslation (x, y, z)\r\n    {\r\n        this.matrix = [\r\n            1.0, 0.0, 0.0, 0.0,\r\n            0.0, 1.0, 0.0, 0.0,\r\n            0.0, 0.0, 1.0, 0.0,\r\n            x, y, z, 1.0\r\n        ];\r\n        return this;\r\n    }\r\n\r\n    CreateRotation (x, y, z, w)\r\n    {\r\n        let x2 = x + x;\r\n        let y2 = y + y;\r\n        let z2 = z + z;\r\n        let xx = x * x2;\r\n        let xy = x * y2;\r\n        let xz = x * z2;\r\n        let yy = y * y2;\r\n        let yz = y * z2;\r\n        let zz = z * z2;\r\n        let wx = w * x2;\r\n        let wy = w * y2;\r\n        let wz = w * z2;\r\n        this.matrix = [\r\n            1.0 - (yy + zz), xy + wz, xz - wy, 0.0,\r\n            xy - wz, 1.0 - (xx + zz), yz + wx, 0.0,\r\n            xz + wy, yz - wx, 1.0 - (xx + yy), 0.0,\r\n            0.0, 0.0, 0.0, 1.0\r\n        ];\r\n        return this;\r\n    }\r\n\r\n    CreateRotationAxisAngle (axis, angle)\r\n    {\r\n        let quaternion = QuaternionFromAxisAngle (axis, angle);\r\n        return this.CreateRotation (quaternion.x, quaternion.y, quaternion.z, quaternion.w);\r\n    }\r\n\r\n    CreateScale (x, y, z)\r\n    {\r\n        this.matrix = [\r\n            x, 0.0, 0.0, 0.0,\r\n            0.0, y, 0.0, 0.0,\r\n            0.0, 0.0, z, 0.0,\r\n            0.0, 0.0, 0.0, 1.0\r\n        ];\r\n        return this;\r\n    }\r\n\r\n    ComposeTRS (translation, rotation, scale)\r\n    {\r\n        let tx = translation.x;\r\n        let ty = translation.y;\r\n        let tz = translation.z;\r\n        let qx = rotation.x;\r\n        let qy = rotation.y;\r\n        let qz = rotation.z;\r\n        let qw = rotation.w;\r\n        let sx = scale.x;\r\n        let sy = scale.y;\r\n        let sz = scale.z;\r\n\r\n        let x2 = qx + qx;\r\n        let y2 = qy + qy;\r\n        let z2 = qz + qz;\r\n        let xx = qx * x2;\r\n        let xy = qx * y2;\r\n        let xz = qx * z2;\r\n        let yy = qy * y2;\r\n        let yz = qy * z2;\r\n        let zz = qz * z2;\r\n        let wx = qw * x2;\r\n        let wy = qw * y2;\r\n        let wz = qw * z2;\r\n\r\n        this.matrix = [\r\n            (1.0 - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0.0,\r\n            (xy - wz) * sy, (1.0 - (xx + zz)) * sy, (yz + wx) * sy, 0.0,\r\n            (xz + wy) * sz, (yz - wx) * sz, (1.0 - (xx + yy)) * sz, 0.0,\r\n            tx, ty, tz, 1.0\r\n        ];\r\n        return this;\r\n    }\r\n\r\n    DecomposeTRS ()\r\n    {\r\n        let translation = new Coord3D (\r\n            this.matrix[12],\r\n            this.matrix[13],\r\n            this.matrix[14]\r\n        );\r\n\r\n        let sx = VectorLength3D (this.matrix[0], this.matrix[1], this.matrix[2]);\r\n        let sy = VectorLength3D (this.matrix[4], this.matrix[5], this.matrix[6]);\r\n        let sz = VectorLength3D (this.matrix[8], this.matrix[9], this.matrix[10]);\r\n        let determinant = this.Determinant ();\r\n        if (IsNegative (determinant)) {\r\n            sx *= -1.0;\r\n        }\r\n        let scale = new Coord3D (sx, sy, sz);\r\n\r\n        let m00 = this.matrix[0] / sx;\r\n        let m01 = this.matrix[4] / sy;\r\n        let m02 = this.matrix[8] / sz;\r\n        let m10 = this.matrix[1] / sx;\r\n        let m11 = this.matrix[5] / sy;\r\n        let m12 = this.matrix[9] / sz;\r\n        let m20 = this.matrix[2] / sx;\r\n        let m21 = this.matrix[6] / sy;\r\n        let m22 = this.matrix[10] / sz;\r\n\r\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n        let rotation = null;\r\n        let tr = m00 + m11 + m22;\r\n        if (tr > 0.0) {\r\n            let s = Math.sqrt (tr + 1.0) * 2.0;\r\n            rotation = new Quaternion (\r\n                (m21 - m12) / s,\r\n                (m02 - m20) / s,\r\n                (m10 - m01) / s,\r\n                0.25 * s\r\n            );\r\n        } else if ((m00 > m11) && (m00 > m22)) {\r\n            let s = Math.sqrt (1.0 + m00 - m11 - m22) * 2.0;\r\n            rotation = new Quaternion (\r\n                0.25 * s,\r\n                (m01 + m10) / s,\r\n                (m02 + m20) / s,\r\n                (m21 - m12) / s\r\n            );\r\n        } else if (m11 > m22) {\r\n            let s = Math.sqrt (1.0 + m11 - m00 - m22) * 2.0;\r\n            rotation = new Quaternion (\r\n                (m01 + m10) / s,\r\n                0.25 * s,\r\n                (m12 + m21) / s,\r\n                (m02 - m20) / s\r\n            );\r\n        } else {\r\n            let s = Math.sqrt (1.0 + m22 - m00 - m11) * 2.0;\r\n            rotation = new Quaternion (\r\n                (m02 + m20) / s,\r\n                (m12 + m21) / s,\r\n                0.25 * s,\r\n                (m10 - m01) / s\r\n            );\r\n        }\r\n\r\n        return {\r\n            translation : translation,\r\n            rotation : rotation,\r\n            scale : scale\r\n        };\r\n    }\r\n\r\n    Determinant ()\r\n    {\r\n        let a00 = this.matrix[0];\r\n        let a01 = this.matrix[1];\r\n        let a02 = this.matrix[2];\r\n        let a03 = this.matrix[3];\r\n        let a10 = this.matrix[4];\r\n        let a11 = this.matrix[5];\r\n        let a12 = this.matrix[6];\r\n        let a13 = this.matrix[7];\r\n        let a20 = this.matrix[8];\r\n        let a21 = this.matrix[9];\r\n        let a22 = this.matrix[10];\r\n        let a23 = this.matrix[11];\r\n        let a30 = this.matrix[12];\r\n        let a31 = this.matrix[13];\r\n        let a32 = this.matrix[14];\r\n        let a33 = this.matrix[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        return determinant;\r\n    }\r\n\r\n    Invert ()\r\n    {\r\n        let a00 = this.matrix[0];\r\n        let a01 = this.matrix[1];\r\n        let a02 = this.matrix[2];\r\n        let a03 = this.matrix[3];\r\n        let a10 = this.matrix[4];\r\n        let a11 = this.matrix[5];\r\n        let a12 = this.matrix[6];\r\n        let a13 = this.matrix[7];\r\n        let a20 = this.matrix[8];\r\n        let a21 = this.matrix[9];\r\n        let a22 = this.matrix[10];\r\n        let a23 = this.matrix[11];\r\n        let a30 = this.matrix[12];\r\n        let a31 = this.matrix[13];\r\n        let a32 = this.matrix[14];\r\n        let a33 = this.matrix[15];\r\n\r\n        let b00 = a00 * a11 - a01 * a10;\r\n        let b01 = a00 * a12 - a02 * a10;\r\n        let b02 = a00 * a13 - a03 * a10;\r\n        let b03 = a01 * a12 - a02 * a11;\r\n        let b04 = a01 * a13 - a03 * a11;\r\n        let b05 = a02 * a13 - a03 * a12;\r\n        let b06 = a20 * a31 - a21 * a30;\r\n        let b07 = a20 * a32 - a22 * a30;\r\n        let b08 = a20 * a33 - a23 * a30;\r\n        let b09 = a21 * a32 - a22 * a31;\r\n        let b10 = a21 * a33 - a23 * a31;\r\n        let b11 = a22 * a33 - a23 * a32;\r\n\r\n        let determinant = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n        if (IsEqual (determinant, 0.0)) {\r\n            return null;\r\n        }\r\n\r\n        let result = [\r\n            (a11 * b11 - a12 * b10 + a13 * b09) / determinant,\r\n            (a02 * b10 - a01 * b11 - a03 * b09) / determinant,\r\n            (a31 * b05 - a32 * b04 + a33 * b03) / determinant,\r\n            (a22 * b04 - a21 * b05 - a23 * b03) / determinant,\r\n            (a12 * b08 - a10 * b11 - a13 * b07) / determinant,\r\n            (a00 * b11 - a02 * b08 + a03 * b07) / determinant,\r\n            (a32 * b02 - a30 * b05 - a33 * b01) / determinant,\r\n            (a20 * b05 - a22 * b02 + a23 * b01) / determinant,\r\n            (a10 * b10 - a11 * b08 + a13 * b06) / determinant,\r\n            (a01 * b08 - a00 * b10 - a03 * b06) / determinant,\r\n            (a30 * b04 - a31 * b02 + a33 * b00) / determinant,\r\n            (a21 * b02 - a20 * b04 - a23 * b00) / determinant,\r\n            (a11 * b07 - a10 * b09 - a12 * b06) / determinant,\r\n            (a00 * b09 - a01 * b07 + a02 * b06) / determinant,\r\n            (a31 * b01 - a30 * b03 - a32 * b00) / determinant,\r\n            (a20 * b03 - a21 * b01 + a22 * b00) / determinant\r\n        ];\r\n\r\n        return new Matrix (result);\r\n    }\r\n\r\n    Transpose ()\r\n    {\r\n        let result = [\r\n            this.matrix[0], this.matrix[4], this.matrix[8], this.matrix[12],\r\n            this.matrix[1], this.matrix[5], this.matrix[9], this.matrix[13],\r\n            this.matrix[2], this.matrix[6], this.matrix[10], this.matrix[14],\r\n            this.matrix[3], this.matrix[7], this.matrix[11], this.matrix[15]\r\n        ];\r\n        return new Matrix (result);\r\n    }\r\n\r\n    InvertTranspose ()\r\n    {\r\n        let result = this.Invert ();\r\n        if (result === null) {\r\n            return null;\r\n        }\r\n        return result.Transpose ();\r\n    }\r\n\r\n    MultiplyVector (vector)\r\n    {\r\n        let a00 = vector.x;\r\n        let a01 = vector.y;\r\n        let a02 = vector.z;\r\n        let a03 = vector.w;\r\n\r\n        let b00 = this.matrix[0];\r\n        let b01 = this.matrix[1];\r\n        let b02 = this.matrix[2];\r\n        let b03 = this.matrix[3];\r\n        let b10 = this.matrix[4];\r\n        let b11 = this.matrix[5];\r\n        let b12 = this.matrix[6];\r\n        let b13 = this.matrix[7];\r\n        let b20 = this.matrix[8];\r\n        let b21 = this.matrix[9];\r\n        let b22 = this.matrix[10];\r\n        let b23 = this.matrix[11];\r\n        let b30 = this.matrix[12];\r\n        let b31 = this.matrix[13];\r\n        let b32 = this.matrix[14];\r\n        let b33 = this.matrix[15];\r\n\r\n        let result = new Coord4D (\r\n            a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,\r\n            a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,\r\n            a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,\r\n            a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33\r\n        );\r\n        return result;\r\n    }\r\n\r\n    MultiplyMatrix (matrix)\r\n    {\r\n        let a00 = this.matrix[0];\r\n        let a01 = this.matrix[1];\r\n        let a02 = this.matrix[2];\r\n        let a03 = this.matrix[3];\r\n        let a10 = this.matrix[4];\r\n        let a11 = this.matrix[5];\r\n        let a12 = this.matrix[6];\r\n        let a13 = this.matrix[7];\r\n        let a20 = this.matrix[8];\r\n        let a21 = this.matrix[9];\r\n        let a22 = this.matrix[10];\r\n        let a23 = this.matrix[11];\r\n        let a30 = this.matrix[12];\r\n        let a31 = this.matrix[13];\r\n        let a32 = this.matrix[14];\r\n        let a33 = this.matrix[15];\r\n\r\n        let b00 = matrix.matrix[0];\r\n        let b01 = matrix.matrix[1];\r\n        let b02 = matrix.matrix[2];\r\n        let b03 = matrix.matrix[3];\r\n        let b10 = matrix.matrix[4];\r\n        let b11 = matrix.matrix[5];\r\n        let b12 = matrix.matrix[6];\r\n        let b13 = matrix.matrix[7];\r\n        let b20 = matrix.matrix[8];\r\n        let b21 = matrix.matrix[9];\r\n        let b22 = matrix.matrix[10];\r\n        let b23 = matrix.matrix[11];\r\n        let b30 = matrix.matrix[12];\r\n        let b31 = matrix.matrix[13];\r\n        let b32 = matrix.matrix[14];\r\n        let b33 = matrix.matrix[15];\r\n\r\n        let result = [\r\n            a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,\r\n            a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,\r\n            a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,\r\n            a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33,\r\n            a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30,\r\n            a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31,\r\n            a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32,\r\n            a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33,\r\n            a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30,\r\n            a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31,\r\n            a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32,\r\n            a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33,\r\n            a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30,\r\n            a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31,\r\n            a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32,\r\n            a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33\r\n        ];\r\n\r\n        return new Matrix (result);\r\n    }\r\n}\r\n\r\nexport function MatrixIsEqual (a, b)\r\n{\r\n    const aMatrix = a.Get ();\r\n    const bMatrix = b.Get ();\r\n\tfor (let i = 0; i < 16; i++) {\r\n        if (!IsEqual (aMatrix[i], bMatrix[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}