{"ast":null,"code":"import { BackSide, BoxGeometry, BufferAttribute, BufferGeometry, ClampToEdgeWrapping, Color, ConeGeometry, CylinderGeometry, DataTexture, DoubleSide, FileLoader, Float32BufferAttribute, FrontSide, Group, LineBasicMaterial, LineSegments, Loader, LoaderUtils, Mesh, MeshBasicMaterial, MeshPhongMaterial, Object3D, Points, PointsMaterial, Quaternion, RepeatWrapping, Scene, ShapeUtils, SphereGeometry, TextureLoader, Vector2, Vector3 } from 'three';\nimport chevrotain from '../libs/chevrotain.module.min.js';\n\nclass VRMLLoader extends Loader {\n  constructor(manager) {\n    super(manager); // dependency check\n\n    if (typeof chevrotain === 'undefined') {\n      // eslint-disable-line no-undef\n      throw Error('THREE.VRMLLoader: External library chevrotain.min.js required.');\n    }\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data, path) {\n    const nodeMap = {};\n\n    function generateVRMLTree(data) {\n      // create lexer, parser and visitor\n      const tokenData = createTokens();\n      const lexer = new VRMLLexer(tokenData.tokens);\n      const parser = new VRMLParser(tokenData.tokenVocabulary);\n      const visitor = createVisitor(parser.getBaseCstVisitorConstructor()); // lexing\n\n      const lexingResult = lexer.lex(data);\n      parser.input = lexingResult.tokens; // parsing\n\n      const cstOutput = parser.vrml();\n\n      if (parser.errors.length > 0) {\n        console.error(parser.errors);\n        throw Error('THREE.VRMLLoader: Parsing errors detected.');\n      } // actions\n\n\n      const ast = visitor.visit(cstOutput);\n      return ast;\n    }\n\n    function createTokens() {\n      const createToken = chevrotain.createToken; // eslint-disable-line no-undef\n      // from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n\n      const RouteIdentifier = createToken({\n        name: 'RouteIdentifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/\n      });\n      const Identifier = createToken({\n        name: 'Identifier',\n        pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/,\n        longer_alt: RouteIdentifier\n      }); // from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n      const nodeTypes = ['Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n      'Inline', 'LOD', 'Switch', // special groups\n      'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n      'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n      'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n      'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n      'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n      'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n      'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n      'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n      ]; //\n\n      const Version = createToken({\n        name: 'Version',\n        pattern: /#VRML.*/,\n        longer_alt: Identifier\n      });\n      const NodeName = createToken({\n        name: 'NodeName',\n        pattern: new RegExp(nodeTypes.join('|')),\n        longer_alt: Identifier\n      });\n      const DEF = createToken({\n        name: 'DEF',\n        pattern: /DEF/,\n        longer_alt: Identifier\n      });\n      const USE = createToken({\n        name: 'USE',\n        pattern: /USE/,\n        longer_alt: Identifier\n      });\n      const ROUTE = createToken({\n        name: 'ROUTE',\n        pattern: /ROUTE/,\n        longer_alt: Identifier\n      });\n      const TO = createToken({\n        name: 'TO',\n        pattern: /TO/,\n        longer_alt: Identifier\n      }); //\n\n      const StringLiteral = createToken({\n        name: 'StringLiteral',\n        pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/\n      });\n      const HexLiteral = createToken({\n        name: 'HexLiteral',\n        pattern: /0[xX][0-9a-fA-F]+/\n      });\n      const NumberLiteral = createToken({\n        name: 'NumberLiteral',\n        pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/\n      });\n      const TrueLiteral = createToken({\n        name: 'TrueLiteral',\n        pattern: /TRUE/\n      });\n      const FalseLiteral = createToken({\n        name: 'FalseLiteral',\n        pattern: /FALSE/\n      });\n      const NullLiteral = createToken({\n        name: 'NullLiteral',\n        pattern: /NULL/\n      });\n      const LSquare = createToken({\n        name: 'LSquare',\n        pattern: /\\[/\n      });\n      const RSquare = createToken({\n        name: 'RSquare',\n        pattern: /]/\n      });\n      const LCurly = createToken({\n        name: 'LCurly',\n        pattern: /{/\n      });\n      const RCurly = createToken({\n        name: 'RCurly',\n        pattern: /}/\n      });\n      const Comment = createToken({\n        name: 'Comment',\n        pattern: /#.*/,\n        group: chevrotain.Lexer.SKIPPED // eslint-disable-line no-undef\n\n      }); // commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n      const WhiteSpace = createToken({\n        name: 'WhiteSpace',\n        pattern: /[ ,\\s]/,\n        group: chevrotain.Lexer.SKIPPED // eslint-disable-line no-undef\n\n      });\n      const tokens = [WhiteSpace, // keywords appear before the Identifier\n      NodeName, DEF, USE, ROUTE, TO, TrueLiteral, FalseLiteral, NullLiteral, // the Identifier must appear after the keywords because all keywords are valid identifiers\n      Version, Identifier, RouteIdentifier, StringLiteral, HexLiteral, NumberLiteral, LSquare, RSquare, LCurly, RCurly, Comment];\n      const tokenVocabulary = {};\n\n      for (let i = 0, l = tokens.length; i < l; i++) {\n        const token = tokens[i];\n        tokenVocabulary[token.name] = token;\n      }\n\n      return {\n        tokens: tokens,\n        tokenVocabulary: tokenVocabulary\n      };\n    }\n\n    function createVisitor(BaseVRMLVisitor) {\n      // the visitor is created dynmaically based on the given base class\n      class VRMLToASTVisitor extends BaseVRMLVisitor {\n        constructor() {\n          super();\n          this.validateVisitor();\n        }\n\n        vrml(ctx) {\n          const data = {\n            version: this.visit(ctx.version),\n            nodes: [],\n            routes: []\n          };\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            data.nodes.push(this.visit(node));\n          }\n\n          if (ctx.route) {\n            for (let i = 0, l = ctx.route.length; i < l; i++) {\n              const route = ctx.route[i];\n              data.routes.push(this.visit(route));\n            }\n          }\n\n          return data;\n        }\n\n        version(ctx) {\n          return ctx.Version[0].image;\n        }\n\n        node(ctx) {\n          const data = {\n            name: ctx.NodeName[0].image,\n            fields: []\n          };\n\n          if (ctx.field) {\n            for (let i = 0, l = ctx.field.length; i < l; i++) {\n              const field = ctx.field[i];\n              data.fields.push(this.visit(field));\n            }\n          } // DEF\n\n\n          if (ctx.def) {\n            data.DEF = this.visit(ctx.def[0]);\n          }\n\n          return data;\n        }\n\n        field(ctx) {\n          const data = {\n            name: ctx.Identifier[0].image,\n            type: null,\n            values: null\n          };\n          let result; // SFValue\n\n          if (ctx.singleFieldValue) {\n            result = this.visit(ctx.singleFieldValue[0]);\n          } // MFValue\n\n\n          if (ctx.multiFieldValue) {\n            result = this.visit(ctx.multiFieldValue[0]);\n          }\n\n          data.type = result.type;\n          data.values = result.values;\n          return data;\n        }\n\n        def(ctx) {\n          return (ctx.Identifier || ctx.NodeName)[0].image;\n        }\n\n        use(ctx) {\n          return {\n            USE: (ctx.Identifier || ctx.NodeName)[0].image\n          };\n        }\n\n        singleFieldValue(ctx) {\n          return processField(this, ctx);\n        }\n\n        multiFieldValue(ctx) {\n          return processField(this, ctx);\n        }\n\n        route(ctx) {\n          const data = {\n            FROM: ctx.RouteIdentifier[0].image,\n            TO: ctx.RouteIdentifier[1].image\n          };\n          return data;\n        }\n\n      }\n\n      function processField(scope, ctx) {\n        const field = {\n          type: null,\n          values: []\n        };\n\n        if (ctx.node) {\n          field.type = 'node';\n\n          for (let i = 0, l = ctx.node.length; i < l; i++) {\n            const node = ctx.node[i];\n            field.values.push(scope.visit(node));\n          }\n        }\n\n        if (ctx.use) {\n          field.type = 'use';\n\n          for (let i = 0, l = ctx.use.length; i < l; i++) {\n            const use = ctx.use[i];\n            field.values.push(scope.visit(use));\n          }\n        }\n\n        if (ctx.StringLiteral) {\n          field.type = 'string';\n\n          for (let i = 0, l = ctx.StringLiteral.length; i < l; i++) {\n            const stringLiteral = ctx.StringLiteral[i];\n            field.values.push(stringLiteral.image.replace(/'|\"/g, ''));\n          }\n        }\n\n        if (ctx.NumberLiteral) {\n          field.type = 'number';\n\n          for (let i = 0, l = ctx.NumberLiteral.length; i < l; i++) {\n            const numberLiteral = ctx.NumberLiteral[i];\n            field.values.push(parseFloat(numberLiteral.image));\n          }\n        }\n\n        if (ctx.HexLiteral) {\n          field.type = 'hex';\n\n          for (let i = 0, l = ctx.HexLiteral.length; i < l; i++) {\n            const hexLiteral = ctx.HexLiteral[i];\n            field.values.push(hexLiteral.image);\n          }\n        }\n\n        if (ctx.TrueLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.TrueLiteral.length; i < l; i++) {\n            const trueLiteral = ctx.TrueLiteral[i];\n            if (trueLiteral.image === 'TRUE') field.values.push(true);\n          }\n        }\n\n        if (ctx.FalseLiteral) {\n          field.type = 'boolean';\n\n          for (let i = 0, l = ctx.FalseLiteral.length; i < l; i++) {\n            const falseLiteral = ctx.FalseLiteral[i];\n            if (falseLiteral.image === 'FALSE') field.values.push(false);\n          }\n        }\n\n        if (ctx.NullLiteral) {\n          field.type = 'null';\n          ctx.NullLiteral.forEach(function () {\n            field.values.push(null);\n          });\n        }\n\n        return field;\n      }\n\n      return new VRMLToASTVisitor();\n    }\n\n    function parseTree(tree) {\n      // console.log( JSON.stringify( tree, null, 2 ) );\n      const nodes = tree.nodes;\n      const scene = new Scene(); // first iteration: build nodemap based on DEF statements\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        buildNodeMap(node);\n      } // second iteration: build nodes\n\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        const node = nodes[i];\n        const object = getNode(node);\n        if (object instanceof Object3D) scene.add(object);\n        if (node.name === 'WorldInfo') scene.userData.worldInfo = object;\n      }\n\n      return scene;\n    }\n\n    function buildNodeMap(node) {\n      if (node.DEF) {\n        nodeMap[node.DEF] = node;\n      }\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n\n        if (field.type === 'node') {\n          const fieldValues = field.values;\n\n          for (let j = 0, jl = fieldValues.length; j < jl; j++) {\n            buildNodeMap(fieldValues[j]);\n          }\n        }\n      }\n    }\n\n    function getNode(node) {\n      // handle case where a node refers to a different one\n      if (node.USE) {\n        return resolveUSE(node.USE);\n      }\n\n      if (node.build !== undefined) return node.build;\n      node.build = buildNode(node);\n      return node.build;\n    } // node builder\n\n\n    function buildNode(node) {\n      const nodeName = node.name;\n      let build;\n\n      switch (nodeName) {\n        case 'Group':\n        case 'Transform':\n        case 'Collision':\n          build = buildGroupingNode(node);\n          break;\n\n        case 'Background':\n          build = buildBackgroundNode(node);\n          break;\n\n        case 'Shape':\n          build = buildShapeNode(node);\n          break;\n\n        case 'Appearance':\n          build = buildAppearanceNode(node);\n          break;\n\n        case 'Material':\n          build = buildMaterialNode(node);\n          break;\n\n        case 'ImageTexture':\n          build = buildImageTextureNode(node);\n          break;\n\n        case 'PixelTexture':\n          build = buildPixelTextureNode(node);\n          break;\n\n        case 'TextureTransform':\n          build = buildTextureTransformNode(node);\n          break;\n\n        case 'IndexedFaceSet':\n          build = buildIndexedFaceSetNode(node);\n          break;\n\n        case 'IndexedLineSet':\n          build = buildIndexedLineSetNode(node);\n          break;\n\n        case 'PointSet':\n          build = buildPointSetNode(node);\n          break;\n\n        case 'Box':\n          build = buildBoxNode(node);\n          break;\n\n        case 'Cone':\n          build = buildConeNode(node);\n          break;\n\n        case 'Cylinder':\n          build = buildCylinderNode(node);\n          break;\n\n        case 'Sphere':\n          build = buildSphereNode(node);\n          break;\n\n        case 'ElevationGrid':\n          build = buildElevationGridNode(node);\n          break;\n\n        case 'Extrusion':\n          build = buildExtrusionNode(node);\n          break;\n\n        case 'Color':\n        case 'Coordinate':\n        case 'Normal':\n        case 'TextureCoordinate':\n          build = buildGeometricNode(node);\n          break;\n\n        case 'WorldInfo':\n          build = buildWorldInfoNode(node);\n          break;\n\n        case 'Anchor':\n        case 'Billboard':\n        case 'Inline':\n        case 'LOD':\n        case 'Switch':\n        case 'AudioClip':\n        case 'DirectionalLight':\n        case 'PointLight':\n        case 'Script':\n        case 'Sound':\n        case 'SpotLight':\n        case 'CylinderSensor':\n        case 'PlaneSensor':\n        case 'ProximitySensor':\n        case 'SphereSensor':\n        case 'TimeSensor':\n        case 'TouchSensor':\n        case 'VisibilitySensor':\n        case 'Text':\n        case 'FontStyle':\n        case 'MovieTexture':\n        case 'ColorInterpolator':\n        case 'CoordinateInterpolator':\n        case 'NormalInterpolator':\n        case 'OrientationInterpolator':\n        case 'PositionInterpolator':\n        case 'ScalarInterpolator':\n        case 'Fog':\n        case 'NavigationInfo':\n        case 'Viewpoint':\n          // node not supported yet\n          break;\n\n        default:\n          console.warn('THREE.VRMLLoader: Unknown node:', nodeName);\n          break;\n      }\n\n      if (build !== undefined && node.DEF !== undefined && build.hasOwnProperty('name') === true) {\n        build.name = node.DEF;\n      }\n\n      return build;\n    }\n\n    function buildGroupingNode(node) {\n      const object = new Group(); //\n\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bboxCenter':\n            // field not supported\n            break;\n\n          case 'bboxSize':\n            // field not supported\n            break;\n\n          case 'center':\n            // field not supported\n            break;\n\n          case 'children':\n            parseFieldChildren(fieldValues, object);\n            break;\n\n          case 'collide':\n            // field not supported\n            break;\n\n          case 'rotation':\n            const axis = new Vector3(fieldValues[0], fieldValues[1], fieldValues[2]);\n            const angle = fieldValues[3];\n            object.quaternion.setFromAxisAngle(axis, angle);\n            break;\n\n          case 'scale':\n            object.scale.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'scaleOrientation':\n            // field not supported\n            break;\n\n          case 'translation':\n            object.position.set(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'proxy':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return object;\n    }\n\n    function buildBackgroundNode(node) {\n      const group = new Group();\n      let groundAngle, groundColor;\n      let skyAngle, skyColor;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'groundAngle':\n            groundAngle = fieldValues;\n            break;\n\n          case 'groundColor':\n            groundColor = fieldValues;\n            break;\n\n          case 'backUrl':\n            // field not supported\n            break;\n\n          case 'bottomUrl':\n            // field not supported\n            break;\n\n          case 'frontUrl':\n            // field not supported\n            break;\n\n          case 'leftUrl':\n            // field not supported\n            break;\n\n          case 'rightUrl':\n            // field not supported\n            break;\n\n          case 'topUrl':\n            // field not supported\n            break;\n\n          case 'skyAngle':\n            skyAngle = fieldValues;\n            break;\n\n          case 'skyColor':\n            skyColor = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const radius = 10000; // sky\n\n      if (skyColor) {\n        const skyGeometry = new SphereGeometry(radius, 32, 16);\n        const skyMaterial = new MeshBasicMaterial({\n          fog: false,\n          side: BackSide,\n          depthWrite: false,\n          depthTest: false\n        });\n\n        if (skyColor.length > 3) {\n          paintFaces(skyGeometry, radius, skyAngle, toColorArray(skyColor), true);\n          skyMaterial.vertexColors = true;\n        } else {\n          skyMaterial.color.setRGB(skyColor[0], skyColor[1], skyColor[2]);\n        }\n\n        const sky = new Mesh(skyGeometry, skyMaterial);\n        group.add(sky);\n      } // ground\n\n\n      if (groundColor) {\n        if (groundColor.length > 0) {\n          const groundGeometry = new SphereGeometry(radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI);\n          const groundMaterial = new MeshBasicMaterial({\n            fog: false,\n            side: BackSide,\n            vertexColors: true,\n            depthWrite: false,\n            depthTest: false\n          });\n          paintFaces(groundGeometry, radius, groundAngle, toColorArray(groundColor), false);\n          const ground = new Mesh(groundGeometry, groundMaterial);\n          group.add(ground);\n        }\n      } // render background group first\n\n\n      group.renderOrder = -Infinity;\n      return group;\n    }\n\n    function buildShapeNode(node) {\n      const fields = node.fields; // if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n      let material = new MeshBasicMaterial({\n        color: 0x000000\n      });\n      let geometry;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'appearance':\n            if (fieldValues[0] !== null) {\n              material = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          case 'geometry':\n            if (fieldValues[0] !== null) {\n              geometry = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build 3D object\n\n\n      let object;\n\n      if (geometry && geometry.attributes.position) {\n        const type = geometry._type;\n\n        if (type === 'points') {\n          // points\n          const pointsMaterial = new PointsMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            pointsMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n            if (material.isMeshPhongMaterial) {\n              pointsMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new Points(geometry, pointsMaterial);\n        } else if (type === 'line') {\n          // lines\n          const lineMaterial = new LineBasicMaterial({\n            color: 0xffffff\n          });\n\n          if (geometry.attributes.color !== undefined) {\n            lineMaterial.vertexColors = true;\n          } else {\n            // if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n            if (material.isMeshPhongMaterial) {\n              lineMaterial.color.copy(material.emissive);\n            }\n          }\n\n          object = new LineSegments(geometry, lineMaterial);\n        } else {\n          // consider meshes\n          // check \"solid\" hint (it's placed in the geometry but affects the material)\n          if (geometry._solid !== undefined) {\n            material.side = geometry._solid ? FrontSide : DoubleSide;\n          } // check for vertex colors\n\n\n          if (geometry.attributes.color !== undefined) {\n            material.vertexColors = true;\n          }\n\n          object = new Mesh(geometry, material);\n        }\n      } else {\n        object = new Object3D(); // if the geometry field is NULL or no vertices are defined the object is not drawn\n\n        object.visible = false;\n      }\n\n      return object;\n    }\n\n    function buildAppearanceNode(node) {\n      let material = new MeshPhongMaterial();\n      let transformData;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'material':\n            if (fieldValues[0] !== null) {\n              const materialData = getNode(fieldValues[0]);\n              if (materialData.diffuseColor) material.color.copy(materialData.diffuseColor);\n              if (materialData.emissiveColor) material.emissive.copy(materialData.emissiveColor);\n              if (materialData.shininess) material.shininess = materialData.shininess;\n              if (materialData.specularColor) material.specular.copy(materialData.specularColor);\n              if (materialData.transparency) material.opacity = 1 - materialData.transparency;\n              if (materialData.transparency > 0) material.transparent = true;\n            } else {\n              // if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n              material = new MeshBasicMaterial({\n                color: 0x000000\n              });\n            }\n\n            break;\n\n          case 'texture':\n            const textureNode = fieldValues[0];\n\n            if (textureNode !== null) {\n              if (textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture') {\n                material.map = getNode(textureNode);\n              } else {// MovieTexture not supported yet\n              }\n            }\n\n            break;\n\n          case 'textureTransform':\n            if (fieldValues[0] !== null) {\n              transformData = getNode(fieldValues[0]);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // only apply texture transform data if a texture was defined\n\n\n      if (material.map) {\n        // respect VRML lighting model\n        if (material.map.__type) {\n          switch (material.map.__type) {\n            case TEXTURE_TYPE.INTENSITY_ALPHA:\n              material.opacity = 1; // ignore transparency\n\n              break;\n\n            case TEXTURE_TYPE.RGB:\n              material.color.set(0xffffff); // ignore material color\n\n              break;\n\n            case TEXTURE_TYPE.RGBA:\n              material.color.set(0xffffff); // ignore material color\n\n              material.opacity = 1; // ignore transparency\n\n              break;\n\n            default:\n          }\n\n          delete material.map.__type;\n        } // apply texture transform\n\n\n        if (transformData) {\n          material.map.center.copy(transformData.center);\n          material.map.rotation = transformData.rotation;\n          material.map.repeat.copy(transformData.scale);\n          material.map.offset.copy(transformData.translation);\n        }\n      }\n\n      return material;\n    }\n\n    function buildMaterialNode(node) {\n      const materialData = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'ambientIntensity':\n            // field not supported\n            break;\n\n          case 'diffuseColor':\n            materialData.diffuseColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'emissiveColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'shininess':\n            materialData.shininess = fieldValues[0];\n            break;\n\n          case 'specularColor':\n            materialData.emissiveColor = new Color(fieldValues[0], fieldValues[1], fieldValues[2]);\n            break;\n\n          case 'transparency':\n            materialData.transparency = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return materialData;\n    }\n\n    function parseHexColor(hex, textureType, color) {\n      let value;\n\n      switch (textureType) {\n        case TEXTURE_TYPE.INTENSITY:\n          // Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n          value = parseInt(hex);\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.INTENSITY_ALPHA:\n          // Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n          value = parseInt('0x' + hex.substring(2, 4));\n          color.r = value;\n          color.g = value;\n          color.b = value;\n          color.a = parseInt('0x' + hex.substring(4, 6));\n          break;\n\n        case TEXTURE_TYPE.RGB:\n          // RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = 1;\n          break;\n\n        case TEXTURE_TYPE.RGBA:\n          // RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n          color.r = parseInt('0x' + hex.substring(2, 4));\n          color.g = parseInt('0x' + hex.substring(4, 6));\n          color.b = parseInt('0x' + hex.substring(6, 8));\n          color.a = parseInt('0x' + hex.substring(8, 10));\n          break;\n\n        default:\n      }\n    }\n\n    function getTextureType(num_components) {\n      let type;\n\n      switch (num_components) {\n        case 1:\n          type = TEXTURE_TYPE.INTENSITY;\n          break;\n\n        case 2:\n          type = TEXTURE_TYPE.INTENSITY_ALPHA;\n          break;\n\n        case 3:\n          type = TEXTURE_TYPE.RGB;\n          break;\n\n        case 4:\n          type = TEXTURE_TYPE.RGBA;\n          break;\n\n        default:\n      }\n\n      return type;\n    }\n\n    function buildPixelTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'image':\n            const width = fieldValues[0];\n            const height = fieldValues[1];\n            const num_components = fieldValues[2];\n            const textureType = getTextureType(num_components);\n            const data = new Uint8Array(4 * width * height);\n            const color = {\n              r: 0,\n              g: 0,\n              b: 0,\n              a: 0\n            };\n\n            for (let j = 3, k = 0, jl = fieldValues.length; j < jl; j++, k++) {\n              parseHexColor(fieldValues[j], textureType, color);\n              const stride = k * 4;\n              data[stride + 0] = color.r;\n              data[stride + 1] = color.g;\n              data[stride + 2] = color.b;\n              data[stride + 3] = color.a;\n            }\n\n            texture = new DataTexture(data, width, height);\n            texture.needsUpdate = true;\n            texture.__type = textureType; // needed for material modifications\n\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildImageTextureNode(node) {\n      let texture;\n      let wrapS = RepeatWrapping;\n      let wrapT = RepeatWrapping;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'url':\n            const url = fieldValues[0];\n            if (url) texture = textureLoader.load(url);\n            break;\n\n          case 'repeatS':\n            if (fieldValues[0] === false) wrapS = ClampToEdgeWrapping;\n            break;\n\n          case 'repeatT':\n            if (fieldValues[0] === false) wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (texture) {\n        texture.wrapS = wrapS;\n        texture.wrapT = wrapT;\n      }\n\n      return texture;\n    }\n\n    function buildTextureTransformNode(node) {\n      const transformData = {\n        center: new Vector2(),\n        rotation: new Vector2(),\n        scale: new Vector2(),\n        translation: new Vector2()\n      };\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'center':\n            transformData.center.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'rotation':\n            transformData.rotation = fieldValues[0];\n            break;\n\n          case 'scale':\n            transformData.scale.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          case 'translation':\n            transformData.translation.set(fieldValues[0], fieldValues[1]);\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return transformData;\n    }\n\n    function buildGeometricNode(node) {\n      return node.fields[0].values;\n    }\n\n    function buildWorldInfoNode(node) {\n      const worldInfo = {};\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'title':\n            worldInfo.title = fieldValues[0];\n            break;\n\n          case 'info':\n            worldInfo.info = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      return worldInfo;\n    }\n\n    function buildIndexedFaceSetNode(node) {\n      let color, coord, normal, texCoord;\n      let ccw = true,\n          solid = true,\n          creaseAngle = 0;\n      let colorIndex, coordIndex, normalIndex, texCoordIndex;\n      let colorPerVertex = true,\n          normalPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalIndex':\n            normalIndex = fieldValues;\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'texCoordIndex':\n            texCoordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      if (coordIndex === undefined) {\n        console.warn('THREE.VRMLLoader: Missing coordIndex.');\n        return new BufferGeometry(); // handle VRML files with incomplete geometry definition\n      }\n\n      const triangulatedCoordIndex = triangulateFaceIndex(coordIndex, ccw);\n      let colorAttribute;\n      let normalAttribute;\n      let uvAttribute;\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n            const triangulatedColorIndex = triangulateFaceIndex(colorIndex, ccw);\n            colorAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedColorIndex, color, 3);\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            colorAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex && colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n            const flattenFaceColors = flattenData(color, colorIndex);\n            const triangulatedFaceColors = triangulateFaceData(flattenFaceColors, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          } else {\n            // if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceColors = triangulateFaceData(color, coordIndex);\n            colorAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceColors);\n          }\n        }\n      }\n\n      if (normal) {\n        if (normalPerVertex === true) {\n          // consider vertex normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n            const triangulatedNormalIndex = triangulateFaceIndex(normalIndex, ccw);\n            normalAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedNormalIndex, normal, 3);\n          } else {\n            // if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n            normalAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(normal, 3));\n          }\n        } else {\n          // consider face normals\n          if (normalIndex && normalIndex.length > 0) {\n            // if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n            const flattenFaceNormals = flattenData(normal, normalIndex);\n            const triangulatedFaceNormals = triangulateFaceData(flattenFaceNormals, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          } else {\n            // if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n            const triangulatedFaceNormals = triangulateFaceData(normal, coordIndex);\n            normalAttribute = computeAttributeFromFaceData(triangulatedCoordIndex, triangulatedFaceNormals);\n          }\n        }\n      } else {\n        // if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n        normalAttribute = computeNormalAttribute(triangulatedCoordIndex, coord, creaseAngle);\n      }\n\n      if (texCoord) {\n        // texture coordinates are always defined on vertex level\n        if (texCoordIndex && texCoordIndex.length > 0) {\n          // if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n          const triangulatedTexCoordIndex = triangulateFaceIndex(texCoordIndex, ccw);\n          uvAttribute = computeAttributeFromIndexedData(triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2);\n        } else {\n          // if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n          uvAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(texCoord, 2));\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(triangulatedCoordIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // optional attributes\n\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      if (uvAttribute) geometry.setAttribute('uv', uvAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildIndexedLineSetNode(node) {\n      let color, coord;\n      let colorIndex, coordIndex;\n      let colorPerVertex = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          case 'colorIndex':\n            colorIndex = fieldValues;\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'coordIndex':\n            coordIndex = fieldValues;\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // build lines\n\n\n      let colorAttribute;\n      const expandedLineIndex = expandLineIndex(coordIndex); // create an index for three.js's linesegment primitive\n\n      if (color) {\n        if (colorPerVertex === true) {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n            const expandedColorIndex = expandLineIndex(colorIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromIndexedData(expandedLineIndex, expandedColorIndex, color, 3); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n            colorAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(color, 3));\n          }\n        } else {\n          if (colorIndex.length > 0) {\n            // if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n            const flattenLineColors = flattenData(color, colorIndex); // compute colors for each VRML primitve\n\n            const expandedLineColors = expandLineData(flattenLineColors, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          } else {\n            // if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n            const expandedLineColors = expandLineData(color, coordIndex); // compute colors for each line segment (rendering primitve)\n\n            colorAttribute = computeAttributeFromLineData(expandedLineIndex, expandedLineColors); // compute data on vertex level\n          }\n        }\n      } //\n\n\n      const geometry = new BufferGeometry();\n      const positionAttribute = toNonIndexedAttribute(expandedLineIndex, new Float32BufferAttribute(coord, 3));\n      geometry.setAttribute('position', positionAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute);\n      geometry._type = 'line';\n      return geometry;\n    }\n\n    function buildPointSetNode(node) {\n      let color, coord;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'coord':\n            const coordNode = fieldValues[0];\n\n            if (coordNode !== null) {\n              coord = getNode(coordNode);\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', new Float32BufferAttribute(coord, 3));\n      if (color) geometry.setAttribute('color', new Float32BufferAttribute(color, 3));\n      geometry._type = 'points';\n      return geometry;\n    }\n\n    function buildBoxNode(node) {\n      const size = new Vector3(2, 2, 2);\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'size':\n            size.x = fieldValues[0];\n            size.y = fieldValues[1];\n            size.z = fieldValues[2];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new BoxGeometry(size.x, size.y, size.z);\n      return geometry;\n    }\n\n    function buildConeNode(node) {\n      let radius = 1,\n          height = 2,\n          openEnded = false;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            openEnded = !fieldValues[0];\n            break;\n\n          case 'bottomRadius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new ConeGeometry(radius, height, 16, 1, openEnded);\n      return geometry;\n    }\n\n    function buildCylinderNode(node) {\n      let radius = 1,\n          height = 2;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'bottom':\n            // field not supported\n            break;\n\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          case 'height':\n            height = fieldValues[0];\n            break;\n\n          case 'side':\n            // field not supported\n            break;\n\n          case 'top':\n            // field not supported\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new CylinderGeometry(radius, radius, height, 16, 1);\n      return geometry;\n    }\n\n    function buildSphereNode(node) {\n      let radius = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'radius':\n            radius = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const geometry = new SphereGeometry(radius, 16, 16);\n      return geometry;\n    }\n\n    function buildElevationGridNode(node) {\n      let color;\n      let normal;\n      let texCoord;\n      let height;\n      let colorPerVertex = true;\n      let normalPerVertex = true;\n      let solid = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let xDimension = 2;\n      let zDimension = 2;\n      let xSpacing = 1;\n      let zSpacing = 1;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'color':\n            const colorNode = fieldValues[0];\n\n            if (colorNode !== null) {\n              color = getNode(colorNode);\n            }\n\n            break;\n\n          case 'normal':\n            const normalNode = fieldValues[0];\n\n            if (normalNode !== null) {\n              normal = getNode(normalNode);\n            }\n\n            break;\n\n          case 'texCoord':\n            const texCoordNode = fieldValues[0];\n\n            if (texCoordNode !== null) {\n              texCoord = getNode(texCoordNode);\n            }\n\n            break;\n\n          case 'height':\n            height = fieldValues;\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'colorPerVertex':\n            colorPerVertex = fieldValues[0];\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'normalPerVertex':\n            normalPerVertex = fieldValues[0];\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'xDimension':\n            xDimension = fieldValues[0];\n            break;\n\n          case 'xSpacing':\n            xSpacing = fieldValues[0];\n            break;\n\n          case 'zDimension':\n            zDimension = fieldValues[0];\n            break;\n\n          case 'zSpacing':\n            zSpacing = fieldValues[0];\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      } // vertex data\n\n\n      const vertices = [];\n      const normals = [];\n      const colors = [];\n      const uvs = [];\n\n      for (let i = 0; i < zDimension; i++) {\n        for (let j = 0; j < xDimension; j++) {\n          // compute a row major index\n          const index = i * xDimension + j; // vertices\n\n          const x = xSpacing * i;\n          const y = height[index];\n          const z = zSpacing * j;\n          vertices.push(x, y, z); // colors\n\n          if (color && colorPerVertex === true) {\n            const r = color[index * 3 + 0];\n            const g = color[index * 3 + 1];\n            const b = color[index * 3 + 2];\n            colors.push(r, g, b);\n          } // normals\n\n\n          if (normal && normalPerVertex === true) {\n            const xn = normal[index * 3 + 0];\n            const yn = normal[index * 3 + 1];\n            const zn = normal[index * 3 + 2];\n            normals.push(xn, yn, zn);\n          } // uvs\n\n\n          if (texCoord) {\n            const s = texCoord[index * 2 + 0];\n            const t = texCoord[index * 2 + 1];\n            uvs.push(s, t);\n          } else {\n            uvs.push(i / (xDimension - 1), j / (zDimension - 1));\n          }\n        }\n      } // indices\n\n\n      const indices = [];\n\n      for (let i = 0; i < xDimension - 1; i++) {\n        for (let j = 0; j < zDimension - 1; j++) {\n          // from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n          const a = i + j * xDimension;\n          const b = i + (j + 1) * xDimension;\n          const c = i + 1 + (j + 1) * xDimension;\n          const d = i + 1 + j * xDimension; // faces\n\n          if (ccw === true) {\n            indices.push(a, c, b);\n            indices.push(c, a, d);\n          } else {\n            indices.push(a, b, c);\n            indices.push(c, d, a);\n          }\n        }\n      } //\n\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const uvAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(uvs, 2));\n      let colorAttribute;\n      let normalAttribute; // color attribute\n\n      if (color) {\n        if (colorPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const r = color[index * 3 + 0];\n              const g = color[index * 3 + 1];\n              const b = color[index * 3 + 2]; // one color per quad\n\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n              colors.push(r, g, b);\n            }\n          }\n\n          colorAttribute = new Float32BufferAttribute(colors, 3);\n        } else {\n          colorAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(colors, 3));\n        }\n      } // normal attribute\n\n\n      if (normal) {\n        if (normalPerVertex === false) {\n          for (let i = 0; i < xDimension - 1; i++) {\n            for (let j = 0; j < zDimension - 1; j++) {\n              const index = i + j * (xDimension - 1);\n              const xn = normal[index * 3 + 0];\n              const yn = normal[index * 3 + 1];\n              const zn = normal[index * 3 + 2]; // one normal per quad\n\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n              normals.push(xn, yn, zn);\n            }\n          }\n\n          normalAttribute = new Float32BufferAttribute(normals, 3);\n        } else {\n          normalAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(normals, 3));\n        }\n      } else {\n        normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      } // build geometry\n\n\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute);\n      geometry.setAttribute('uv', uvAttribute);\n      if (colorAttribute) geometry.setAttribute('color', colorAttribute); // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    }\n\n    function buildExtrusionNode(node) {\n      let crossSection = [1, 1, 1, -1, -1, -1, -1, 1, 1, 1];\n      let spine = [0, 0, 0, 0, 1, 0];\n      let scale;\n      let orientation;\n      let beginCap = true;\n      let ccw = true;\n      let creaseAngle = 0;\n      let endCap = true;\n      let solid = true;\n      const fields = node.fields;\n\n      for (let i = 0, l = fields.length; i < l; i++) {\n        const field = fields[i];\n        const fieldName = field.name;\n        const fieldValues = field.values;\n\n        switch (fieldName) {\n          case 'beginCap':\n            beginCap = fieldValues[0];\n            break;\n\n          case 'ccw':\n            ccw = fieldValues[0];\n            break;\n\n          case 'convex':\n            // field not supported\n            break;\n\n          case 'creaseAngle':\n            creaseAngle = fieldValues[0];\n            break;\n\n          case 'crossSection':\n            crossSection = fieldValues;\n            break;\n\n          case 'endCap':\n            endCap = fieldValues[0];\n            break;\n\n          case 'orientation':\n            orientation = fieldValues;\n            break;\n\n          case 'scale':\n            scale = fieldValues;\n            break;\n\n          case 'solid':\n            solid = fieldValues[0];\n            break;\n\n          case 'spine':\n            spine = fieldValues; // only extrusion along the Y-axis are supported so far\n\n            break;\n\n          default:\n            console.warn('THREE.VRMLLoader: Unknown field:', fieldName);\n            break;\n        }\n      }\n\n      const crossSectionClosed = crossSection[0] === crossSection[crossSection.length - 2] && crossSection[1] === crossSection[crossSection.length - 1]; // vertices\n\n      const vertices = [];\n      const spineVector = new Vector3();\n      const scaling = new Vector3();\n      const axis = new Vector3();\n      const vertex = new Vector3();\n      const quaternion = new Quaternion();\n\n      for (let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4) {\n        spineVector.fromArray(spine, i);\n        scaling.x = scale ? scale[j + 0] : 1;\n        scaling.y = 1;\n        scaling.z = scale ? scale[j + 1] : 1;\n        axis.x = orientation ? orientation[o + 0] : 0;\n        axis.y = orientation ? orientation[o + 1] : 0;\n        axis.z = orientation ? orientation[o + 2] : 1;\n        const angle = orientation ? orientation[o + 3] : 0;\n\n        for (let k = 0, kl = crossSection.length; k < kl; k += 2) {\n          vertex.x = crossSection[k + 0];\n          vertex.y = 0;\n          vertex.z = crossSection[k + 1]; // scale\n\n          vertex.multiply(scaling); // rotate\n\n          quaternion.setFromAxisAngle(axis, angle);\n          vertex.applyQuaternion(quaternion); // translate\n\n          vertex.add(spineVector);\n          vertices.push(vertex.x, vertex.y, vertex.z);\n        }\n      } // indices\n\n\n      const indices = [];\n      const spineCount = spine.length / 3;\n      const crossSectionCount = crossSection.length / 2;\n\n      for (let i = 0; i < spineCount - 1; i++) {\n        for (let j = 0; j < crossSectionCount - 1; j++) {\n          const a = j + i * crossSectionCount;\n          let b = j + 1 + i * crossSectionCount;\n          const c = j + (i + 1) * crossSectionCount;\n          let d = j + 1 + (i + 1) * crossSectionCount;\n\n          if (j === crossSectionCount - 2 && crossSectionClosed === true) {\n            b = i * crossSectionCount;\n            d = (i + 1) * crossSectionCount;\n          }\n\n          if (ccw === true) {\n            indices.push(a, b, c);\n            indices.push(c, b, d);\n          } else {\n            indices.push(a, c, b);\n            indices.push(c, d, b);\n          }\n        }\n      } // triangulate cap\n\n\n      if (beginCap === true || endCap === true) {\n        const contour = [];\n\n        for (let i = 0, l = crossSection.length; i < l; i += 2) {\n          contour.push(new Vector2(crossSection[i], crossSection[i + 1]));\n        }\n\n        const faces = ShapeUtils.triangulateShape(contour, []);\n        const capIndices = [];\n\n        for (let i = 0, l = faces.length; i < l; i++) {\n          const face = faces[i];\n          capIndices.push(face[0], face[1], face[2]);\n        } // begin cap\n\n\n        if (beginCap === true) {\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(capIndices[i + 0], capIndices[i + 1], capIndices[i + 2]);\n            } else {\n              indices.push(capIndices[i + 0], capIndices[i + 2], capIndices[i + 1]);\n            }\n          }\n        } // end cap\n\n\n        if (endCap === true) {\n          const indexOffset = crossSectionCount * (spineCount - 1); // references to the first vertex of the last cross section\n\n          for (let i = 0, l = capIndices.length; i < l; i += 3) {\n            if (ccw === true) {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 2], indexOffset + capIndices[i + 1]);\n            } else {\n              indices.push(indexOffset + capIndices[i + 0], indexOffset + capIndices[i + 1], indexOffset + capIndices[i + 2]);\n            }\n          }\n        }\n      }\n\n      const positionAttribute = toNonIndexedAttribute(indices, new Float32BufferAttribute(vertices, 3));\n      const normalAttribute = computeNormalAttribute(indices, vertices, creaseAngle);\n      const geometry = new BufferGeometry();\n      geometry.setAttribute('position', positionAttribute);\n      geometry.setAttribute('normal', normalAttribute); // no uvs yet\n      // \"solid\" influences the material so let's store it for later use\n\n      geometry._solid = solid;\n      geometry._type = 'mesh';\n      return geometry;\n    } // helper functions\n\n\n    function resolveUSE(identifier) {\n      const node = nodeMap[identifier];\n      const build = getNode(node); // because the same 3D objects can have different transformations, it's necessary to clone them.\n      // materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n      // any side effects\n\n      return build.isObject3D || build.isMaterial ? build.clone() : build;\n    }\n\n    function parseFieldChildren(children, owner) {\n      for (let i = 0, l = children.length; i < l; i++) {\n        const object = getNode(children[i]);\n        if (object instanceof Object3D) owner.add(object);\n      }\n    }\n\n    function triangulateFaceIndex(index, ccw) {\n      const indices = []; // since face defintions can have more than three vertices, it's necessary to\n      // perform a simple triangulation\n\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[start];\n        const i2 = index[i + (ccw ? 1 : 2)];\n        const i3 = index[i + (ccw ? 2 : 1)];\n        indices.push(i1, i2, i3); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start = i + 1;\n        }\n      }\n\n      return indices;\n    }\n\n    function triangulateFaceData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current face has ended and the next one begins\n\n        if (index[i + 3] === -1 || i + 3 >= l) {\n          i += 3;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    function flattenData(data, index) {\n      const flattenData = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const stride = i1 * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        flattenData.push(x, y, z);\n      }\n\n      return flattenData;\n    }\n\n    function expandLineIndex(index) {\n      const indices = [];\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const i1 = index[i];\n        const i2 = index[i + 1];\n        indices.push(i1, i2); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n        }\n      }\n\n      return indices;\n    }\n\n    function expandLineData(data, index) {\n      const triangulatedData = [];\n      let start = 0;\n\n      for (let i = 0, l = index.length; i < l; i++) {\n        const stride = start * 3;\n        const x = data[stride];\n        const y = data[stride + 1];\n        const z = data[stride + 2];\n        triangulatedData.push(x, y, z); // an index of -1 indicates that the current line has ended and the next one begins\n\n        if (index[i + 2] === -1 || i + 2 >= l) {\n          i += 2;\n          start++;\n        }\n      }\n\n      return triangulatedData;\n    }\n\n    const vA = new Vector3();\n    const vB = new Vector3();\n    const vC = new Vector3();\n    const uvA = new Vector2();\n    const uvB = new Vector2();\n    const uvC = new Vector2();\n\n    function computeAttributeFromIndexedData(coordIndex, index, data, itemSize) {\n      const array = []; // we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n      for (let i = 0, l = coordIndex.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n\n        if (itemSize === 2) {\n          uvA.fromArray(data, a * itemSize);\n          uvB.fromArray(data, b * itemSize);\n          uvC.fromArray(data, c * itemSize);\n          array.push(uvA.x, uvA.y);\n          array.push(uvB.x, uvB.y);\n          array.push(uvC.x, uvC.y);\n        } else {\n          vA.fromArray(data, a * itemSize);\n          vB.fromArray(data, b * itemSize);\n          vC.fromArray(data, c * itemSize);\n          array.push(vA.x, vA.y, vA.z);\n          array.push(vB.x, vB.y, vB.z);\n          array.push(vC.x, vC.y, vC.z);\n        }\n      }\n\n      return new Float32BufferAttribute(array, itemSize);\n    }\n\n    function computeAttributeFromFaceData(index, faceData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 3, j++) {\n        vA.fromArray(faceData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function computeAttributeFromLineData(index, lineData) {\n      const array = [];\n\n      for (let i = 0, j = 0, l = index.length; i < l; i += 2, j++) {\n        vA.fromArray(lineData, j * 3);\n        array.push(vA.x, vA.y, vA.z);\n        array.push(vA.x, vA.y, vA.z);\n      }\n\n      return new Float32BufferAttribute(array, 3);\n    }\n\n    function toNonIndexedAttribute(indices, attribute) {\n      const array = attribute.array;\n      const itemSize = attribute.itemSize;\n      const array2 = new array.constructor(indices.length * itemSize);\n      let index = 0,\n          index2 = 0;\n\n      for (let i = 0, l = indices.length; i < l; i++) {\n        index = indices[i] * itemSize;\n\n        for (let j = 0; j < itemSize; j++) {\n          array2[index2++] = array[index++];\n        }\n      }\n\n      return new Float32BufferAttribute(array2, itemSize);\n    }\n\n    const ab = new Vector3();\n    const cb = new Vector3();\n\n    function computeNormalAttribute(index, coord, creaseAngle) {\n      const faces = [];\n      const vertexNormals = {}; // prepare face and raw vertex normals\n\n      for (let i = 0, l = index.length; i < l; i += 3) {\n        const a = index[i];\n        const b = index[i + 1];\n        const c = index[i + 2];\n        const face = new Face(a, b, c);\n        vA.fromArray(coord, a * 3);\n        vB.fromArray(coord, b * 3);\n        vC.fromArray(coord, c * 3);\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n        if (vertexNormals[a] === undefined) vertexNormals[a] = [];\n        if (vertexNormals[b] === undefined) vertexNormals[b] = [];\n        if (vertexNormals[c] === undefined) vertexNormals[c] = [];\n        vertexNormals[a].push(face.normal);\n        vertexNormals[b].push(face.normal);\n        vertexNormals[c].push(face.normal);\n        faces.push(face);\n      } // compute vertex normals and build final geometry\n\n\n      const normals = [];\n\n      for (let i = 0, l = faces.length; i < l; i++) {\n        const face = faces[i];\n        const nA = weightedNormal(vertexNormals[face.a], face.normal, creaseAngle);\n        const nB = weightedNormal(vertexNormals[face.b], face.normal, creaseAngle);\n        const nC = weightedNormal(vertexNormals[face.c], face.normal, creaseAngle);\n        vA.fromArray(coord, face.a * 3);\n        vB.fromArray(coord, face.b * 3);\n        vC.fromArray(coord, face.c * 3);\n        normals.push(nA.x, nA.y, nA.z);\n        normals.push(nB.x, nB.y, nB.z);\n        normals.push(nC.x, nC.y, nC.z);\n      }\n\n      return new Float32BufferAttribute(normals, 3);\n    }\n\n    function weightedNormal(normals, vector, creaseAngle) {\n      const normal = new Vector3();\n\n      if (creaseAngle === 0) {\n        normal.copy(vector);\n      } else {\n        for (let i = 0, l = normals.length; i < l; i++) {\n          if (normals[i].angleTo(vector) < creaseAngle) {\n            normal.add(normals[i]);\n          }\n        }\n      }\n\n      return normal.normalize();\n    }\n\n    function toColorArray(colors) {\n      const array = [];\n\n      for (let i = 0, l = colors.length; i < l; i += 3) {\n        array.push(new Color(colors[i], colors[i + 1], colors[i + 2]));\n      }\n\n      return array;\n    }\n    /**\n     * Vertically paints the faces interpolating between the\n     * specified colors at the specified angels. This is used for the Background\n     * node, but could be applied to other nodes with multiple faces as well.\n     *\n     * When used with the Background node, default is directionIsDown is true if\n     * interpolating the skyColor down from the Zenith. When interpolationg up from\n     * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n     *\n     * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n     * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n     * is linear along the Y axis in any case.\n     *\n     * You must specify one more color than you have angles at the beginning of the colors array.\n     * This is the color of the Zenith (the top of the shape).\n     *\n     * @param {BufferGeometry} geometry\n     * @param {number} radius\n     * @param {array} angles\n     * @param {array} colors\n     * @param {boolean} topDown - Whether to work top down or bottom up.\n     */\n\n\n    function paintFaces(geometry, radius, angles, colors, topDown) {\n      // compute threshold values\n      const thresholds = [];\n      const startAngle = topDown === true ? 0 : Math.PI;\n\n      for (let i = 0, l = colors.length; i < l; i++) {\n        let angle = i === 0 ? 0 : angles[i - 1];\n        angle = topDown === true ? angle : startAngle - angle;\n        const point = new Vector3();\n        point.setFromSphericalCoords(radius, angle, 0);\n        thresholds.push(point);\n      } // generate vertex colors\n\n\n      const indices = geometry.index;\n      const positionAttribute = geometry.attributes.position;\n      const colorAttribute = new BufferAttribute(new Float32Array(geometry.attributes.position.count * 3), 3);\n      const position = new Vector3();\n      const color = new Color();\n\n      for (let i = 0; i < indices.count; i++) {\n        const index = indices.getX(i);\n        position.fromBufferAttribute(positionAttribute, index);\n        let thresholdIndexA, thresholdIndexB;\n        let t = 1;\n\n        for (let j = 1; j < thresholds.length; j++) {\n          thresholdIndexA = j - 1;\n          thresholdIndexB = j;\n          const thresholdA = thresholds[thresholdIndexA];\n          const thresholdB = thresholds[thresholdIndexB];\n\n          if (topDown === true) {\n            // interpolation for sky color\n            if (position.y <= thresholdA.y && position.y > thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          } else {\n            // interpolation for ground color\n            if (position.y >= thresholdA.y && position.y < thresholdB.y) {\n              t = Math.abs(thresholdA.y - position.y) / Math.abs(thresholdA.y - thresholdB.y);\n              break;\n            }\n          }\n        }\n\n        const colorA = colors[thresholdIndexA];\n        const colorB = colors[thresholdIndexB];\n        color.copy(colorA).lerp(colorB, t);\n        colorAttribute.setXYZ(index, color.r, color.g, color.b);\n      }\n\n      geometry.setAttribute('color', colorAttribute);\n    } //\n\n\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin); // check version (only 2.0 is supported)\n\n    if (data.indexOf('#VRML V2.0') === -1) {\n      throw Error('THREE.VRMLLexer: Version of VRML asset not supported.');\n    } // create JSON representing the tree structure of the VRML asset\n\n\n    const tree = generateVRMLTree(data); // parse the tree structure to a three.js scene\n\n    const scene = parseTree(tree);\n    return scene;\n  }\n\n}\n\nclass VRMLLexer {\n  constructor(tokens) {\n    this.lexer = new chevrotain.Lexer(tokens); // eslint-disable-line no-undef\n  }\n\n  lex(inputText) {\n    const lexingResult = this.lexer.tokenize(inputText);\n\n    if (lexingResult.errors.length > 0) {\n      console.error(lexingResult.errors);\n      throw Error('THREE.VRMLLexer: Lexing errors detected.');\n    }\n\n    return lexingResult;\n  }\n\n}\n\nconst CstParser = chevrotain.CstParser; // eslint-disable-line no-undef\n\nclass VRMLParser extends CstParser {\n  constructor(tokenVocabulary) {\n    super(tokenVocabulary);\n    const $ = this;\n    const Version = tokenVocabulary['Version'];\n    const LCurly = tokenVocabulary['LCurly'];\n    const RCurly = tokenVocabulary['RCurly'];\n    const LSquare = tokenVocabulary['LSquare'];\n    const RSquare = tokenVocabulary['RSquare'];\n    const Identifier = tokenVocabulary['Identifier'];\n    const RouteIdentifier = tokenVocabulary['RouteIdentifier'];\n    const StringLiteral = tokenVocabulary['StringLiteral'];\n    const HexLiteral = tokenVocabulary['HexLiteral'];\n    const NumberLiteral = tokenVocabulary['NumberLiteral'];\n    const TrueLiteral = tokenVocabulary['TrueLiteral'];\n    const FalseLiteral = tokenVocabulary['FalseLiteral'];\n    const NullLiteral = tokenVocabulary['NullLiteral'];\n    const DEF = tokenVocabulary['DEF'];\n    const USE = tokenVocabulary['USE'];\n    const ROUTE = tokenVocabulary['ROUTE'];\n    const TO = tokenVocabulary['TO'];\n    const NodeName = tokenVocabulary['NodeName'];\n    $.RULE('vrml', function () {\n      $.SUBRULE($.version);\n      $.AT_LEAST_ONE(function () {\n        $.SUBRULE($.node);\n      });\n      $.MANY(function () {\n        $.SUBRULE($.route);\n      });\n    });\n    $.RULE('version', function () {\n      $.CONSUME(Version);\n    });\n    $.RULE('node', function () {\n      $.OPTION(function () {\n        $.SUBRULE($.def);\n      });\n      $.CONSUME(NodeName);\n      $.CONSUME(LCurly);\n      $.MANY(function () {\n        $.SUBRULE($.field);\n      });\n      $.CONSUME(RCurly);\n    });\n    $.RULE('field', function () {\n      $.CONSUME(Identifier);\n      $.OR2([{\n        ALT: function () {\n          $.SUBRULE($.singleFieldValue);\n        }\n      }, {\n        ALT: function () {\n          $.SUBRULE($.multiFieldValue);\n        }\n      }]);\n    });\n    $.RULE('def', function () {\n      $.CONSUME(DEF);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('use', function () {\n      $.CONSUME(USE);\n      $.OR([{\n        ALT: function () {\n          $.CONSUME(Identifier);\n        }\n      }, {\n        ALT: function () {\n          $.CONSUME(NodeName);\n        }\n      }]);\n    });\n    $.RULE('singleFieldValue', function () {\n      $.AT_LEAST_ONE(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(TrueLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(FalseLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n    });\n    $.RULE('multiFieldValue', function () {\n      $.CONSUME(LSquare);\n      $.MANY(function () {\n        $.OR([{\n          ALT: function () {\n            $.SUBRULE($.node);\n          }\n        }, {\n          ALT: function () {\n            $.SUBRULE($.use);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(StringLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(HexLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NumberLiteral);\n          }\n        }, {\n          ALT: function () {\n            $.CONSUME(NullLiteral);\n          }\n        }]);\n      });\n      $.CONSUME(RSquare);\n    });\n    $.RULE('route', function () {\n      $.CONSUME(ROUTE);\n      $.CONSUME(RouteIdentifier);\n      $.CONSUME(TO);\n      $.CONSUME2(RouteIdentifier);\n    });\n    this.performSelfAnalysis();\n  }\n\n}\n\nclass Face {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = new Vector3();\n  }\n\n}\n\nconst TEXTURE_TYPE = {\n  INTENSITY: 1,\n  INTENSITY_ALPHA: 2,\n  RGB: 3,\n  RGBA: 4\n};\nexport { VRMLLoader };","map":{"version":3,"names":["BackSide","BoxGeometry","BufferAttribute","BufferGeometry","ClampToEdgeWrapping","Color","ConeGeometry","CylinderGeometry","DataTexture","DoubleSide","FileLoader","Float32BufferAttribute","FrontSide","Group","LineBasicMaterial","LineSegments","Loader","LoaderUtils","Mesh","MeshBasicMaterial","MeshPhongMaterial","Object3D","Points","PointsMaterial","Quaternion","RepeatWrapping","Scene","ShapeUtils","SphereGeometry","TextureLoader","Vector2","Vector3","chevrotain","VRMLLoader","constructor","manager","Error","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","data","nodeMap","generateVRMLTree","tokenData","createTokens","lexer","VRMLLexer","tokens","parser","VRMLParser","tokenVocabulary","visitor","createVisitor","getBaseCstVisitorConstructor","lexingResult","lex","input","cstOutput","vrml","errors","length","ast","visit","createToken","RouteIdentifier","name","pattern","Identifier","longer_alt","nodeTypes","Version","NodeName","RegExp","join","DEF","USE","ROUTE","TO","StringLiteral","HexLiteral","NumberLiteral","TrueLiteral","FalseLiteral","NullLiteral","LSquare","RSquare","LCurly","RCurly","Comment","group","Lexer","SKIPPED","WhiteSpace","i","l","token","BaseVRMLVisitor","VRMLToASTVisitor","validateVisitor","ctx","version","nodes","routes","node","push","route","image","fields","field","def","type","values","result","singleFieldValue","multiFieldValue","use","processField","FROM","stringLiteral","replace","numberLiteral","parseFloat","hexLiteral","trueLiteral","falseLiteral","forEach","parseTree","tree","scene","buildNodeMap","object","getNode","add","userData","worldInfo","fieldValues","j","jl","resolveUSE","build","undefined","buildNode","nodeName","buildGroupingNode","buildBackgroundNode","buildShapeNode","buildAppearanceNode","buildMaterialNode","buildImageTextureNode","buildPixelTextureNode","buildTextureTransformNode","buildIndexedFaceSetNode","buildIndexedLineSetNode","buildPointSetNode","buildBoxNode","buildConeNode","buildCylinderNode","buildSphereNode","buildElevationGridNode","buildExtrusionNode","buildGeometricNode","buildWorldInfoNode","warn","hasOwnProperty","fieldName","parseFieldChildren","axis","angle","quaternion","setFromAxisAngle","scale","set","position","groundAngle","groundColor","skyAngle","skyColor","radius","skyGeometry","skyMaterial","fog","side","depthWrite","depthTest","paintFaces","toColorArray","vertexColors","color","setRGB","sky","groundGeometry","Math","PI","groundMaterial","ground","renderOrder","Infinity","material","geometry","attributes","_type","pointsMaterial","isMeshPhongMaterial","copy","emissive","lineMaterial","_solid","visible","transformData","materialData","diffuseColor","emissiveColor","shininess","specularColor","specular","transparency","opacity","transparent","textureNode","map","__type","TEXTURE_TYPE","INTENSITY_ALPHA","RGB","RGBA","center","rotation","repeat","offset","translation","parseHexColor","hex","textureType","value","INTENSITY","parseInt","r","g","b","a","substring","getTextureType","num_components","texture","wrapS","wrapT","width","height","Uint8Array","k","stride","needsUpdate","textureLoader","title","info","coord","normal","texCoord","ccw","solid","creaseAngle","colorIndex","coordIndex","normalIndex","texCoordIndex","colorPerVertex","normalPerVertex","colorNode","coordNode","normalNode","texCoordNode","triangulatedCoordIndex","triangulateFaceIndex","colorAttribute","normalAttribute","uvAttribute","triangulatedColorIndex","computeAttributeFromIndexedData","toNonIndexedAttribute","flattenFaceColors","flattenData","triangulatedFaceColors","triangulateFaceData","computeAttributeFromFaceData","triangulatedNormalIndex","flattenFaceNormals","triangulatedFaceNormals","computeNormalAttribute","triangulatedTexCoordIndex","positionAttribute","setAttribute","expandedLineIndex","expandLineIndex","expandedColorIndex","flattenLineColors","expandedLineColors","expandLineData","computeAttributeFromLineData","size","x","y","z","openEnded","xDimension","zDimension","xSpacing","zSpacing","vertices","normals","colors","uvs","index","xn","yn","zn","s","t","indices","c","d","crossSection","spine","orientation","beginCap","endCap","crossSectionClosed","spineVector","scaling","vertex","o","il","fromArray","kl","multiply","applyQuaternion","spineCount","crossSectionCount","contour","faces","triangulateShape","capIndices","face","indexOffset","identifier","isObject3D","isMaterial","clone","children","owner","start","i1","i2","i3","triangulatedData","vA","vB","vC","uvA","uvB","uvC","itemSize","array","faceData","lineData","attribute","array2","index2","ab","cb","vertexNormals","Face","subVectors","cross","normalize","nA","weightedNormal","nB","nC","vector","angleTo","angles","topDown","thresholds","startAngle","point","setFromSphericalCoords","Float32Array","count","getX","fromBufferAttribute","thresholdIndexA","thresholdIndexB","thresholdA","thresholdB","abs","colorA","colorB","lerp","setXYZ","resourcePath","setCrossOrigin","crossOrigin","indexOf","inputText","tokenize","CstParser","$","RULE","SUBRULE","AT_LEAST_ONE","MANY","CONSUME","OPTION","OR2","ALT","OR","CONSUME2","performSelfAnalysis"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/three/examples/jsm/loaders/VRMLLoader.js"],"sourcesContent":["import {\n\tBackSide,\n\tBoxGeometry,\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tConeGeometry,\n\tCylinderGeometry,\n\tDataTexture,\n\tDoubleSide,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tFrontSide,\n\tGroup,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader,\n\tLoaderUtils,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshPhongMaterial,\n\tObject3D,\n\tPoints,\n\tPointsMaterial,\n\tQuaternion,\n\tRepeatWrapping,\n\tScene,\n\tShapeUtils,\n\tSphereGeometry,\n\tTextureLoader,\n\tVector2,\n\tVector3\n} from 'three';\nimport chevrotain from '../libs/chevrotain.module.min.js';\n\n\nclass VRMLLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\t// dependency check\n\n\t\tif ( typeof chevrotain === 'undefined' ) { // eslint-disable-line no-undef\n\n\t\t\tthrow Error( 'THREE.VRMLLoader: External library chevrotain.min.js required.' );\n\n\t\t}\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data, path ) {\n\n\t\tconst nodeMap = {};\n\n\t\tfunction generateVRMLTree( data ) {\n\n\t\t\t// create lexer, parser and visitor\n\n\t\t\tconst tokenData = createTokens();\n\n\t\t\tconst lexer = new VRMLLexer( tokenData.tokens );\n\t\t\tconst parser = new VRMLParser( tokenData.tokenVocabulary );\n\t\t\tconst visitor = createVisitor( parser.getBaseCstVisitorConstructor() );\n\n\t\t\t// lexing\n\n\t\t\tconst lexingResult = lexer.lex( data );\n\t\t\tparser.input = lexingResult.tokens;\n\n\t\t\t// parsing\n\n\t\t\tconst cstOutput = parser.vrml();\n\n\t\t\tif ( parser.errors.length > 0 ) {\n\n\t\t\t\tconsole.error( parser.errors );\n\n\t\t\t\tthrow Error( 'THREE.VRMLLoader: Parsing errors detected.' );\n\n\t\t\t}\n\n\t\t\t// actions\n\n\t\t\tconst ast = visitor.visit( cstOutput );\n\n\t\t\treturn ast;\n\n\t\t}\n\n\t\tfunction createTokens() {\n\n\t\t\tconst createToken = chevrotain.createToken; // eslint-disable-line no-undef\n\n\t\t\t// from http://gun.teipir.gr/VRML-amgem/spec/part1/concepts.html#SyntaxBasics\n\n\t\t\tconst RouteIdentifier = createToken( { name: 'RouteIdentifier', pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*[\\.][^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/ } );\n\t\t\tconst Identifier = createToken( { name: 'Identifier', pattern: /[^\\x30-\\x39\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d][^\\0-\\x20\\x22\\x27\\x23\\x2b\\x2c\\x2d\\x2e\\x5b\\x5d\\x5c\\x7b\\x7d]*/, longer_alt: RouteIdentifier } );\n\n\t\t\t// from http://gun.teipir.gr/VRML-amgem/spec/part1/nodesRef.html\n\n\t\t\tconst nodeTypes = [\n\t\t\t\t'Anchor', 'Billboard', 'Collision', 'Group', 'Transform', // grouping nodes\n\t\t\t\t'Inline', 'LOD', 'Switch', // special groups\n\t\t\t\t'AudioClip', 'DirectionalLight', 'PointLight', 'Script', 'Shape', 'Sound', 'SpotLight', 'WorldInfo', // common nodes\n\t\t\t\t'CylinderSensor', 'PlaneSensor', 'ProximitySensor', 'SphereSensor', 'TimeSensor', 'TouchSensor', 'VisibilitySensor', // sensors\n\t\t\t\t'Box', 'Cone', 'Cylinder', 'ElevationGrid', 'Extrusion', 'IndexedFaceSet', 'IndexedLineSet', 'PointSet', 'Sphere', // geometries\n\t\t\t\t'Color', 'Coordinate', 'Normal', 'TextureCoordinate', // geometric properties\n\t\t\t\t'Appearance', 'FontStyle', 'ImageTexture', 'Material', 'MovieTexture', 'PixelTexture', 'TextureTransform', // appearance\n\t\t\t\t'ColorInterpolator', 'CoordinateInterpolator', 'NormalInterpolator', 'OrientationInterpolator', 'PositionInterpolator', 'ScalarInterpolator', // interpolators\n\t\t\t\t'Background', 'Fog', 'NavigationInfo', 'Viewpoint', // bindable nodes\n\t\t\t\t'Text' // Text must be placed at the end of the regex so there are no matches for TextureTransform and TextureCoordinate\n\t\t\t];\n\n\t\t\t//\n\n\t\t\tconst Version = createToken( {\n\t\t\t\tname: 'Version',\n\t\t\t\tpattern: /#VRML.*/,\n\t\t\t\tlonger_alt: Identifier\n\t\t\t} );\n\n\t\t\tconst NodeName = createToken( {\n\t\t\t\tname: 'NodeName',\n\t\t\t\tpattern: new RegExp( nodeTypes.join( '|' ) ),\n\t\t\t\tlonger_alt: Identifier\n\t\t\t} );\n\n\t\t\tconst DEF = createToken( {\n\t\t\t\tname: 'DEF',\n\t\t\t\tpattern: /DEF/,\n\t\t\t\tlonger_alt: Identifier\n\t\t\t} );\n\n\t\t\tconst USE = createToken( {\n\t\t\t\tname: 'USE',\n\t\t\t\tpattern: /USE/,\n\t\t\t\tlonger_alt: Identifier\n\t\t\t} );\n\n\t\t\tconst ROUTE = createToken( {\n\t\t\t\tname: 'ROUTE',\n\t\t\t\tpattern: /ROUTE/,\n\t\t\t\tlonger_alt: Identifier\n\t\t\t} );\n\n\t\t\tconst TO = createToken( {\n\t\t\t\tname: 'TO',\n\t\t\t\tpattern: /TO/,\n\t\t\t\tlonger_alt: Identifier\n\t\t\t} );\n\n\t\t\t//\n\n\t\t\tconst StringLiteral = createToken( { name: 'StringLiteral', pattern: /\"(?:[^\\\\\"\\n\\r]|\\\\[bfnrtv\"\\\\/]|\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])*\"/ } );\n\t\t\tconst HexLiteral = createToken( { name: 'HexLiteral', pattern: /0[xX][0-9a-fA-F]+/ } );\n\t\t\tconst NumberLiteral = createToken( { name: 'NumberLiteral', pattern: /[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/ } );\n\t\t\tconst TrueLiteral = createToken( { name: 'TrueLiteral', pattern: /TRUE/ } );\n\t\t\tconst FalseLiteral = createToken( { name: 'FalseLiteral', pattern: /FALSE/ } );\n\t\t\tconst NullLiteral = createToken( { name: 'NullLiteral', pattern: /NULL/ } );\n\t\t\tconst LSquare = createToken( { name: 'LSquare', pattern: /\\[/ } );\n\t\t\tconst RSquare = createToken( { name: 'RSquare', pattern: /]/ } );\n\t\t\tconst LCurly = createToken( { name: 'LCurly', pattern: /{/ } );\n\t\t\tconst RCurly = createToken( { name: 'RCurly', pattern: /}/ } );\n\t\t\tconst Comment = createToken( {\n\t\t\t\tname: 'Comment',\n\t\t\t\tpattern: /#.*/,\n\t\t\t\tgroup: chevrotain.Lexer.SKIPPED // eslint-disable-line no-undef\n\t\t\t} );\n\n\t\t\t// commas, blanks, tabs, newlines and carriage returns are whitespace characters wherever they appear outside of string fields\n\n\t\t\tconst WhiteSpace = createToken( {\n\t\t\t\tname: 'WhiteSpace',\n\t\t\t\tpattern: /[ ,\\s]/,\n\t\t\t\tgroup: chevrotain.Lexer.SKIPPED // eslint-disable-line no-undef\n\t\t\t} );\n\n\t\t\tconst tokens = [\n\t\t\t\tWhiteSpace,\n\t\t\t\t// keywords appear before the Identifier\n\t\t\t\tNodeName,\n\t\t\t\tDEF,\n\t\t\t\tUSE,\n\t\t\t\tROUTE,\n\t\t\t\tTO,\n\t\t\t\tTrueLiteral,\n\t\t\t\tFalseLiteral,\n\t\t\t\tNullLiteral,\n\t\t\t\t// the Identifier must appear after the keywords because all keywords are valid identifiers\n\t\t\t\tVersion,\n\t\t\t\tIdentifier,\n\t\t\t\tRouteIdentifier,\n\t\t\t\tStringLiteral,\n\t\t\t\tHexLiteral,\n\t\t\t\tNumberLiteral,\n\t\t\t\tLSquare,\n\t\t\t\tRSquare,\n\t\t\t\tLCurly,\n\t\t\t\tRCurly,\n\t\t\t\tComment\n\t\t\t];\n\n\t\t\tconst tokenVocabulary = {};\n\n\t\t\tfor ( let i = 0, l = tokens.length; i < l; i ++ ) {\n\n\t\t\t\tconst token = tokens[ i ];\n\n\t\t\t\ttokenVocabulary[ token.name ] = token;\n\n\t\t\t}\n\n\t\t\treturn { tokens: tokens, tokenVocabulary: tokenVocabulary };\n\n\t\t}\n\n\n\t\tfunction createVisitor( BaseVRMLVisitor ) {\n\n\t\t\t// the visitor is created dynmaically based on the given base class\n\n\t\t\tclass VRMLToASTVisitor extends BaseVRMLVisitor {\n\n\t\t\t\tconstructor() {\n\n\t\t\t\t\tsuper();\n\n\t\t\t\t\tthis.validateVisitor();\n\n\t\t\t\t}\n\n\t\t\t\tvrml( ctx ) {\n\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tversion: this.visit( ctx.version ),\n\t\t\t\t\t\tnodes: [],\n\t\t\t\t\t\troutes: []\n\t\t\t\t\t};\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.node.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst node = ctx.node[ i ];\n\n\t\t\t\t\t\tdata.nodes.push( this.visit( node ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ctx.route ) {\n\n\t\t\t\t\t\tfor ( let i = 0, l = ctx.route.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst route = ctx.route[ i ];\n\n\t\t\t\t\t\t\tdata.routes.push( this.visit( route ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn data;\n\n\t\t\t\t}\n\n\t\t\t\tversion( ctx ) {\n\n\t\t\t\t\treturn ctx.Version[ 0 ].image;\n\n\t\t\t\t}\n\n\t\t\t\tnode( ctx ) {\n\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tname: ctx.NodeName[ 0 ].image,\n\t\t\t\t\t\tfields: []\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( ctx.field ) {\n\n\t\t\t\t\t\tfor ( let i = 0, l = ctx.field.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst field = ctx.field[ i ];\n\n\t\t\t\t\t\t\tdata.fields.push( this.visit( field ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// DEF\n\n\t\t\t\t\tif ( ctx.def ) {\n\n\t\t\t\t\t\tdata.DEF = this.visit( ctx.def[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn data;\n\n\t\t\t\t}\n\n\t\t\t\tfield( ctx ) {\n\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tname: ctx.Identifier[ 0 ].image,\n\t\t\t\t\t\ttype: null,\n\t\t\t\t\t\tvalues: null\n\t\t\t\t\t};\n\n\t\t\t\t\tlet result;\n\n\t\t\t\t\t// SFValue\n\n\t\t\t\t\tif ( ctx.singleFieldValue ) {\n\n\t\t\t\t\t\tresult = this.visit( ctx.singleFieldValue[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// MFValue\n\n\t\t\t\t\tif ( ctx.multiFieldValue ) {\n\n\t\t\t\t\t\tresult = this.visit( ctx.multiFieldValue[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdata.type = result.type;\n\t\t\t\t\tdata.values = result.values;\n\n\t\t\t\t\treturn data;\n\n\t\t\t\t}\n\n\t\t\t\tdef( ctx ) {\n\n\t\t\t\t\treturn ( ctx.Identifier || ctx.NodeName )[ 0 ].image;\n\n\t\t\t\t}\n\n\t\t\t\tuse( ctx ) {\n\n\t\t\t\t\treturn { USE: ( ctx.Identifier || ctx.NodeName )[ 0 ].image };\n\n\t\t\t\t}\n\n\t\t\t\tsingleFieldValue( ctx ) {\n\n\t\t\t\t\treturn processField( this, ctx );\n\n\t\t\t\t}\n\n\t\t\t\tmultiFieldValue( ctx ) {\n\n\t\t\t\t\treturn processField( this, ctx );\n\n\t\t\t\t}\n\n\t\t\t\troute( ctx ) {\n\n\t\t\t\t\tconst data = {\n\t\t\t\t\t\tFROM: ctx.RouteIdentifier[ 0 ].image,\n\t\t\t\t\t\tTO: ctx.RouteIdentifier[ 1 ].image\n\t\t\t\t\t};\n\n\t\t\t\t\treturn data;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction processField( scope, ctx ) {\n\n\t\t\t\tconst field = {\n\t\t\t\t\ttype: null,\n\t\t\t\t\tvalues: []\n\t\t\t\t};\n\n\t\t\t\tif ( ctx.node ) {\n\n\t\t\t\t\tfield.type = 'node';\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.node.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst node = ctx.node[ i ];\n\n\t\t\t\t\t\tfield.values.push( scope.visit( node ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ctx.use ) {\n\n\t\t\t\t\tfield.type = 'use';\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.use.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst use = ctx.use[ i ];\n\n\t\t\t\t\t\tfield.values.push( scope.visit( use ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ctx.StringLiteral ) {\n\n\t\t\t\t\tfield.type = 'string';\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.StringLiteral.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst stringLiteral = ctx.StringLiteral[ i ];\n\n\t\t\t\t\t\tfield.values.push( stringLiteral.image.replace( /'|\"/g, '' ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ctx.NumberLiteral ) {\n\n\t\t\t\t\tfield.type = 'number';\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.NumberLiteral.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst numberLiteral = ctx.NumberLiteral[ i ];\n\n\t\t\t\t\t\tfield.values.push( parseFloat( numberLiteral.image ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ctx.HexLiteral ) {\n\n\t\t\t\t\tfield.type = 'hex';\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.HexLiteral.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst hexLiteral = ctx.HexLiteral[ i ];\n\n\t\t\t\t\t\tfield.values.push( hexLiteral.image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ctx.TrueLiteral ) {\n\n\t\t\t\t\tfield.type = 'boolean';\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.TrueLiteral.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst trueLiteral = ctx.TrueLiteral[ i ];\n\n\t\t\t\t\t\tif ( trueLiteral.image === 'TRUE' ) field.values.push( true );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ctx.FalseLiteral ) {\n\n\t\t\t\t\tfield.type = 'boolean';\n\n\t\t\t\t\tfor ( let i = 0, l = ctx.FalseLiteral.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst falseLiteral = ctx.FalseLiteral[ i ];\n\n\t\t\t\t\t\tif ( falseLiteral.image === 'FALSE' ) field.values.push( false );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ctx.NullLiteral ) {\n\n\t\t\t\t\tfield.type = 'null';\n\n\t\t\t\t\tctx.NullLiteral.forEach( function () {\n\n\t\t\t\t\t\tfield.values.push( null );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\treturn field;\n\n\t\t\t}\n\n\t\t\treturn new VRMLToASTVisitor();\n\n\t\t}\n\n\t\tfunction parseTree( tree ) {\n\n\t\t\t// console.log( JSON.stringify( tree, null, 2 ) );\n\n\t\t\tconst nodes = tree.nodes;\n\t\t\tconst scene = new Scene();\n\n\t\t\t// first iteration: build nodemap based on DEF statements\n\n\t\t\tfor ( let i = 0, l = nodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst node = nodes[ i ];\n\n\t\t\t\tbuildNodeMap( node );\n\n\t\t\t}\n\n\t\t\t// second iteration: build nodes\n\n\t\t\tfor ( let i = 0, l = nodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst node = nodes[ i ];\n\t\t\t\tconst object = getNode( node );\n\n\t\t\t\tif ( object instanceof Object3D ) scene.add( object );\n\n\t\t\t\tif ( node.name === 'WorldInfo' ) scene.userData.worldInfo = object;\n\n\t\t\t}\n\n\t\t\treturn scene;\n\n\t\t}\n\n\t\tfunction buildNodeMap( node ) {\n\n\t\t\tif ( node.DEF ) {\n\n\t\t\t\tnodeMap[ node.DEF ] = node;\n\n\t\t\t}\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\n\t\t\t\tif ( field.type === 'node' ) {\n\n\t\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\t\tfor ( let j = 0, jl = fieldValues.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tbuildNodeMap( fieldValues[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tfunction getNode( node ) {\n\n\t\t\t// handle case where a node refers to a different one\n\n\t\t\tif ( node.USE ) {\n\n\t\t\t\treturn resolveUSE( node.USE );\n\n\t\t\t}\n\n\t\t\tif ( node.build !== undefined ) return node.build;\n\n\t\t\tnode.build = buildNode( node );\n\n\t\t\treturn node.build;\n\n\t\t}\n\n\t\t// node builder\n\n\t\tfunction buildNode( node ) {\n\n\t\t\tconst nodeName = node.name;\n\t\t\tlet build;\n\n\t\t\tswitch ( nodeName ) {\n\n\t\t\t\tcase 'Group':\n\t\t\t\tcase 'Transform':\n\t\t\t\tcase 'Collision':\n\t\t\t\t\tbuild = buildGroupingNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Background':\n\t\t\t\t\tbuild = buildBackgroundNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Shape':\n\t\t\t\t\tbuild = buildShapeNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Appearance':\n\t\t\t\t\tbuild = buildAppearanceNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Material':\n\t\t\t\t\tbuild = buildMaterialNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ImageTexture':\n\t\t\t\t\tbuild = buildImageTextureNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PixelTexture':\n\t\t\t\t\tbuild = buildPixelTextureNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'TextureTransform':\n\t\t\t\t\tbuild = buildTextureTransformNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'IndexedFaceSet':\n\t\t\t\t\tbuild = buildIndexedFaceSetNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'IndexedLineSet':\n\t\t\t\t\tbuild = buildIndexedLineSetNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointSet':\n\t\t\t\t\tbuild = buildPointSetNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Box':\n\t\t\t\t\tbuild = buildBoxNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Cone':\n\t\t\t\t\tbuild = buildConeNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Cylinder':\n\t\t\t\t\tbuild = buildCylinderNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sphere':\n\t\t\t\t\tbuild = buildSphereNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ElevationGrid':\n\t\t\t\t\tbuild = buildElevationGridNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Extrusion':\n\t\t\t\t\tbuild = buildExtrusionNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Color':\n\t\t\t\tcase 'Coordinate':\n\t\t\t\tcase 'Normal':\n\t\t\t\tcase 'TextureCoordinate':\n\t\t\t\t\tbuild = buildGeometricNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WorldInfo':\n\t\t\t\t\tbuild = buildWorldInfoNode( node );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Anchor':\n\t\t\t\tcase 'Billboard':\n\n\t\t\t\tcase 'Inline':\n\t\t\t\tcase 'LOD':\n\t\t\t\tcase 'Switch':\n\n\t\t\t\tcase 'AudioClip':\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\tcase 'PointLight':\n\t\t\t\tcase 'Script':\n\t\t\t\tcase 'Sound':\n\t\t\t\tcase 'SpotLight':\n\n\t\t\t\tcase 'CylinderSensor':\n\t\t\t\tcase 'PlaneSensor':\n\t\t\t\tcase 'ProximitySensor':\n\t\t\t\tcase 'SphereSensor':\n\t\t\t\tcase 'TimeSensor':\n\t\t\t\tcase 'TouchSensor':\n\t\t\t\tcase 'VisibilitySensor':\n\n\t\t\t\tcase 'Text':\n\n\t\t\t\tcase 'FontStyle':\n\t\t\t\tcase 'MovieTexture':\n\n\t\t\t\tcase 'ColorInterpolator':\n\t\t\t\tcase 'CoordinateInterpolator':\n\t\t\t\tcase 'NormalInterpolator':\n\t\t\t\tcase 'OrientationInterpolator':\n\t\t\t\tcase 'PositionInterpolator':\n\t\t\t\tcase 'ScalarInterpolator':\n\n\t\t\t\tcase 'Fog':\n\t\t\t\tcase 'NavigationInfo':\n\t\t\t\tcase 'Viewpoint':\n\t\t\t\t\t// node not supported yet\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown node:', nodeName );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( build !== undefined && node.DEF !== undefined && build.hasOwnProperty( 'name' ) === true ) {\n\n\t\t\t\tbuild.name = node.DEF;\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildGroupingNode( node ) {\n\n\t\t\tconst object = new Group();\n\n\t\t\t//\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'bboxCenter':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bboxSize':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'center':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'children':\n\t\t\t\t\t\tparseFieldChildren( fieldValues, object );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'collide':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotation':\n\t\t\t\t\t\tconst axis = new Vector3( fieldValues[ 0 ], fieldValues[ 1 ], fieldValues[ 2 ] );\n\t\t\t\t\t\tconst angle = fieldValues[ 3 ];\n\t\t\t\t\t\tobject.quaternion.setFromAxisAngle( axis, angle );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tobject.scale.set( fieldValues[ 0 ], fieldValues[ 1 ], fieldValues[ 2 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scaleOrientation':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translation':\n\t\t\t\t\t\tobject.position.set( fieldValues[ 0 ], fieldValues[ 1 ], fieldValues[ 2 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'proxy':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t\tfunction buildBackgroundNode( node ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tlet groundAngle, groundColor;\n\t\t\tlet skyAngle, skyColor;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'groundAngle':\n\t\t\t\t\t\tgroundAngle = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'groundColor':\n\t\t\t\t\t\tgroundColor = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'backUrl':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bottomUrl':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'frontUrl':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'leftUrl':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rightUrl':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'topUrl':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'skyAngle':\n\t\t\t\t\t\tskyAngle = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'skyColor':\n\t\t\t\t\t\tskyColor = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst radius = 10000;\n\n\t\t\t// sky\n\n\t\t\tif ( skyColor ) {\n\n\t\t\t\tconst skyGeometry = new SphereGeometry( radius, 32, 16 );\n\t\t\t\tconst skyMaterial = new MeshBasicMaterial( { fog: false, side: BackSide, depthWrite: false, depthTest: false } );\n\n\t\t\t\tif ( skyColor.length > 3 ) {\n\n\t\t\t\t\tpaintFaces( skyGeometry, radius, skyAngle, toColorArray( skyColor ), true );\n\t\t\t\t\tskyMaterial.vertexColors = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tskyMaterial.color.setRGB( skyColor[ 0 ], skyColor[ 1 ], skyColor[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tconst sky = new Mesh( skyGeometry, skyMaterial );\n\t\t\t\tgroup.add( sky );\n\n\t\t\t}\n\n\t\t\t// ground\n\n\t\t\tif ( groundColor ) {\n\n\t\t\t\tif ( groundColor.length > 0 ) {\n\n\t\t\t\t\tconst groundGeometry = new SphereGeometry( radius, 32, 16, 0, 2 * Math.PI, 0.5 * Math.PI, 1.5 * Math.PI );\n\t\t\t\t\tconst groundMaterial = new MeshBasicMaterial( { fog: false, side: BackSide, vertexColors: true, depthWrite: false, depthTest: false } );\n\n\t\t\t\t\tpaintFaces( groundGeometry, radius, groundAngle, toColorArray( groundColor ), false );\n\n\t\t\t\t\tconst ground = new Mesh( groundGeometry, groundMaterial );\n\t\t\t\t\tgroup.add( ground );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// render background group first\n\n\t\t\tgroup.renderOrder = - Infinity;\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction buildShapeNode( node ) {\n\n\t\t\tconst fields = node.fields;\n\n\t\t\t// if the appearance field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n\t\t\tlet material = new MeshBasicMaterial( { color: 0x000000 } );\n\t\t\tlet geometry;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'appearance':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] !== null ) {\n\n\t\t\t\t\t\t\tmaterial = getNode( fieldValues[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'geometry':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] !== null ) {\n\n\t\t\t\t\t\t\tgeometry = getNode( fieldValues[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build 3D object\n\n\t\t\tlet object;\n\n\t\t\tif ( geometry && geometry.attributes.position ) {\n\n\t\t\t\tconst type = geometry._type;\n\n\t\t\t\tif ( type === 'points' ) { // points\n\n\t\t\t\t\tconst pointsMaterial = new PointsMaterial( { color: 0xffffff } );\n\n\t\t\t\t\tif ( geometry.attributes.color !== undefined ) {\n\n\t\t\t\t\t\tpointsMaterial.vertexColors = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the color field is NULL and there is a material defined for the appearance affecting this PointSet, then use the emissiveColor of the material to draw the points\n\n\t\t\t\t\t\tif ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\t\t\tpointsMaterial.color.copy( material.emissive );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject = new Points( geometry, pointsMaterial );\n\n\t\t\t\t} else if ( type === 'line' ) { // lines\n\n\t\t\t\t\tconst lineMaterial = new LineBasicMaterial( { color: 0xffffff } );\n\n\t\t\t\t\tif ( geometry.attributes.color !== undefined ) {\n\n\t\t\t\t\t\tlineMaterial.vertexColors = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the color field is NULL and there is a material defined for the appearance affecting this IndexedLineSet, then use the emissiveColor of the material to draw the lines\n\n\t\t\t\t\t\tif ( material.isMeshPhongMaterial ) {\n\n\t\t\t\t\t\t\tlineMaterial.color.copy( material.emissive );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject = new LineSegments( geometry, lineMaterial );\n\n\t\t\t\t} else { // consider meshes\n\n\t\t\t\t\t// check \"solid\" hint (it's placed in the geometry but affects the material)\n\n\t\t\t\t\tif ( geometry._solid !== undefined ) {\n\n\t\t\t\t\t\tmaterial.side = ( geometry._solid ) ? FrontSide : DoubleSide;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// check for vertex colors\n\n\t\t\t\t\tif ( geometry.attributes.color !== undefined ) {\n\n\t\t\t\t\t\tmaterial.vertexColors = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tobject = new Object3D();\n\n\t\t\t\t// if the geometry field is NULL or no vertices are defined the object is not drawn\n\n\t\t\t\tobject.visible = false;\n\n\t\t\t}\n\n\t\t\treturn object;\n\n\t\t}\n\n\t\tfunction buildAppearanceNode( node ) {\n\n\t\t\tlet material = new MeshPhongMaterial();\n\t\t\tlet transformData;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'material':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] !== null ) {\n\n\t\t\t\t\t\t\tconst materialData = getNode( fieldValues[ 0 ] );\n\n\t\t\t\t\t\t\tif ( materialData.diffuseColor ) material.color.copy( materialData.diffuseColor );\n\t\t\t\t\t\t\tif ( materialData.emissiveColor ) material.emissive.copy( materialData.emissiveColor );\n\t\t\t\t\t\t\tif ( materialData.shininess ) material.shininess = materialData.shininess;\n\t\t\t\t\t\t\tif ( materialData.specularColor ) material.specular.copy( materialData.specularColor );\n\t\t\t\t\t\t\tif ( materialData.transparency ) material.opacity = 1 - materialData.transparency;\n\t\t\t\t\t\t\tif ( materialData.transparency > 0 ) material.transparent = true;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// if the material field is NULL or unspecified, lighting is off and the unlit object color is (0, 0, 0)\n\n\t\t\t\t\t\t\tmaterial = new MeshBasicMaterial( { color: 0x000000 } );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tconst textureNode = fieldValues[ 0 ];\n\t\t\t\t\t\tif ( textureNode !== null ) {\n\n\t\t\t\t\t\t\tif ( textureNode.name === 'ImageTexture' || textureNode.name === 'PixelTexture' ) {\n\n\t\t\t\t\t\t\t\tmaterial.map = getNode( textureNode );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// MovieTexture not supported yet\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'textureTransform':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] !== null ) {\n\n\t\t\t\t\t\t\ttransformData = getNode( fieldValues[ 0 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// only apply texture transform data if a texture was defined\n\n\t\t\tif ( material.map ) {\n\n\t\t\t\t// respect VRML lighting model\n\n\t\t\t\tif ( material.map.__type ) {\n\n\t\t\t\t\tswitch ( material.map.__type ) {\n\n\t\t\t\t\t\tcase TEXTURE_TYPE.INTENSITY_ALPHA:\n\t\t\t\t\t\t\tmaterial.opacity = 1; // ignore transparency\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TEXTURE_TYPE.RGB:\n\t\t\t\t\t\t\tmaterial.color.set( 0xffffff ); // ignore material color\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase TEXTURE_TYPE.RGBA:\n\t\t\t\t\t\t\tmaterial.color.set( 0xffffff ); // ignore material color\n\t\t\t\t\t\t\tmaterial.opacity = 1; // ignore transparency\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete material.map.__type;\n\n\t\t\t\t}\n\n\t\t\t\t// apply texture transform\n\n\t\t\t\tif ( transformData ) {\n\n\t\t\t\t\tmaterial.map.center.copy( transformData.center );\n\t\t\t\t\tmaterial.map.rotation = transformData.rotation;\n\t\t\t\t\tmaterial.map.repeat.copy( transformData.scale );\n\t\t\t\t\tmaterial.map.offset.copy( transformData.translation );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction buildMaterialNode( node ) {\n\n\t\t\tconst materialData = {};\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'ambientIntensity':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'diffuseColor':\n\t\t\t\t\t\tmaterialData.diffuseColor = new Color( fieldValues[ 0 ], fieldValues[ 1 ], fieldValues[ 2 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'emissiveColor':\n\t\t\t\t\t\tmaterialData.emissiveColor = new Color( fieldValues[ 0 ], fieldValues[ 1 ], fieldValues[ 2 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'shininess':\n\t\t\t\t\t\tmaterialData.shininess = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'specularColor':\n\t\t\t\t\t\tmaterialData.emissiveColor = new Color( fieldValues[ 0 ], fieldValues[ 1 ], fieldValues[ 2 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tmaterialData.transparency = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materialData;\n\n\t\t}\n\n\t\tfunction parseHexColor( hex, textureType, color ) {\n\n\t\t\tlet value;\n\n\t\t\tswitch ( textureType ) {\n\n\t\t\t\tcase TEXTURE_TYPE.INTENSITY:\n\t\t\t\t\t// Intensity texture: A one-component image specifies one-byte hexadecimal or integer values representing the intensity of the image\n\t\t\t\t\tvalue = parseInt( hex );\n\t\t\t\t\tcolor.r = value;\n\t\t\t\t\tcolor.g = value;\n\t\t\t\t\tcolor.b = value;\n\t\t\t\t\tcolor.a = 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TEXTURE_TYPE.INTENSITY_ALPHA:\n\t\t\t\t\t// Intensity+Alpha texture: A two-component image specifies the intensity in the first (high) byte and the alpha opacity in the second (low) byte.\n\t\t\t\t\tvalue = parseInt( '0x' + hex.substring( 2, 4 ) );\n\t\t\t\t\tcolor.r = value;\n\t\t\t\t\tcolor.g = value;\n\t\t\t\t\tcolor.b = value;\n\t\t\t\t\tcolor.a = parseInt( '0x' + hex.substring( 4, 6 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TEXTURE_TYPE.RGB:\n\t\t\t\t\t// RGB texture: Pixels in a three-component image specify the red component in the first (high) byte, followed by the green and blue components\n\t\t\t\t\tcolor.r = parseInt( '0x' + hex.substring( 2, 4 ) );\n\t\t\t\t\tcolor.g = parseInt( '0x' + hex.substring( 4, 6 ) );\n\t\t\t\t\tcolor.b = parseInt( '0x' + hex.substring( 6, 8 ) );\n\t\t\t\t\tcolor.a = 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TEXTURE_TYPE.RGBA:\n\t\t\t\t\t// RGBA texture: Four-component images specify the alpha opacity byte after red/green/blue\n\t\t\t\t\tcolor.r = parseInt( '0x' + hex.substring( 2, 4 ) );\n\t\t\t\t\tcolor.g = parseInt( '0x' + hex.substring( 4, 6 ) );\n\t\t\t\t\tcolor.b = parseInt( '0x' + hex.substring( 6, 8 ) );\n\t\t\t\t\tcolor.a = parseInt( '0x' + hex.substring( 8, 10 ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getTextureType( num_components ) {\n\n\t\t\tlet type;\n\n\t\t\tswitch ( num_components ) {\n\n\t\t\t\tcase 1:\n\t\t\t\t\ttype = TEXTURE_TYPE.INTENSITY;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\ttype = TEXTURE_TYPE.INTENSITY_ALPHA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\ttype = TEXTURE_TYPE.RGB;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\ttype = TEXTURE_TYPE.RGBA;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t}\n\n\t\t\treturn type;\n\n\t\t}\n\n\t\tfunction buildPixelTextureNode( node ) {\n\n\t\t\tlet texture;\n\t\t\tlet wrapS = RepeatWrapping;\n\t\t\tlet wrapT = RepeatWrapping;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'image':\n\t\t\t\t\t\tconst width = fieldValues[ 0 ];\n\t\t\t\t\t\tconst height = fieldValues[ 1 ];\n\t\t\t\t\t\tconst num_components = fieldValues[ 2 ];\n\n\t\t\t\t\t\tconst textureType = getTextureType( num_components );\n\n\t\t\t\t\t\tconst data = new Uint8Array( 4 * width * height );\n\n\t\t\t\t\t\tconst color = { r: 0, g: 0, b: 0, a: 0 };\n\n\t\t\t\t\t\tfor ( let j = 3, k = 0, jl = fieldValues.length; j < jl; j ++, k ++ ) {\n\n\t\t\t\t\t\t\tparseHexColor( fieldValues[ j ], textureType, color );\n\n\t\t\t\t\t\t\tconst stride = k * 4;\n\n\t\t\t\t\t\t\tdata[ stride + 0 ] = color.r;\n\t\t\t\t\t\t\tdata[ stride + 1 ] = color.g;\n\t\t\t\t\t\t\tdata[ stride + 2 ] = color.b;\n\t\t\t\t\t\t\tdata[ stride + 3 ] = color.a;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture = new DataTexture( data, width, height );\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\ttexture.__type = textureType; // needed for material modifications\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'repeatS':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] === false ) wrapS = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'repeatT':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] === false ) wrapT = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture ) {\n\n\t\t\t\ttexture.wrapS = wrapS;\n\t\t\t\ttexture.wrapT = wrapT;\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tfunction buildImageTextureNode( node ) {\n\n\t\t\tlet texture;\n\t\t\tlet wrapS = RepeatWrapping;\n\t\t\tlet wrapT = RepeatWrapping;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'url':\n\t\t\t\t\t\tconst url = fieldValues[ 0 ];\n\t\t\t\t\t\tif ( url ) texture = textureLoader.load( url );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'repeatS':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] === false ) wrapS = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'repeatT':\n\t\t\t\t\t\tif ( fieldValues[ 0 ] === false ) wrapT = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture ) {\n\n\t\t\t\ttexture.wrapS = wrapS;\n\t\t\t\ttexture.wrapT = wrapT;\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t}\n\n\t\tfunction buildTextureTransformNode( node ) {\n\n\t\t\tconst transformData = {\n\t\t\t\tcenter: new Vector2(),\n\t\t\t\trotation: new Vector2(),\n\t\t\t\tscale: new Vector2(),\n\t\t\t\ttranslation: new Vector2()\n\t\t\t};\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'center':\n\t\t\t\t\t\ttransformData.center.set( fieldValues[ 0 ], fieldValues[ 1 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotation':\n\t\t\t\t\t\ttransformData.rotation = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\ttransformData.scale.set( fieldValues[ 0 ], fieldValues[ 1 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translation':\n\t\t\t\t\t\ttransformData.translation.set( fieldValues[ 0 ], fieldValues[ 1 ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn transformData;\n\n\t\t}\n\n\t\tfunction buildGeometricNode( node ) {\n\n\t\t\treturn node.fields[ 0 ].values;\n\n\t\t}\n\n\t\tfunction buildWorldInfoNode( node ) {\n\n\t\t\tconst worldInfo = {};\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'title':\n\t\t\t\t\t\tworldInfo.title = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'info':\n\t\t\t\t\t\tworldInfo.info = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn worldInfo;\n\n\t\t}\n\n\t\tfunction buildIndexedFaceSetNode( node ) {\n\n\t\t\tlet color, coord, normal, texCoord;\n\t\t\tlet ccw = true, solid = true, creaseAngle = 0;\n\t\t\tlet colorIndex, coordIndex, normalIndex, texCoordIndex;\n\t\t\tlet colorPerVertex = true, normalPerVertex = true;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tconst colorNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( colorNode !== null ) {\n\n\t\t\t\t\t\t\tcolor = getNode( colorNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'coord':\n\t\t\t\t\t\tconst coordNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( coordNode !== null ) {\n\n\t\t\t\t\t\t\tcoord = getNode( coordNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'normal':\n\t\t\t\t\t\tconst normalNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( normalNode !== null ) {\n\n\t\t\t\t\t\t\tnormal = getNode( normalNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texCoord':\n\t\t\t\t\t\tconst texCoordNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( texCoordNode !== null ) {\n\n\t\t\t\t\t\t\ttexCoord = getNode( texCoordNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ccw':\n\t\t\t\t\t\tccw = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'colorIndex':\n\t\t\t\t\t\tcolorIndex = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'colorPerVertex':\n\t\t\t\t\t\tcolorPerVertex = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'convex':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'coordIndex':\n\t\t\t\t\t\tcoordIndex = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'creaseAngle':\n\t\t\t\t\t\tcreaseAngle = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'normalIndex':\n\t\t\t\t\t\tnormalIndex = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'normalPerVertex':\n\t\t\t\t\t\tnormalPerVertex = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'solid':\n\t\t\t\t\t\tsolid = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texCoordIndex':\n\t\t\t\t\t\ttexCoordIndex = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( coordIndex === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Missing coordIndex.' );\n\n\t\t\t\treturn new BufferGeometry(); // handle VRML files with incomplete geometry definition\n\n\t\t\t}\n\n\t\t\tconst triangulatedCoordIndex = triangulateFaceIndex( coordIndex, ccw );\n\n\t\t\tlet colorAttribute;\n\t\t\tlet normalAttribute;\n\t\t\tlet uvAttribute;\n\n\t\t\tif ( color ) {\n\n\t\t\t\tif ( colorPerVertex === true ) {\n\n\t\t\t\t\tif ( colorIndex && colorIndex.length > 0 ) {\n\n\t\t\t\t\t\t// if the colorIndex field is not empty, then it is used to choose colors for each vertex of the IndexedFaceSet.\n\n\t\t\t\t\t\tconst triangulatedColorIndex = triangulateFaceIndex( colorIndex, ccw );\n\t\t\t\t\t\tcolorAttribute = computeAttributeFromIndexedData( triangulatedCoordIndex, triangulatedColorIndex, color, 3 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n\n\t\t\t\t\t\tcolorAttribute = toNonIndexedAttribute( triangulatedCoordIndex, new Float32BufferAttribute( color, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( colorIndex && colorIndex.length > 0 ) {\n\n\t\t\t\t\t\t// if the colorIndex field is not empty, then they are used to choose one color for each face of the IndexedFaceSet\n\n\t\t\t\t\t\tconst flattenFaceColors = flattenData( color, colorIndex );\n\t\t\t\t\t\tconst triangulatedFaceColors = triangulateFaceData( flattenFaceColors, coordIndex );\n\t\t\t\t\t\tcolorAttribute = computeAttributeFromFaceData( triangulatedCoordIndex, triangulatedFaceColors );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the colorIndex field is empty, then the color are applied to each face of the IndexedFaceSet in order\n\n\t\t\t\t\t\tconst triangulatedFaceColors = triangulateFaceData( color, coordIndex );\n\t\t\t\t\t\tcolorAttribute = computeAttributeFromFaceData( triangulatedCoordIndex, triangulatedFaceColors );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( normal ) {\n\n\t\t\t\tif ( normalPerVertex === true ) {\n\n\t\t\t\t\t// consider vertex normals\n\n\t\t\t\t\tif ( normalIndex && normalIndex.length > 0 ) {\n\n\t\t\t\t\t\t// if the normalIndex field is not empty, then it is used to choose normals for each vertex of the IndexedFaceSet.\n\n\t\t\t\t\t\tconst triangulatedNormalIndex = triangulateFaceIndex( normalIndex, ccw );\n\t\t\t\t\t\tnormalAttribute = computeAttributeFromIndexedData( triangulatedCoordIndex, triangulatedNormalIndex, normal, 3 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the normalIndex field is empty, then the coordIndex field is used to choose normals from the Normal node\n\n\t\t\t\t\t\tnormalAttribute = toNonIndexedAttribute( triangulatedCoordIndex, new Float32BufferAttribute( normal, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// consider face normals\n\n\t\t\t\t\tif ( normalIndex && normalIndex.length > 0 ) {\n\n\t\t\t\t\t\t// if the normalIndex field is not empty, then they are used to choose one normal for each face of the IndexedFaceSet\n\n\t\t\t\t\t\tconst flattenFaceNormals = flattenData( normal, normalIndex );\n\t\t\t\t\t\tconst triangulatedFaceNormals = triangulateFaceData( flattenFaceNormals, coordIndex );\n\t\t\t\t\t\tnormalAttribute = computeAttributeFromFaceData( triangulatedCoordIndex, triangulatedFaceNormals );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the normalIndex field is empty, then the normals are applied to each face of the IndexedFaceSet in order\n\n\t\t\t\t\t\tconst triangulatedFaceNormals = triangulateFaceData( normal, coordIndex );\n\t\t\t\t\t\tnormalAttribute = computeAttributeFromFaceData( triangulatedCoordIndex, triangulatedFaceNormals );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// if the normal field is NULL, then the loader should automatically generate normals, using creaseAngle to determine if and how normals are smoothed across shared vertices\n\n\t\t\t\tnormalAttribute = computeNormalAttribute( triangulatedCoordIndex, coord, creaseAngle );\n\n\t\t\t}\n\n\t\t\tif ( texCoord ) {\n\n\t\t\t\t// texture coordinates are always defined on vertex level\n\n\t\t\t\tif ( texCoordIndex && texCoordIndex.length > 0 ) {\n\n\t\t\t\t\t// if the texCoordIndex field is not empty, then it is used to choose texture coordinates for each vertex of the IndexedFaceSet.\n\n\t\t\t\t\tconst triangulatedTexCoordIndex = triangulateFaceIndex( texCoordIndex, ccw );\n\t\t\t\t\tuvAttribute = computeAttributeFromIndexedData( triangulatedCoordIndex, triangulatedTexCoordIndex, texCoord, 2 );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// if the texCoordIndex field is empty, then the coordIndex array is used to choose texture coordinates from the TextureCoordinate node\n\n\t\t\t\t\tuvAttribute = toNonIndexedAttribute( triangulatedCoordIndex, new Float32BufferAttribute( texCoord, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positionAttribute = toNonIndexedAttribute( triangulatedCoordIndex, new Float32BufferAttribute( coord, 3 ) );\n\n\t\t\tgeometry.setAttribute( 'position', positionAttribute );\n\t\t\tgeometry.setAttribute( 'normal', normalAttribute );\n\n\t\t\t// optional attributes\n\n\t\t\tif ( colorAttribute ) geometry.setAttribute( 'color', colorAttribute );\n\t\t\tif ( uvAttribute ) geometry.setAttribute( 'uv', uvAttribute );\n\n\t\t\t// \"solid\" influences the material so let's store it for later use\n\n\t\t\tgeometry._solid = solid;\n\t\t\tgeometry._type = 'mesh';\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildIndexedLineSetNode( node ) {\n\n\t\t\tlet color, coord;\n\t\t\tlet colorIndex, coordIndex;\n\t\t\tlet colorPerVertex = true;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tconst colorNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( colorNode !== null ) {\n\n\t\t\t\t\t\t\tcolor = getNode( colorNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'coord':\n\t\t\t\t\t\tconst coordNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( coordNode !== null ) {\n\n\t\t\t\t\t\t\tcoord = getNode( coordNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'colorIndex':\n\t\t\t\t\t\tcolorIndex = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'colorPerVertex':\n\t\t\t\t\t\tcolorPerVertex = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'coordIndex':\n\t\t\t\t\t\tcoordIndex = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build lines\n\n\t\t\tlet colorAttribute;\n\n\t\t\tconst expandedLineIndex = expandLineIndex( coordIndex ); // create an index for three.js's linesegment primitive\n\n\t\t\tif ( color ) {\n\n\t\t\t\tif ( colorPerVertex === true ) {\n\n\t\t\t\t\tif ( colorIndex.length > 0 ) {\n\n\t\t\t\t\t\t// if the colorIndex field is not empty, then one color is used for each polyline of the IndexedLineSet.\n\n\t\t\t\t\t\tconst expandedColorIndex = expandLineIndex( colorIndex ); // compute colors for each line segment (rendering primitve)\n\t\t\t\t\t\tcolorAttribute = computeAttributeFromIndexedData( expandedLineIndex, expandedColorIndex, color, 3 ); // compute data on vertex level\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the colorIndex field is empty, then the colors are applied to each polyline of the IndexedLineSet in order.\n\n\t\t\t\t\t\tcolorAttribute = toNonIndexedAttribute( expandedLineIndex, new Float32BufferAttribute( color, 3 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( colorIndex.length > 0 ) {\n\n\t\t\t\t\t\t// if the colorIndex field is not empty, then colors are applied to each vertex of the IndexedLineSet\n\n\t\t\t\t\t\tconst flattenLineColors = flattenData( color, colorIndex ); // compute colors for each VRML primitve\n\t\t\t\t\t\tconst expandedLineColors = expandLineData( flattenLineColors, coordIndex ); // compute colors for each line segment (rendering primitve)\n\t\t\t\t\t\tcolorAttribute = computeAttributeFromLineData( expandedLineIndex, expandedLineColors ); // compute data on vertex level\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// if the colorIndex field is empty, then the coordIndex field is used to choose colors from the Color node\n\n\t\t\t\t\t\tconst expandedLineColors = expandLineData( color, coordIndex ); // compute colors for each line segment (rendering primitve)\n\t\t\t\t\t\tcolorAttribute = computeAttributeFromLineData( expandedLineIndex, expandedLineColors ); // compute data on vertex level\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionAttribute = toNonIndexedAttribute( expandedLineIndex, new Float32BufferAttribute( coord, 3 ) );\n\t\t\tgeometry.setAttribute( 'position', positionAttribute );\n\n\t\t\tif ( colorAttribute ) geometry.setAttribute( 'color', colorAttribute );\n\n\t\t\tgeometry._type = 'line';\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildPointSetNode( node ) {\n\n\t\t\tlet color, coord;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tconst colorNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( colorNode !== null ) {\n\n\t\t\t\t\t\t\tcolor = getNode( colorNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'coord':\n\t\t\t\t\t\tconst coordNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( coordNode !== null ) {\n\n\t\t\t\t\t\t\tcoord = getNode( coordNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( coord, 3 ) );\n\t\t\tif ( color ) geometry.setAttribute( 'color', new Float32BufferAttribute( color, 3 ) );\n\n\t\t\tgeometry._type = 'points';\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildBoxNode( node ) {\n\n\t\t\tconst size = new Vector3( 2, 2, 2 );\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'size':\n\t\t\t\t\t\tsize.x = fieldValues[ 0 ];\n\t\t\t\t\t\tsize.y = fieldValues[ 1 ];\n\t\t\t\t\t\tsize.z = fieldValues[ 2 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst geometry = new BoxGeometry( size.x, size.y, size.z );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildConeNode( node ) {\n\n\t\t\tlet radius = 1, height = 2, openEnded = false;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'bottom':\n\t\t\t\t\t\topenEnded = ! fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bottomRadius':\n\t\t\t\t\t\tradius = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'height':\n\t\t\t\t\t\theight = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'side':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst geometry = new ConeGeometry( radius, height, 16, 1, openEnded );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildCylinderNode( node ) {\n\n\t\t\tlet radius = 1, height = 2;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'bottom':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'radius':\n\t\t\t\t\t\tradius = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'height':\n\t\t\t\t\t\theight = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'side':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'top':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst geometry = new CylinderGeometry( radius, radius, height, 16, 1 );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildSphereNode( node ) {\n\n\t\t\tlet radius = 1;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'radius':\n\t\t\t\t\t\tradius = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst geometry = new SphereGeometry( radius, 16, 16 );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildElevationGridNode( node ) {\n\n\t\t\tlet color;\n\t\t\tlet normal;\n\t\t\tlet texCoord;\n\t\t\tlet height;\n\n\t\t\tlet colorPerVertex = true;\n\t\t\tlet normalPerVertex = true;\n\t\t\tlet solid = true;\n\t\t\tlet ccw = true;\n\t\t\tlet creaseAngle = 0;\n\t\t\tlet xDimension = 2;\n\t\t\tlet zDimension = 2;\n\t\t\tlet xSpacing = 1;\n\t\t\tlet zSpacing = 1;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tconst colorNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( colorNode !== null ) {\n\n\t\t\t\t\t\t\tcolor = getNode( colorNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'normal':\n\t\t\t\t\t\tconst normalNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( normalNode !== null ) {\n\n\t\t\t\t\t\t\tnormal = getNode( normalNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texCoord':\n\t\t\t\t\t\tconst texCoordNode = fieldValues[ 0 ];\n\n\t\t\t\t\t\tif ( texCoordNode !== null ) {\n\n\t\t\t\t\t\t\ttexCoord = getNode( texCoordNode );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'height':\n\t\t\t\t\t\theight = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ccw':\n\t\t\t\t\t\tccw = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'colorPerVertex':\n\t\t\t\t\t\tcolorPerVertex = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'creaseAngle':\n\t\t\t\t\t\tcreaseAngle = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'normalPerVertex':\n\t\t\t\t\t\tnormalPerVertex = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'solid':\n\t\t\t\t\t\tsolid = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'xDimension':\n\t\t\t\t\t\txDimension = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'xSpacing':\n\t\t\t\t\t\txSpacing = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'zDimension':\n\t\t\t\t\t\tzDimension = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'zSpacing':\n\t\t\t\t\t\tzSpacing = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// vertex data\n\n\t\t\tconst vertices = [];\n\t\t\tconst normals = [];\n\t\t\tconst colors = [];\n\t\t\tconst uvs = [];\n\n\t\t\tfor ( let i = 0; i < zDimension; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < xDimension; j ++ ) {\n\n\t\t\t\t\t// compute a row major index\n\n\t\t\t\t\tconst index = ( i * xDimension ) + j;\n\n\t\t\t\t\t// vertices\n\n\t\t\t\t\tconst x = xSpacing * i;\n\t\t\t\t\tconst y = height[ index ];\n\t\t\t\t\tconst z = zSpacing * j;\n\n\t\t\t\t\tvertices.push( x, y, z );\n\n\t\t\t\t\t// colors\n\n\t\t\t\t\tif ( color && colorPerVertex === true ) {\n\n\t\t\t\t\t\tconst r = color[ index * 3 + 0 ];\n\t\t\t\t\t\tconst g = color[ index * 3 + 1 ];\n\t\t\t\t\t\tconst b = color[ index * 3 + 2 ];\n\n\t\t\t\t\t\tcolors.push( r, g, b );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// normals\n\n\t\t\t\t\tif ( normal && normalPerVertex === true ) {\n\n\t\t\t\t\t\tconst xn = normal[ index * 3 + 0 ];\n\t\t\t\t\t\tconst yn = normal[ index * 3 + 1 ];\n\t\t\t\t\t\tconst zn = normal[ index * 3 + 2 ];\n\n\t\t\t\t\t\tnormals.push( xn, yn, zn );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tif ( texCoord ) {\n\n\t\t\t\t\t\tconst s = texCoord[ index * 2 + 0 ];\n\t\t\t\t\t\tconst t = texCoord[ index * 2 + 1 ];\n\n\t\t\t\t\t\tuvs.push( s, t );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuvs.push( i / ( xDimension - 1 ), j / ( zDimension - 1 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tconst indices = [];\n\n\t\t\tfor ( let i = 0; i < xDimension - 1; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < zDimension - 1; j ++ ) {\n\n\t\t\t\t\t// from https://tecfa.unige.ch/guides/vrml/vrml97/spec/part1/nodesRef.html#ElevationGrid\n\n\t\t\t\t\tconst a = i + j * xDimension;\n\t\t\t\t\tconst b = i + ( j + 1 ) * xDimension;\n\t\t\t\t\tconst c = ( i + 1 ) + ( j + 1 ) * xDimension;\n\t\t\t\t\tconst d = ( i + 1 ) + j * xDimension;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\tindices.push( a, c, b );\n\t\t\t\t\t\tindices.push( c, a, d );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tindices.push( a, b, c );\n\t\t\t\t\t\tindices.push( c, d, a );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst positionAttribute = toNonIndexedAttribute( indices, new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tconst uvAttribute = toNonIndexedAttribute( indices, new Float32BufferAttribute( uvs, 2 ) );\n\t\t\tlet colorAttribute;\n\t\t\tlet normalAttribute;\n\n\t\t\t// color attribute\n\n\t\t\tif ( color ) {\n\n\t\t\t\tif ( colorPerVertex === false ) {\n\n\t\t\t\t\tfor ( let i = 0; i < xDimension - 1; i ++ ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < zDimension - 1; j ++ ) {\n\n\t\t\t\t\t\t\tconst index = i + j * ( xDimension - 1 );\n\n\t\t\t\t\t\t\tconst r = color[ index * 3 + 0 ];\n\t\t\t\t\t\t\tconst g = color[ index * 3 + 1 ];\n\t\t\t\t\t\t\tconst b = color[ index * 3 + 2 ];\n\n\t\t\t\t\t\t\t// one color per quad\n\n\t\t\t\t\t\t\tcolors.push( r, g, b ); colors.push( r, g, b ); colors.push( r, g, b );\n\t\t\t\t\t\t\tcolors.push( r, g, b ); colors.push( r, g, b ); colors.push( r, g, b );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcolorAttribute = new Float32BufferAttribute( colors, 3 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcolorAttribute = toNonIndexedAttribute( indices, new Float32BufferAttribute( colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normal attribute\n\n\t\t\tif ( normal ) {\n\n\t\t\t\tif ( normalPerVertex === false ) {\n\n\t\t\t\t\tfor ( let i = 0; i < xDimension - 1; i ++ ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < zDimension - 1; j ++ ) {\n\n\t\t\t\t\t\t\tconst index = i + j * ( xDimension - 1 );\n\n\t\t\t\t\t\t\tconst xn = normal[ index * 3 + 0 ];\n\t\t\t\t\t\t\tconst yn = normal[ index * 3 + 1 ];\n\t\t\t\t\t\t\tconst zn = normal[ index * 3 + 2 ];\n\n\t\t\t\t\t\t\t// one normal per quad\n\n\t\t\t\t\t\t\tnormals.push( xn, yn, zn ); normals.push( xn, yn, zn ); normals.push( xn, yn, zn );\n\t\t\t\t\t\t\tnormals.push( xn, yn, zn ); normals.push( xn, yn, zn ); normals.push( xn, yn, zn );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnormalAttribute = new Float32BufferAttribute( normals, 3 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnormalAttribute = toNonIndexedAttribute( indices, new Float32BufferAttribute( normals, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tnormalAttribute = computeNormalAttribute( indices, vertices, creaseAngle );\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', positionAttribute );\n\t\t\tgeometry.setAttribute( 'normal', normalAttribute );\n\t\t\tgeometry.setAttribute( 'uv', uvAttribute );\n\n\t\t\tif ( colorAttribute ) geometry.setAttribute( 'color', colorAttribute );\n\n\t\t\t// \"solid\" influences the material so let's store it for later use\n\n\t\t\tgeometry._solid = solid;\n\t\t\tgeometry._type = 'mesh';\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction buildExtrusionNode( node ) {\n\n\t\t\tlet crossSection = [ 1, 1, 1, - 1, - 1, - 1, - 1, 1, 1, 1 ];\n\t\t\tlet spine = [ 0, 0, 0, 0, 1, 0 ];\n\t\t\tlet scale;\n\t\t\tlet orientation;\n\n\t\t\tlet beginCap = true;\n\t\t\tlet ccw = true;\n\t\t\tlet creaseAngle = 0;\n\t\t\tlet endCap = true;\n\t\t\tlet solid = true;\n\n\t\t\tconst fields = node.fields;\n\n\t\t\tfor ( let i = 0, l = fields.length; i < l; i ++ ) {\n\n\t\t\t\tconst field = fields[ i ];\n\t\t\t\tconst fieldName = field.name;\n\t\t\t\tconst fieldValues = field.values;\n\n\t\t\t\tswitch ( fieldName ) {\n\n\t\t\t\t\tcase 'beginCap':\n\t\t\t\t\t\tbeginCap = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ccw':\n\t\t\t\t\t\tccw = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'convex':\n\t\t\t\t\t\t// field not supported\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'creaseAngle':\n\t\t\t\t\t\tcreaseAngle = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'crossSection':\n\t\t\t\t\t\tcrossSection = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'endCap':\n\t\t\t\t\t\tendCap = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'orientation':\n\t\t\t\t\t\torientation = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tscale = fieldValues;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'solid':\n\t\t\t\t\t\tsolid = fieldValues[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'spine':\n\t\t\t\t\t\tspine = fieldValues; // only extrusion along the Y-axis are supported so far\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.VRMLLoader: Unknown field:', fieldName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst crossSectionClosed = ( crossSection[ 0 ] === crossSection[ crossSection.length - 2 ] && crossSection[ 1 ] === crossSection[ crossSection.length - 1 ] );\n\n\t\t\t// vertices\n\n\t\t\tconst vertices = [];\n\t\t\tconst spineVector = new Vector3();\n\t\t\tconst scaling = new Vector3();\n\n\t\t\tconst axis = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\t\t\tconst quaternion = new Quaternion();\n\n\t\t\tfor ( let i = 0, j = 0, o = 0, il = spine.length; i < il; i += 3, j += 2, o += 4 ) {\n\n\t\t\t\tspineVector.fromArray( spine, i );\n\n\t\t\t\tscaling.x = scale ? scale[ j + 0 ] : 1;\n\t\t\t\tscaling.y = 1;\n\t\t\t\tscaling.z = scale ? scale[ j + 1 ] : 1;\n\n\t\t\t\taxis.x = orientation ? orientation[ o + 0 ] : 0;\n\t\t\t\taxis.y = orientation ? orientation[ o + 1 ] : 0;\n\t\t\t\taxis.z = orientation ? orientation[ o + 2 ] : 1;\n\t\t\t\tconst angle = orientation ? orientation[ o + 3 ] : 0;\n\n\t\t\t\tfor ( let k = 0, kl = crossSection.length; k < kl; k += 2 ) {\n\n\t\t\t\t\tvertex.x = crossSection[ k + 0 ];\n\t\t\t\t\tvertex.y = 0;\n\t\t\t\t\tvertex.z = crossSection[ k + 1 ];\n\n\t\t\t\t\t// scale\n\n\t\t\t\t\tvertex.multiply( scaling );\n\n\t\t\t\t\t// rotate\n\n\t\t\t\t\tquaternion.setFromAxisAngle( axis, angle );\n\t\t\t\t\tvertex.applyQuaternion( quaternion );\n\n\t\t\t\t\t// translate\n\n\t\t\t\t\tvertex.add( spineVector );\n\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tconst indices = [];\n\n\t\t\tconst spineCount = spine.length / 3;\n\t\t\tconst crossSectionCount = crossSection.length / 2;\n\n\t\t\tfor ( let i = 0; i < spineCount - 1; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < crossSectionCount - 1; j ++ ) {\n\n\t\t\t\t\tconst a = j + i * crossSectionCount;\n\t\t\t\t\tlet b = ( j + 1 ) + i * crossSectionCount;\n\t\t\t\t\tconst c = j + ( i + 1 ) * crossSectionCount;\n\t\t\t\t\tlet d = ( j + 1 ) + ( i + 1 ) * crossSectionCount;\n\n\t\t\t\t\tif ( ( j === crossSectionCount - 2 ) && ( crossSectionClosed === true ) ) {\n\n\t\t\t\t\t\tb = i * crossSectionCount;\n\t\t\t\t\t\td = ( i + 1 ) * crossSectionCount;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\tindices.push( a, b, c );\n\t\t\t\t\t\tindices.push( c, b, d );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tindices.push( a, c, b );\n\t\t\t\t\t\tindices.push( c, d, b );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// triangulate cap\n\n\t\t\tif ( beginCap === true || endCap === true ) {\n\n\t\t\t\tconst contour = [];\n\n\t\t\t\tfor ( let i = 0, l = crossSection.length; i < l; i += 2 ) {\n\n\t\t\t\t\tcontour.push( new Vector2( crossSection[ i ], crossSection[ i + 1 ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tconst faces = ShapeUtils.triangulateShape( contour, [] );\n\t\t\t\tconst capIndices = [];\n\n\t\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\t\tcapIndices.push( face[ 0 ], face[ 1 ], face[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\t// begin cap\n\n\t\t\t\tif ( beginCap === true ) {\n\n\t\t\t\t\tfor ( let i = 0, l = capIndices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\t\tindices.push( capIndices[ i + 0 ], capIndices[ i + 1 ], capIndices[ i + 2 ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tindices.push( capIndices[ i + 0 ], capIndices[ i + 2 ], capIndices[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// end cap\n\n\t\t\t\tif ( endCap === true ) {\n\n\t\t\t\t\tconst indexOffset = crossSectionCount * ( spineCount - 1 ); // references to the first vertex of the last cross section\n\n\t\t\t\t\tfor ( let i = 0, l = capIndices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\tif ( ccw === true ) {\n\n\t\t\t\t\t\t\tindices.push( indexOffset + capIndices[ i + 0 ], indexOffset + capIndices[ i + 2 ], indexOffset + capIndices[ i + 1 ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tindices.push( indexOffset + capIndices[ i + 0 ], indexOffset + capIndices[ i + 1 ], indexOffset + capIndices[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst positionAttribute = toNonIndexedAttribute( indices, new Float32BufferAttribute( vertices, 3 ) );\n\t\t\tconst normalAttribute = computeNormalAttribute( indices, vertices, creaseAngle );\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute( 'position', positionAttribute );\n\t\t\tgeometry.setAttribute( 'normal', normalAttribute );\n\t\t\t// no uvs yet\n\n\t\t\t// \"solid\" influences the material so let's store it for later use\n\n\t\t\tgeometry._solid = solid;\n\t\t\tgeometry._type = 'mesh';\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction resolveUSE( identifier ) {\n\n\t\t\tconst node = nodeMap[ identifier ];\n\t\t\tconst build = getNode( node );\n\n\t\t\t// because the same 3D objects can have different transformations, it's necessary to clone them.\n\t\t\t// materials can be influenced by the geometry (e.g. vertex normals). cloning is necessary to avoid\n\t\t\t// any side effects\n\n\t\t\treturn ( build.isObject3D || build.isMaterial ) ? build.clone() : build;\n\n\t\t}\n\n\t\tfunction parseFieldChildren( children, owner ) {\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst object = getNode( children[ i ] );\n\n\t\t\t\tif ( object instanceof Object3D ) owner.add( object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction triangulateFaceIndex( index, ccw ) {\n\n\t\t\tconst indices = [];\n\n\t\t\t// since face defintions can have more than three vertices, it's necessary to\n\t\t\t// perform a simple triangulation\n\n\t\t\tlet start = 0;\n\n\t\t\tfor ( let i = 0, l = index.length; i < l; i ++ ) {\n\n\t\t\t\tconst i1 = index[ start ];\n\t\t\t\tconst i2 = index[ i + ( ccw ? 1 : 2 ) ];\n\t\t\t\tconst i3 = index[ i + ( ccw ? 2 : 1 ) ];\n\n\t\t\t\tindices.push( i1, i2, i3 );\n\n\t\t\t\t// an index of -1 indicates that the current face has ended and the next one begins\n\n\t\t\t\tif ( index[ i + 3 ] === - 1 || i + 3 >= l ) {\n\n\t\t\t\t\ti += 3;\n\t\t\t\t\tstart = i + 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn indices;\n\n\t\t}\n\n\t\tfunction triangulateFaceData( data, index ) {\n\n\t\t\tconst triangulatedData = [];\n\n\t\t\tlet start = 0;\n\n\t\t\tfor ( let i = 0, l = index.length; i < l; i ++ ) {\n\n\t\t\t\tconst stride = start * 3;\n\n\t\t\t\tconst x = data[ stride ];\n\t\t\t\tconst y = data[ stride + 1 ];\n\t\t\t\tconst z = data[ stride + 2 ];\n\n\t\t\t\ttriangulatedData.push( x, y, z );\n\n\t\t\t\t// an index of -1 indicates that the current face has ended and the next one begins\n\n\t\t\t\tif ( index[ i + 3 ] === - 1 || i + 3 >= l ) {\n\n\t\t\t\t\ti += 3;\n\t\t\t\t\tstart ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn triangulatedData;\n\n\t\t}\n\n\t\tfunction flattenData( data, index ) {\n\n\t\t\tconst flattenData = [];\n\n\t\t\tfor ( let i = 0, l = index.length; i < l; i ++ ) {\n\n\t\t\t\tconst i1 = index[ i ];\n\n\t\t\t\tconst stride = i1 * 3;\n\n\t\t\t\tconst x = data[ stride ];\n\t\t\t\tconst y = data[ stride + 1 ];\n\t\t\t\tconst z = data[ stride + 2 ];\n\n\t\t\t\tflattenData.push( x, y, z );\n\n\t\t\t}\n\n\t\t\treturn flattenData;\n\n\t\t}\n\n\t\tfunction expandLineIndex( index ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tfor ( let i = 0, l = index.length; i < l; i ++ ) {\n\n\t\t\t\tconst i1 = index[ i ];\n\t\t\t\tconst i2 = index[ i + 1 ];\n\n\t\t\t\tindices.push( i1, i2 );\n\n\t\t\t\t// an index of -1 indicates that the current line has ended and the next one begins\n\n\t\t\t\tif ( index[ i + 2 ] === - 1 || i + 2 >= l ) {\n\n\t\t\t\t\ti += 2;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn indices;\n\n\t\t}\n\n\t\tfunction expandLineData( data, index ) {\n\n\t\t\tconst triangulatedData = [];\n\n\t\t\tlet start = 0;\n\n\t\t\tfor ( let i = 0, l = index.length; i < l; i ++ ) {\n\n\t\t\t\tconst stride = start * 3;\n\n\t\t\t\tconst x = data[ stride ];\n\t\t\t\tconst y = data[ stride + 1 ];\n\t\t\t\tconst z = data[ stride + 2 ];\n\n\t\t\t\ttriangulatedData.push( x, y, z );\n\n\t\t\t\t// an index of -1 indicates that the current line has ended and the next one begins\n\n\t\t\t\tif ( index[ i + 2 ] === - 1 || i + 2 >= l ) {\n\n\t\t\t\t\ti += 2;\n\t\t\t\t\tstart ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn triangulatedData;\n\n\t\t}\n\n\t\tconst vA = new Vector3();\n\t\tconst vB = new Vector3();\n\t\tconst vC = new Vector3();\n\n\t\tconst uvA = new Vector2();\n\t\tconst uvB = new Vector2();\n\t\tconst uvC = new Vector2();\n\n\t\tfunction computeAttributeFromIndexedData( coordIndex, index, data, itemSize ) {\n\n\t\t\tconst array = [];\n\n\t\t\t// we use the coordIndex.length as delimiter since normalIndex must contain at least as many indices\n\n\t\t\tfor ( let i = 0, l = coordIndex.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = index[ i ];\n\t\t\t\tconst b = index[ i + 1 ];\n\t\t\t\tconst c = index[ i + 2 ];\n\n\t\t\t\tif ( itemSize === 2 ) {\n\n\t\t\t\t\tuvA.fromArray( data, a * itemSize );\n\t\t\t\t\tuvB.fromArray( data, b * itemSize );\n\t\t\t\t\tuvC.fromArray( data, c * itemSize );\n\n\t\t\t\t\tarray.push( uvA.x, uvA.y );\n\t\t\t\t\tarray.push( uvB.x, uvB.y );\n\t\t\t\t\tarray.push( uvC.x, uvC.y );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvA.fromArray( data, a * itemSize );\n\t\t\t\t\tvB.fromArray( data, b * itemSize );\n\t\t\t\t\tvC.fromArray( data, c * itemSize );\n\n\t\t\t\t\tarray.push( vA.x, vA.y, vA.z );\n\t\t\t\t\tarray.push( vB.x, vB.y, vB.z );\n\t\t\t\t\tarray.push( vC.x, vC.y, vC.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Float32BufferAttribute( array, itemSize );\n\n\t\t}\n\n\t\tfunction computeAttributeFromFaceData( index, faceData ) {\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, j = 0, l = index.length; i < l; i += 3, j ++ ) {\n\n\t\t\t\tvA.fromArray( faceData, j * 3 );\n\n\t\t\t\tarray.push( vA.x, vA.y, vA.z );\n\t\t\t\tarray.push( vA.x, vA.y, vA.z );\n\t\t\t\tarray.push( vA.x, vA.y, vA.z );\n\n\t\t\t}\n\n\t\t\treturn new Float32BufferAttribute( array, 3 );\n\n\t\t}\n\n\t\tfunction computeAttributeFromLineData( index, lineData ) {\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, j = 0, l = index.length; i < l; i += 2, j ++ ) {\n\n\t\t\t\tvA.fromArray( lineData, j * 3 );\n\n\t\t\t\tarray.push( vA.x, vA.y, vA.z );\n\t\t\t\tarray.push( vA.x, vA.y, vA.z );\n\n\t\t\t}\n\n\t\t\treturn new Float32BufferAttribute( array, 3 );\n\n\t\t}\n\n\t\tfunction toNonIndexedAttribute( indices, attribute ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new Float32BufferAttribute( array2, itemSize );\n\n\t\t}\n\n\t\tconst ab = new Vector3();\n\t\tconst cb = new Vector3();\n\n\t\tfunction computeNormalAttribute( index, coord, creaseAngle ) {\n\n\t\t\tconst faces = [];\n\t\t\tconst vertexNormals = {};\n\n\t\t\t// prepare face and raw vertex normals\n\n\t\t\tfor ( let i = 0, l = index.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = index[ i ];\n\t\t\t\tconst b = index[ i + 1 ];\n\t\t\t\tconst c = index[ i + 2 ];\n\n\t\t\t\tconst face = new Face( a, b, c );\n\n\t\t\t\tvA.fromArray( coord, a * 3 );\n\t\t\t\tvB.fromArray( coord, b * 3 );\n\t\t\t\tvC.fromArray( coord, c * 3 );\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tcb.normalize();\n\n\t\t\t\tface.normal.copy( cb );\n\n\t\t\t\tif ( vertexNormals[ a ] === undefined ) vertexNormals[ a ] = [];\n\t\t\t\tif ( vertexNormals[ b ] === undefined ) vertexNormals[ b ] = [];\n\t\t\t\tif ( vertexNormals[ c ] === undefined ) vertexNormals[ c ] = [];\n\n\t\t\t\tvertexNormals[ a ].push( face.normal );\n\t\t\t\tvertexNormals[ b ].push( face.normal );\n\t\t\t\tvertexNormals[ c ].push( face.normal );\n\n\t\t\t\tfaces.push( face );\n\n\t\t\t}\n\n\t\t\t// compute vertex normals and build final geometry\n\n\t\t\tconst normals = [];\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst nA = weightedNormal( vertexNormals[ face.a ], face.normal, creaseAngle );\n\t\t\t\tconst nB = weightedNormal( vertexNormals[ face.b ], face.normal, creaseAngle );\n\t\t\t\tconst nC = weightedNormal( vertexNormals[ face.c ], face.normal, creaseAngle );\n\n\t\t\t\tvA.fromArray( coord, face.a * 3 );\n\t\t\t\tvB.fromArray( coord, face.b * 3 );\n\t\t\t\tvC.fromArray( coord, face.c * 3 );\n\n\t\t\t\tnormals.push( nA.x, nA.y, nA.z );\n\t\t\t\tnormals.push( nB.x, nB.y, nB.z );\n\t\t\t\tnormals.push( nC.x, nC.y, nC.z );\n\n\t\t\t}\n\n\t\t\treturn new Float32BufferAttribute( normals, 3 );\n\n\t\t}\n\n\t\tfunction weightedNormal( normals, vector, creaseAngle ) {\n\n\t\t\tconst normal = new Vector3();\n\n\t\t\tif ( creaseAngle === 0 ) {\n\n\t\t\t\tnormal.copy( vector );\n\n\t\t\t} else {\n\n\t\t\t\tfor ( let i = 0, l = normals.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( normals[ i ].angleTo( vector ) < creaseAngle ) {\n\n\t\t\t\t\t\tnormal.add( normals[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn normal.normalize();\n\n\t\t}\n\n\t\tfunction toColorArray( colors ) {\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\tarray.push( new Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\t/**\n\t\t * Vertically paints the faces interpolating between the\n\t\t * specified colors at the specified angels. This is used for the Background\n\t\t * node, but could be applied to other nodes with multiple faces as well.\n\t\t *\n\t\t * When used with the Background node, default is directionIsDown is true if\n\t\t * interpolating the skyColor down from the Zenith. When interpolationg up from\n\t\t * the Nadir i.e. interpolating the groundColor, the directionIsDown is false.\n\t\t *\n\t\t * The first angle is never specified, it is the Zenith (0 rad). Angles are specified\n\t\t * in radians. The geometry is thought a sphere, but could be anything. The color interpolation\n\t\t * is linear along the Y axis in any case.\n\t\t *\n\t\t * You must specify one more color than you have angles at the beginning of the colors array.\n\t\t * This is the color of the Zenith (the top of the shape).\n\t\t *\n\t\t * @param {BufferGeometry} geometry\n\t\t * @param {number} radius\n\t\t * @param {array} angles\n\t\t * @param {array} colors\n\t\t * @param {boolean} topDown - Whether to work top down or bottom up.\n\t\t */\n\t\tfunction paintFaces( geometry, radius, angles, colors, topDown ) {\n\n\t\t\t// compute threshold values\n\n\t\t\tconst thresholds = [];\n\t\t\tconst startAngle = ( topDown === true ) ? 0 : Math.PI;\n\n\t\t\tfor ( let i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\t\tlet angle = ( i === 0 ) ? 0 : angles[ i - 1 ];\n\t\t\t\tangle = ( topDown === true ) ? angle : ( startAngle - angle );\n\n\t\t\t\tconst point = new Vector3();\n\t\t\t\tpoint.setFromSphericalCoords( radius, angle, 0 );\n\n\t\t\t\tthresholds.push( point );\n\n\t\t\t}\n\n\t\t\t// generate vertex colors\n\n\t\t\tconst indices = geometry.index;\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst colorAttribute = new BufferAttribute( new Float32Array( geometry.attributes.position.count * 3 ), 3 );\n\n\t\t\tconst position = new Vector3();\n\t\t\tconst color = new Color();\n\n\t\t\tfor ( let i = 0; i < indices.count; i ++ ) {\n\n\t\t\t\tconst index = indices.getX( i );\n\t\t\t\tposition.fromBufferAttribute( positionAttribute, index );\n\n\t\t\t\tlet thresholdIndexA, thresholdIndexB;\n\t\t\t\tlet t = 1;\n\n\t\t\t\tfor ( let j = 1; j < thresholds.length; j ++ ) {\n\n\t\t\t\t\tthresholdIndexA = j - 1;\n\t\t\t\t\tthresholdIndexB = j;\n\n\t\t\t\t\tconst thresholdA = thresholds[ thresholdIndexA ];\n\t\t\t\t\tconst thresholdB = thresholds[ thresholdIndexB ];\n\n\t\t\t\t\tif ( topDown === true ) {\n\n\t\t\t\t\t\t// interpolation for sky color\n\n\t\t\t\t\t\tif ( position.y <= thresholdA.y && position.y > thresholdB.y ) {\n\n\t\t\t\t\t\t\tt = Math.abs( thresholdA.y - position.y ) / Math.abs( thresholdA.y - thresholdB.y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// interpolation for ground color\n\n\t\t\t\t\t\tif ( position.y >= thresholdA.y && position.y < thresholdB.y ) {\n\n\t\t\t\t\t\t\tt = Math.abs( thresholdA.y - position.y ) / Math.abs( thresholdA.y - thresholdB.y );\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst colorA = colors[ thresholdIndexA ];\n\t\t\t\tconst colorB = colors[ thresholdIndexB ];\n\n\t\t\t\tcolor.copy( colorA ).lerp( colorB, t );\n\n\t\t\t\tcolorAttribute.setXYZ( index, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'color', colorAttribute );\n\n\t\t}\n\n\t\t//\n\n\t\tconst textureLoader = new TextureLoader( this.manager );\n\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\t// check version (only 2.0 is supported)\n\n\t\tif ( data.indexOf( '#VRML V2.0' ) === - 1 ) {\n\n\t\t\tthrow Error( 'THREE.VRMLLexer: Version of VRML asset not supported.' );\n\n\t\t}\n\n\t\t// create JSON representing the tree structure of the VRML asset\n\n\t\tconst tree = generateVRMLTree( data );\n\n\t\t// parse the tree structure to a three.js scene\n\n\t\tconst scene = parseTree( tree );\n\n\t\treturn scene;\n\n\t}\n\n}\n\nclass VRMLLexer {\n\n\tconstructor( tokens ) {\n\n\t\tthis.lexer = new chevrotain.Lexer( tokens ); // eslint-disable-line no-undef\n\n\t}\n\n\tlex( inputText ) {\n\n\t\tconst lexingResult = this.lexer.tokenize( inputText );\n\n\t\tif ( lexingResult.errors.length > 0 ) {\n\n\t\t\tconsole.error( lexingResult.errors );\n\n\t\t\tthrow Error( 'THREE.VRMLLexer: Lexing errors detected.' );\n\n\t\t}\n\n\t\treturn lexingResult;\n\n\t}\n\n}\n\nconst CstParser = chevrotain.CstParser;// eslint-disable-line no-undef\n\nclass VRMLParser extends CstParser {\n\n\tconstructor( tokenVocabulary ) {\n\n\t\tsuper( tokenVocabulary );\n\n\t\tconst $ = this;\n\n\t\tconst Version = tokenVocabulary[ 'Version' ];\n\t\tconst LCurly = tokenVocabulary[ 'LCurly' ];\n\t\tconst RCurly = tokenVocabulary[ 'RCurly' ];\n\t\tconst LSquare = tokenVocabulary[ 'LSquare' ];\n\t\tconst RSquare = tokenVocabulary[ 'RSquare' ];\n\t\tconst Identifier = tokenVocabulary[ 'Identifier' ];\n\t\tconst RouteIdentifier = tokenVocabulary[ 'RouteIdentifier' ];\n\t\tconst StringLiteral = tokenVocabulary[ 'StringLiteral' ];\n\t\tconst HexLiteral = tokenVocabulary[ 'HexLiteral' ];\n\t\tconst NumberLiteral = tokenVocabulary[ 'NumberLiteral' ];\n\t\tconst TrueLiteral = tokenVocabulary[ 'TrueLiteral' ];\n\t\tconst FalseLiteral = tokenVocabulary[ 'FalseLiteral' ];\n\t\tconst NullLiteral = tokenVocabulary[ 'NullLiteral' ];\n\t\tconst DEF = tokenVocabulary[ 'DEF' ];\n\t\tconst USE = tokenVocabulary[ 'USE' ];\n\t\tconst ROUTE = tokenVocabulary[ 'ROUTE' ];\n\t\tconst TO = tokenVocabulary[ 'TO' ];\n\t\tconst NodeName = tokenVocabulary[ 'NodeName' ];\n\n\t\t$.RULE( 'vrml', function () {\n\n\t\t\t$.SUBRULE( $.version );\n\t\t\t$.AT_LEAST_ONE( function () {\n\n\t\t\t\t$.SUBRULE( $.node );\n\n\t\t\t} );\n\t\t\t$.MANY( function () {\n\n\t\t\t\t$.SUBRULE( $.route );\n\n\t\t\t} );\n\n\t\t} );\n\n\t\t$.RULE( 'version', function () {\n\n\t\t\t$.CONSUME( Version );\n\n\t\t} );\n\n\t\t$.RULE( 'node', function () {\n\n\t\t\t$.OPTION( function () {\n\n\t\t\t\t$.SUBRULE( $.def );\n\n\t\t\t} );\n\n\t\t\t$.CONSUME( NodeName );\n\t\t\t$.CONSUME( LCurly );\n\t\t\t$.MANY( function () {\n\n\t\t\t\t$.SUBRULE( $.field );\n\n\t\t\t} );\n\t\t\t$.CONSUME( RCurly );\n\n\t\t} );\n\n\t\t$.RULE( 'field', function () {\n\n\t\t\t$.CONSUME( Identifier );\n\n\t\t\t$.OR2( [\n\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t$.SUBRULE( $.singleFieldValue );\n\n\t\t\t\t} },\n\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t$.SUBRULE( $.multiFieldValue );\n\n\t\t\t\t} }\n\t\t\t] );\n\n\t\t} );\n\n\t\t$.RULE( 'def', function () {\n\n\t\t\t$.CONSUME( DEF );\n\t\t\t$.OR( [\n\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t$.CONSUME( Identifier );\n\n\t\t\t\t} },\n\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t$.CONSUME( NodeName );\n\n\t\t\t\t} }\n\t\t\t] );\n\n\t\t} );\n\n\t\t$.RULE( 'use', function () {\n\n\t\t\t$.CONSUME( USE );\n\t\t\t$.OR( [\n\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t$.CONSUME( Identifier );\n\n\t\t\t\t} },\n\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t$.CONSUME( NodeName );\n\n\t\t\t\t} }\n\t\t\t] );\n\n\t\t} );\n\n\t\t$.RULE( 'singleFieldValue', function () {\n\n\t\t\t$.AT_LEAST_ONE( function () {\n\n\t\t\t\t$.OR( [\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.SUBRULE( $.node );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.SUBRULE( $.use );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( StringLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( HexLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( NumberLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( TrueLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( FalseLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( NullLiteral );\n\n\t\t\t\t\t} }\n\t\t\t\t] );\n\n\n\t\t\t} );\n\n\t\t} );\n\n\t\t$.RULE( 'multiFieldValue', function () {\n\n\t\t\t$.CONSUME( LSquare );\n\t\t\t$.MANY( function () {\n\n\t\t\t\t$.OR( [\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.SUBRULE( $.node );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.SUBRULE( $.use );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( StringLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( HexLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( NumberLiteral );\n\n\t\t\t\t\t} },\n\t\t\t\t\t{ ALT: function () {\n\n\t\t\t\t\t\t$.CONSUME( NullLiteral );\n\n\t\t\t\t\t} }\n\t\t\t\t] );\n\n\t\t\t} );\n\t\t\t$.CONSUME( RSquare );\n\n\t\t} );\n\n\t\t$.RULE( 'route', function () {\n\n\t\t\t$.CONSUME( ROUTE );\n\t\t\t$.CONSUME( RouteIdentifier );\n\t\t\t$.CONSUME( TO );\n\t\t\t$.CONSUME2( RouteIdentifier );\n\n\t\t} );\n\n\t\tthis.performSelfAnalysis();\n\n\t}\n\n}\n\nclass Face {\n\n\tconstructor( a, b, c ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\t\tthis.normal = new Vector3();\n\n\t}\n\n}\n\nconst TEXTURE_TYPE = {\n\tINTENSITY: 1,\n\tINTENSITY_ALPHA: 2,\n\tRGB: 3,\n\tRGBA: 4\n};\n\nexport { VRMLLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}