{"ast":null,"code":"import { IsDefined } from '../core/core.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { InputFilesFromFileObjects, InputFilesFromUrls } from '../import/importerfiles.js';\nimport { ImportErrorCode, ImportSettings } from '../import/importer.js';\nimport { TransformFileHostUrls } from '../io/fileutils.js';\nimport { ParameterConverter } from '../parameters/parameterlist.js';\nimport { ThreeModelLoader } from '../threejs/threemodelloader.js';\nimport { Viewer } from './viewer.js';\nexport class EmbeddedViewer {\n  constructor(parentElement, parameters) {\n    this.parentElement = parentElement;\n    this.parameters = {};\n\n    if (IsDefined(parameters)) {\n      this.parameters = parameters;\n    }\n\n    this.canvas = document.createElement('canvas');\n    this.parentElement.appendChild(this.canvas);\n    this.viewer = new Viewer();\n    this.viewer.Init(this.canvas);\n    let width = this.parentElement.clientWidth;\n    let height = this.parentElement.clientHeight;\n    this.viewer.Resize(width, height);\n\n    if (this.parameters.cameraMode) {\n      this.viewer.SetCameraMode(this.parameters.cameraMode);\n    }\n\n    if (this.parameters.backgroundColor) {\n      this.viewer.SetBackgroundColor(this.parameters.backgroundColor);\n    }\n\n    if (this.parameters.edgeSettings) {\n      this.viewer.SetEdgeSettings(this.parameters.edgeSettings.showEdges, this.parameters.edgeSettings.edgeColor, this.parameters.edgeSettings.edgeThreshold);\n    }\n\n    if (this.parameters.environmentSettings) {\n      let environmentMap = this.parameters.environmentSettings.environmentMap;\n      let backgroundIsEnvMap = this.parameters.environmentSettings.backgroundIsEnvMap;\n      this.viewer.SetEnvironmentMapSettings(environmentMap, backgroundIsEnvMap);\n    }\n\n    this.model = null;\n    window.addEventListener('resize', () => {\n      this.Resize();\n    });\n  }\n\n  LoadModelFromUrlList(modelUrls) {\n    TransformFileHostUrls(modelUrls);\n    let inputFiles = InputFilesFromUrls(modelUrls);\n    this.LoadModelFromInputFiles(inputFiles);\n  }\n\n  LoadModelFromFileList(fileList) {\n    let inputFiles = InputFilesFromFileObjects(fileList);\n    this.LoadModelFromInputFiles(inputFiles);\n  }\n\n  LoadModelFromInputFiles(inputFiles) {\n    if (inputFiles === null || inputFiles.length === 0) {\n      return null;\n    }\n\n    this.viewer.Clear();\n    let settings = new ImportSettings();\n\n    if (this.parameters.defaultColor) {\n      settings.defaultColor = this.parameters.defaultColor;\n    }\n\n    this.model = null;\n    let progressDiv = null;\n    let loader = new ThreeModelLoader();\n    loader.LoadModel(inputFiles, settings, {\n      onLoadStart: () => {\n        this.canvas.style.display = 'none';\n        progressDiv = document.createElement('div');\n        progressDiv.innerHTML = 'Loading model...';\n        this.parentElement.appendChild(progressDiv);\n      },\n      onFileListProgress: (current, total) => {},\n      onFileLoadProgress: (current, total) => {},\n      onImportStart: () => {\n        progressDiv.innerHTML = 'Importing model...';\n      },\n      onVisualizationStart: () => {\n        progressDiv.innerHTML = 'Visualizing model...';\n      },\n      onModelFinished: (importResult, threeObject) => {\n        this.parentElement.removeChild(progressDiv);\n        this.canvas.style.display = 'inherit';\n        this.viewer.SetMainObject(threeObject);\n        let boundingSphere = this.viewer.GetBoundingSphere(meshUserData => {\n          return true;\n        });\n        this.viewer.AdjustClippingPlanesToSphere(boundingSphere);\n\n        if (this.parameters.camera) {\n          this.viewer.SetCamera(this.parameters.camera);\n        } else {\n          this.viewer.SetUpVector(Direction.Y, false);\n          this.viewer.FitSphereToWindow(boundingSphere, false);\n        }\n\n        this.model = importResult.model;\n\n        if (this.parameters.onModelLoaded) {\n          this.parameters.onModelLoaded();\n        }\n      },\n      onTextureLoaded: () => {\n        this.viewer.Render();\n      },\n      onLoadError: importError => {\n        let message = 'Unknown error.';\n\n        if (importError.code === ImportErrorCode.NoImportableFile) {\n          message = 'No importable file found.';\n        } else if (importError.code === ImportErrorCode.FailedToLoadFile) {\n          message = 'Failed to load file for import.';\n        } else if (importError.code === ImportErrorCode.ImportFailed) {\n          message = 'Failed to import model.';\n        }\n\n        if (importError.message !== null) {\n          message += ' (' + importError.message + ')';\n        }\n\n        progressDiv.innerHTML = message;\n      }\n    });\n  }\n\n  GetViewer() {\n    return this.viewer;\n  }\n\n  GetModel() {\n    return this.model;\n  }\n\n  Resize() {\n    let width = this.parentElement.clientWidth;\n    let height = this.parentElement.clientHeight;\n    this.viewer.Resize(width, height);\n  }\n\n}\nexport function Init3DViewerElement(parentElement, modelUrls, parameters) {\n  let viewer = new EmbeddedViewer(parentElement, parameters);\n  viewer.LoadModelFromUrlList(modelUrls);\n  return viewer;\n}\nexport function Init3DViewerElements(onReady) {\n  function LoadElement(element) {\n    let camera = null;\n    let cameraParams = element.getAttribute('camera');\n\n    if (cameraParams) {\n      camera = ParameterConverter.StringToCamera(cameraParams);\n    }\n\n    let cameraMode = null;\n    let cameraModeParams = element.getAttribute('cameramode');\n\n    if (cameraModeParams) {\n      cameraMode = ParameterConverter.StringToCameraMode(cameraModeParams);\n    }\n\n    let backgroundColor = null;\n    let backgroundColorParams = element.getAttribute('backgroundcolor');\n\n    if (backgroundColorParams) {\n      backgroundColor = ParameterConverter.StringToRGBAColor(backgroundColorParams);\n    }\n\n    let defaultColor = null;\n    let defaultColorParams = element.getAttribute('defaultcolor');\n\n    if (defaultColorParams) {\n      defaultColor = ParameterConverter.StringToRGBColor(defaultColorParams);\n    }\n\n    let edgeSettings = null;\n    let edgeSettingsParams = element.getAttribute('edgesettings');\n\n    if (edgeSettingsParams) {\n      edgeSettings = ParameterConverter.StringToEdgeSettings(edgeSettingsParams);\n    }\n\n    let environmentSettings = null;\n    let environmentMapParams = element.getAttribute('environmentmap');\n\n    if (environmentMapParams) {\n      let environmentMapParts = environmentMapParams.split(',');\n\n      if (environmentMapParts.length === 6) {\n        let backgroundIsEnvMap = false;\n        let backgroundIsEnvMapParam = element.getAttribute('environmentmapbg');\n\n        if (backgroundIsEnvMapParam && backgroundIsEnvMapParam === 'true') {\n          backgroundIsEnvMap = true;\n        }\n\n        environmentSettings = {\n          environmentMap: environmentMapParts,\n          backgroundIsEnvMap: backgroundIsEnvMap\n        };\n      }\n    }\n\n    let modelUrls = null;\n    let modelParams = element.getAttribute('model');\n\n    if (modelParams) {\n      modelUrls = ParameterConverter.StringToModelUrls(modelParams);\n    }\n\n    return Init3DViewerElement(element, modelUrls, {\n      camera: camera,\n      cameraMode: cameraMode,\n      backgroundColor: backgroundColor,\n      defaultColor: defaultColor,\n      edgeSettings: edgeSettings,\n      environmentSettings: environmentSettings\n    });\n  }\n\n  let viewerElements = [];\n  window.addEventListener('load', () => {\n    let elements = document.getElementsByClassName('online_3d_viewer');\n\n    for (let i = 0; i < elements.length; i++) {\n      let element = elements[i];\n      let viewerElement = LoadElement(element);\n      viewerElements.push(viewerElement);\n    }\n\n    if (onReady !== undefined && onReady !== null) {\n      onReady(viewerElements);\n    }\n  });\n}","map":{"version":3,"names":["IsDefined","Direction","InputFilesFromFileObjects","InputFilesFromUrls","ImportErrorCode","ImportSettings","TransformFileHostUrls","ParameterConverter","ThreeModelLoader","Viewer","EmbeddedViewer","constructor","parentElement","parameters","canvas","document","createElement","appendChild","viewer","Init","width","clientWidth","height","clientHeight","Resize","cameraMode","SetCameraMode","backgroundColor","SetBackgroundColor","edgeSettings","SetEdgeSettings","showEdges","edgeColor","edgeThreshold","environmentSettings","environmentMap","backgroundIsEnvMap","SetEnvironmentMapSettings","model","window","addEventListener","LoadModelFromUrlList","modelUrls","inputFiles","LoadModelFromInputFiles","LoadModelFromFileList","fileList","length","Clear","settings","defaultColor","progressDiv","loader","LoadModel","onLoadStart","style","display","innerHTML","onFileListProgress","current","total","onFileLoadProgress","onImportStart","onVisualizationStart","onModelFinished","importResult","threeObject","removeChild","SetMainObject","boundingSphere","GetBoundingSphere","meshUserData","AdjustClippingPlanesToSphere","camera","SetCamera","SetUpVector","Y","FitSphereToWindow","onModelLoaded","onTextureLoaded","Render","onLoadError","importError","message","code","NoImportableFile","FailedToLoadFile","ImportFailed","GetViewer","GetModel","Init3DViewerElement","Init3DViewerElements","onReady","LoadElement","element","cameraParams","getAttribute","StringToCamera","cameraModeParams","StringToCameraMode","backgroundColorParams","StringToRGBAColor","defaultColorParams","StringToRGBColor","edgeSettingsParams","StringToEdgeSettings","environmentMapParams","environmentMapParts","split","backgroundIsEnvMapParam","modelParams","StringToModelUrls","viewerElements","elements","getElementsByClassName","i","viewerElement","push","undefined"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/viewer/embeddedviewer.js"],"sourcesContent":["import { IsDefined } from '../core/core.js';\r\nimport { Direction } from '../geometry/geometry.js';\r\nimport { InputFilesFromFileObjects, InputFilesFromUrls } from '../import/importerfiles.js';\r\nimport { ImportErrorCode, ImportSettings } from '../import/importer.js';\r\nimport { TransformFileHostUrls } from '../io/fileutils.js';\r\nimport { ParameterConverter } from '../parameters/parameterlist.js';\r\nimport { ThreeModelLoader } from '../threejs/threemodelloader.js';\r\nimport { Viewer } from './viewer.js';\r\n\r\nexport class EmbeddedViewer\r\n{\r\n    constructor (parentElement, parameters)\r\n    {\r\n        this.parentElement = parentElement;\r\n        this.parameters = {};\r\n        if (IsDefined (parameters)) {\r\n            this.parameters = parameters;\r\n        }\r\n\r\n        this.canvas = document.createElement ('canvas');\r\n        this.parentElement.appendChild (this.canvas);\r\n\r\n        this.viewer = new Viewer ();\r\n        this.viewer.Init (this.canvas);\r\n\r\n        let width = this.parentElement.clientWidth;\r\n        let height = this.parentElement.clientHeight;\r\n        this.viewer.Resize (width, height);\r\n\r\n        if (this.parameters.cameraMode) {\r\n            this.viewer.SetCameraMode (this.parameters.cameraMode);\r\n        }\r\n\r\n        if (this.parameters.backgroundColor) {\r\n            this.viewer.SetBackgroundColor (this.parameters.backgroundColor);\r\n        }\r\n\r\n        if (this.parameters.edgeSettings) {\r\n            this.viewer.SetEdgeSettings (\r\n                this.parameters.edgeSettings.showEdges,\r\n                this.parameters.edgeSettings.edgeColor,\r\n                this.parameters.edgeSettings.edgeThreshold\r\n            );\r\n        }\r\n\r\n        if (this.parameters.environmentSettings) {\r\n            let environmentMap = this.parameters.environmentSettings.environmentMap;\r\n            let backgroundIsEnvMap = this.parameters.environmentSettings.backgroundIsEnvMap;\r\n            this.viewer.SetEnvironmentMapSettings (environmentMap, backgroundIsEnvMap);\r\n        }\r\n\r\n        this.model = null;\r\n\r\n        window.addEventListener ('resize', () => {\r\n            this.Resize ();\r\n        });\r\n    }\r\n\r\n    LoadModelFromUrlList (modelUrls)\r\n    {\r\n        TransformFileHostUrls (modelUrls);\r\n        let inputFiles = InputFilesFromUrls (modelUrls);\r\n        this.LoadModelFromInputFiles (inputFiles);\r\n    }\r\n\r\n    LoadModelFromFileList (fileList)\r\n    {\r\n        let inputFiles = InputFilesFromFileObjects (fileList);\r\n        this.LoadModelFromInputFiles (inputFiles);\r\n    }\r\n\r\n    LoadModelFromInputFiles (inputFiles)\r\n    {\r\n        if (inputFiles === null || inputFiles.length === 0) {\r\n            return null;\r\n        }\r\n\r\n        this.viewer.Clear ();\r\n        let settings = new ImportSettings ();\r\n        if (this.parameters.defaultColor) {\r\n            settings.defaultColor = this.parameters.defaultColor;\r\n        }\r\n\r\n        this.model = null;\r\n        let progressDiv = null;\r\n        let loader = new ThreeModelLoader ();\r\n        loader.LoadModel (inputFiles, settings, {\r\n            onLoadStart : () => {\r\n                this.canvas.style.display = 'none';\r\n                progressDiv = document.createElement ('div');\r\n                progressDiv.innerHTML = 'Loading model...';\r\n                this.parentElement.appendChild (progressDiv);\r\n            },\r\n            onFileListProgress : (current, total) => {\r\n            },\r\n            onFileLoadProgress : (current, total) => {\r\n            },\r\n            onImportStart : () => {\r\n                progressDiv.innerHTML = 'Importing model...';\r\n            },\r\n            onVisualizationStart : () => {\r\n                progressDiv.innerHTML = 'Visualizing model...';\r\n            },\r\n            onModelFinished : (importResult, threeObject) => {\r\n                this.parentElement.removeChild (progressDiv);\r\n                this.canvas.style.display = 'inherit';\r\n                this.viewer.SetMainObject (threeObject);\r\n                let boundingSphere = this.viewer.GetBoundingSphere ((meshUserData) => {\r\n                    return true;\r\n                });\r\n                this.viewer.AdjustClippingPlanesToSphere (boundingSphere);\r\n                if (this.parameters.camera) {\r\n                    this.viewer.SetCamera (this.parameters.camera);\r\n                } else {\r\n                    this.viewer.SetUpVector (Direction.Y, false);\r\n                    this.viewer.FitSphereToWindow (boundingSphere, false);\r\n                }\r\n\r\n                this.model = importResult.model;\r\n                if (this.parameters.onModelLoaded) {\r\n                    this.parameters.onModelLoaded ();\r\n                }\r\n            },\r\n            onTextureLoaded : () => {\r\n                this.viewer.Render ();\r\n            },\r\n            onLoadError : (importError) => {\r\n                let message = 'Unknown error.';\r\n                if (importError.code === ImportErrorCode.NoImportableFile) {\r\n                    message = 'No importable file found.';\r\n                } else if (importError.code === ImportErrorCode.FailedToLoadFile) {\r\n                    message = 'Failed to load file for import.';\r\n                } else if (importError.code === ImportErrorCode.ImportFailed) {\r\n                    message = 'Failed to import model.';\r\n                }\r\n                if (importError.message !== null) {\r\n                    message += ' (' + importError.message + ')';\r\n                }\r\n                progressDiv.innerHTML = message;\r\n            }\r\n        });\r\n    }\r\n\r\n    GetViewer ()\r\n    {\r\n        return this.viewer;\r\n    }\r\n\r\n    GetModel ()\r\n    {\r\n        return this.model;\r\n    }\r\n\r\n    Resize ()\r\n    {\r\n        let width = this.parentElement.clientWidth;\r\n        let height = this.parentElement.clientHeight;\r\n        this.viewer.Resize (width, height);\r\n    }\r\n}\r\n\r\nexport function Init3DViewerElement (parentElement, modelUrls, parameters)\r\n{\r\n    let viewer = new EmbeddedViewer (parentElement, parameters);\r\n    viewer.LoadModelFromUrlList (modelUrls);\r\n    return viewer;\r\n}\r\n\r\nexport function Init3DViewerElements (onReady)\r\n{\r\n    function LoadElement (element)\r\n    {\r\n        let camera = null;\r\n        let cameraParams = element.getAttribute ('camera');\r\n        if (cameraParams) {\r\n            camera = ParameterConverter.StringToCamera (cameraParams);\r\n        }\r\n\r\n        let cameraMode = null;\r\n        let cameraModeParams = element.getAttribute ('cameramode');\r\n        if (cameraModeParams) {\r\n            cameraMode = ParameterConverter.StringToCameraMode (cameraModeParams);\r\n        }\r\n\r\n        let backgroundColor = null;\r\n        let backgroundColorParams = element.getAttribute ('backgroundcolor');\r\n        if (backgroundColorParams) {\r\n            backgroundColor = ParameterConverter.StringToRGBAColor (backgroundColorParams);\r\n        }\r\n\r\n        let defaultColor = null;\r\n        let defaultColorParams = element.getAttribute ('defaultcolor');\r\n        if (defaultColorParams) {\r\n            defaultColor = ParameterConverter.StringToRGBColor (defaultColorParams);\r\n        }\r\n\r\n        let edgeSettings = null;\r\n        let edgeSettingsParams = element.getAttribute ('edgesettings');\r\n        if (edgeSettingsParams) {\r\n            edgeSettings = ParameterConverter.StringToEdgeSettings (edgeSettingsParams);\r\n        }\r\n\r\n        let environmentSettings = null;\r\n        let environmentMapParams = element.getAttribute ('environmentmap');\r\n        if (environmentMapParams) {\r\n            let environmentMapParts = environmentMapParams.split (',');\r\n            if (environmentMapParts.length === 6) {\r\n                let backgroundIsEnvMap = false;\r\n                let backgroundIsEnvMapParam = element.getAttribute ('environmentmapbg');\r\n                if (backgroundIsEnvMapParam && backgroundIsEnvMapParam === 'true') {\r\n                    backgroundIsEnvMap = true;\r\n                }\r\n                environmentSettings = {\r\n                    environmentMap : environmentMapParts,\r\n                    backgroundIsEnvMap : backgroundIsEnvMap\r\n                };\r\n            }\r\n        }\r\n\r\n        let modelUrls = null;\r\n        let modelParams = element.getAttribute ('model');\r\n        if (modelParams) {\r\n            modelUrls = ParameterConverter.StringToModelUrls (modelParams);\r\n        }\r\n\r\n        return Init3DViewerElement (element, modelUrls, {\r\n            camera : camera,\r\n            cameraMode : cameraMode,\r\n            backgroundColor : backgroundColor,\r\n            defaultColor : defaultColor,\r\n            edgeSettings : edgeSettings,\r\n            environmentSettings : environmentSettings\r\n        });\r\n    }\r\n\r\n    let viewerElements = [];\r\n    window.addEventListener ('load', () => {\r\n        let elements = document.getElementsByClassName ('online_3d_viewer');\r\n        for (let i = 0; i < elements.length; i++) {\r\n            let element = elements[i];\r\n            let viewerElement = LoadElement (element);\r\n            viewerElements.push (viewerElement);\r\n        }\r\n        if (onReady !== undefined && onReady !== null) {\r\n            onReady (viewerElements);\r\n        }\r\n    });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}