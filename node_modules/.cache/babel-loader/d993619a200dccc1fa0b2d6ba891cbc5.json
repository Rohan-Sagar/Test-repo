{"ast":null,"code":"import { DataTextureLoader, LinearMipmapLinearFilter } from 'three';\n\nclass TGALoader extends DataTextureLoader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  parse(buffer) {\n    // reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n    function tgaCheckHeader(header) {\n      switch (header.image_type) {\n        // check indexed type\n        case TGA_TYPE_INDEXED:\n        case TGA_TYPE_RLE_INDEXED:\n          if (header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1) {\n            console.error('THREE.TGALoader: Invalid type colormap data for indexed type.');\n          }\n\n          break;\n        // check colormap type\n\n        case TGA_TYPE_RGB:\n        case TGA_TYPE_GREY:\n        case TGA_TYPE_RLE_RGB:\n        case TGA_TYPE_RLE_GREY:\n          if (header.colormap_type) {\n            console.error('THREE.TGALoader: Invalid type colormap data for colormap type.');\n          }\n\n          break;\n        // What the need of a file without data ?\n\n        case TGA_TYPE_NO_DATA:\n          console.error('THREE.TGALoader: No data.');\n        // Invalid type ?\n\n        default:\n          console.error('THREE.TGALoader: Invalid type \"%s\".', header.image_type);\n      } // check image width and height\n\n\n      if (header.width <= 0 || header.height <= 0) {\n        console.error('THREE.TGALoader: Invalid image size.');\n      } // check image pixel size\n\n\n      if (header.pixel_size !== 8 && header.pixel_size !== 16 && header.pixel_size !== 24 && header.pixel_size !== 32) {\n        console.error('THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size);\n      }\n    } // parse tga image buffer\n\n\n    function tgaParse(use_rle, use_pal, header, offset, data) {\n      let pixel_data, palettes;\n      const pixel_size = header.pixel_size >> 3;\n      const pixel_total = header.width * header.height * pixel_size; // read palettes\n\n      if (use_pal) {\n        palettes = data.subarray(offset, offset += header.colormap_length * (header.colormap_size >> 3));\n      } // read RLE\n\n\n      if (use_rle) {\n        pixel_data = new Uint8Array(pixel_total);\n        let c, count, i;\n        let shift = 0;\n        const pixels = new Uint8Array(pixel_size);\n\n        while (shift < pixel_total) {\n          c = data[offset++];\n          count = (c & 0x7f) + 1; // RLE pixels\n\n          if (c & 0x80) {\n            // bind pixel tmp array\n            for (i = 0; i < pixel_size; ++i) {\n              pixels[i] = data[offset++];\n            } // copy pixel array\n\n\n            for (i = 0; i < count; ++i) {\n              pixel_data.set(pixels, shift + i * pixel_size);\n            }\n\n            shift += pixel_size * count;\n          } else {\n            // raw pixels\n            count *= pixel_size;\n\n            for (i = 0; i < count; ++i) {\n              pixel_data[shift + i] = data[offset++];\n            }\n\n            shift += count;\n          }\n        }\n      } else {\n        // raw pixels\n        pixel_data = data.subarray(offset, offset += use_pal ? header.width * header.height : pixel_total);\n      }\n\n      return {\n        pixel_data: pixel_data,\n        palettes: palettes\n      };\n    }\n\n    function tgaGetImageData8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes) {\n      const colormap = palettes;\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = colormap[color * 3 + 0];\n          imageData[(x + width * y) * 4 + 1] = colormap[color * 3 + 1];\n          imageData[(x + width * y) * 4 + 0] = colormap[color * 3 + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          color = image[i + 0] + (image[i + 1] << 8);\n          imageData[(x + width * y) * 4 + 0] = (color & 0x7C00) >> 7;\n          imageData[(x + width * y) * 4 + 1] = (color & 0x03E0) >> 2;\n          imageData[(x + width * y) * 4 + 2] = (color & 0x001F) << 3;\n          imageData[(x + width * y) * 4 + 3] = color & 0x8000 ? 0 : 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData24bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 3) {\n          imageData[(x + width * y) * 4 + 3] = 255;\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageData32bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 4) {\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 1];\n          imageData[(x + width * y) * 4 + 0] = image[i + 2];\n          imageData[(x + width * y) * 4 + 3] = image[i + 3];\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey8bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let color,\n          i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i++) {\n          color = image[i];\n          imageData[(x + width * y) * 4 + 0] = color;\n          imageData[(x + width * y) * 4 + 1] = color;\n          imageData[(x + width * y) * 4 + 2] = color;\n          imageData[(x + width * y) * 4 + 3] = 255;\n        }\n      }\n\n      return imageData;\n    }\n\n    function tgaGetImageDataGrey16bits(imageData, y_start, y_step, y_end, x_start, x_step, x_end, image) {\n      let i = 0,\n          x,\n          y;\n      const width = header.width;\n\n      for (y = y_start; y !== y_end; y += y_step) {\n        for (x = x_start; x !== x_end; x += x_step, i += 2) {\n          imageData[(x + width * y) * 4 + 0] = image[i + 0];\n          imageData[(x + width * y) * 4 + 1] = image[i + 0];\n          imageData[(x + width * y) * 4 + 2] = image[i + 0];\n          imageData[(x + width * y) * 4 + 3] = image[i + 1];\n        }\n      }\n\n      return imageData;\n    }\n\n    function getTgaRGBA(data, width, height, image, palette) {\n      let x_start, y_start, x_step, y_step, x_end, y_end;\n\n      switch ((header.flags & TGA_ORIGIN_MASK) >> TGA_ORIGIN_SHIFT) {\n        default:\n        case TGA_ORIGIN_UL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BL:\n          x_start = 0;\n          x_step = 1;\n          x_end = width;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n\n        case TGA_ORIGIN_UR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = 0;\n          y_step = 1;\n          y_end = height;\n          break;\n\n        case TGA_ORIGIN_BR:\n          x_start = width - 1;\n          x_step = -1;\n          x_end = -1;\n          y_start = height - 1;\n          y_step = -1;\n          y_end = -1;\n          break;\n      }\n\n      if (use_grey) {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageDataGrey8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 16:\n            tgaGetImageDataGrey16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } else {\n        switch (header.pixel_size) {\n          case 8:\n            tgaGetImageData8bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette);\n            break;\n\n          case 16:\n            tgaGetImageData16bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 24:\n            tgaGetImageData24bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          case 32:\n            tgaGetImageData32bits(data, y_start, y_step, y_end, x_start, x_step, x_end, image);\n            break;\n\n          default:\n            console.error('THREE.TGALoader: Format not supported.');\n            break;\n        }\n      } // Load image data according to specific method\n      // let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n      // func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\n\n      return data;\n    } // TGA constants\n\n\n    const TGA_TYPE_NO_DATA = 0,\n          TGA_TYPE_INDEXED = 1,\n          TGA_TYPE_RGB = 2,\n          TGA_TYPE_GREY = 3,\n          TGA_TYPE_RLE_INDEXED = 9,\n          TGA_TYPE_RLE_RGB = 10,\n          TGA_TYPE_RLE_GREY = 11,\n          TGA_ORIGIN_MASK = 0x30,\n          TGA_ORIGIN_SHIFT = 0x04,\n          TGA_ORIGIN_BL = 0x00,\n          TGA_ORIGIN_BR = 0x01,\n          TGA_ORIGIN_UL = 0x02,\n          TGA_ORIGIN_UR = 0x03;\n    if (buffer.length < 19) console.error('THREE.TGALoader: Not enough data to contain header.');\n    let offset = 0;\n    const content = new Uint8Array(buffer),\n          header = {\n      id_length: content[offset++],\n      colormap_type: content[offset++],\n      image_type: content[offset++],\n      colormap_index: content[offset++] | content[offset++] << 8,\n      colormap_length: content[offset++] | content[offset++] << 8,\n      colormap_size: content[offset++],\n      origin: [content[offset++] | content[offset++] << 8, content[offset++] | content[offset++] << 8],\n      width: content[offset++] | content[offset++] << 8,\n      height: content[offset++] | content[offset++] << 8,\n      pixel_size: content[offset++],\n      flags: content[offset++]\n    }; // check tga if it is valid format\n\n    tgaCheckHeader(header);\n\n    if (header.id_length + offset > buffer.length) {\n      console.error('THREE.TGALoader: No data.');\n    } // skip the needn't data\n\n\n    offset += header.id_length; // get targa information about RLE compression and palette\n\n    let use_rle = false,\n        use_pal = false,\n        use_grey = false;\n\n    switch (header.image_type) {\n      case TGA_TYPE_RLE_INDEXED:\n        use_rle = true;\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_INDEXED:\n        use_pal = true;\n        break;\n\n      case TGA_TYPE_RLE_RGB:\n        use_rle = true;\n        break;\n\n      case TGA_TYPE_RGB:\n        break;\n\n      case TGA_TYPE_RLE_GREY:\n        use_rle = true;\n        use_grey = true;\n        break;\n\n      case TGA_TYPE_GREY:\n        use_grey = true;\n        break;\n    } //\n\n\n    const imageData = new Uint8Array(header.width * header.height * 4);\n    const result = tgaParse(use_rle, use_pal, header, offset, content);\n    getTgaRGBA(imageData, header.width, header.height, result.pixel_data, result.palettes);\n    return {\n      data: imageData,\n      width: header.width,\n      height: header.height,\n      flipY: true,\n      generateMipmaps: true,\n      minFilter: LinearMipmapLinearFilter\n    };\n  }\n\n}\n\nexport { TGALoader };","map":{"version":3,"names":["DataTextureLoader","LinearMipmapLinearFilter","TGALoader","constructor","manager","parse","buffer","tgaCheckHeader","header","image_type","TGA_TYPE_INDEXED","TGA_TYPE_RLE_INDEXED","colormap_length","colormap_size","colormap_type","console","error","TGA_TYPE_RGB","TGA_TYPE_GREY","TGA_TYPE_RLE_RGB","TGA_TYPE_RLE_GREY","TGA_TYPE_NO_DATA","width","height","pixel_size","tgaParse","use_rle","use_pal","offset","data","pixel_data","palettes","pixel_total","subarray","Uint8Array","c","count","i","shift","pixels","set","tgaGetImageData8bits","imageData","y_start","y_step","y_end","x_start","x_step","x_end","image","colormap","color","x","y","tgaGetImageData16bits","tgaGetImageData24bits","tgaGetImageData32bits","tgaGetImageDataGrey8bits","tgaGetImageDataGrey16bits","getTgaRGBA","palette","flags","TGA_ORIGIN_MASK","TGA_ORIGIN_SHIFT","TGA_ORIGIN_UL","TGA_ORIGIN_BL","TGA_ORIGIN_UR","TGA_ORIGIN_BR","use_grey","length","content","id_length","colormap_index","origin","result","flipY","generateMipmaps","minFilter"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/three/examples/jsm/loaders/TGALoader.js"],"sourcesContent":["import {\n\tDataTextureLoader,\n\tLinearMipmapLinearFilter\n} from 'three';\n\nclass TGALoader extends DataTextureLoader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tparse( buffer ) {\n\n\t\t// reference from vthibault, https://github.com/vthibault/roBrowser/blob/master/src/Loaders/Targa.js\n\n\t\tfunction tgaCheckHeader( header ) {\n\n\t\t\tswitch ( header.image_type ) {\n\n\t\t\t\t// check indexed type\n\n\t\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\t\tif ( header.colormap_length > 256 || header.colormap_size !== 24 || header.colormap_type !== 1 ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for indexed type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// check colormap type\n\n\t\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\t\tif ( header.colormap_type ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type colormap data for colormap type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t\t// What the need of a file without data ?\n\n\t\t\t\tcase TGA_TYPE_NO_DATA:\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t\t\t\t// Invalid type ?\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid type \"%s\".', header.image_type );\n\n\t\t\t}\n\n\t\t\t// check image width and height\n\n\t\t\tif ( header.width <= 0 || header.height <= 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid image size.' );\n\n\t\t\t}\n\n\t\t\t// check image pixel size\n\n\t\t\tif ( header.pixel_size !== 8 && header.pixel_size !== 16 &&\n\t\t\t\theader.pixel_size !== 24 && header.pixel_size !== 32 ) {\n\n\t\t\t\tconsole.error( 'THREE.TGALoader: Invalid pixel size \"%s\".', header.pixel_size );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// parse tga image buffer\n\n\t\tfunction tgaParse( use_rle, use_pal, header, offset, data ) {\n\n\t\t\tlet pixel_data,\n\t\t\t\tpalettes;\n\n\t\t\tconst pixel_size = header.pixel_size >> 3;\n\t\t\tconst pixel_total = header.width * header.height * pixel_size;\n\n\t\t\t // read palettes\n\n\t\t\t if ( use_pal ) {\n\n\t\t\t\t palettes = data.subarray( offset, offset += header.colormap_length * ( header.colormap_size >> 3 ) );\n\n\t\t\t }\n\n\t\t\t // read RLE\n\n\t\t\t if ( use_rle ) {\n\n\t\t\t\t pixel_data = new Uint8Array( pixel_total );\n\n\t\t\t\tlet c, count, i;\n\t\t\t\tlet shift = 0;\n\t\t\t\tconst pixels = new Uint8Array( pixel_size );\n\n\t\t\t\twhile ( shift < pixel_total ) {\n\n\t\t\t\t\tc = data[ offset ++ ];\n\t\t\t\t\tcount = ( c & 0x7f ) + 1;\n\n\t\t\t\t\t// RLE pixels\n\n\t\t\t\t\tif ( c & 0x80 ) {\n\n\t\t\t\t\t\t// bind pixel tmp array\n\n\t\t\t\t\t\tfor ( i = 0; i < pixel_size; ++ i ) {\n\n\t\t\t\t\t\t\tpixels[ i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// copy pixel array\n\n\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\tpixel_data.set( pixels, shift + i * pixel_size );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tshift += pixel_size * count;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// raw pixels\n\n\t\t\t\t\t\tcount *= pixel_size;\n\n\t\t\t\t\t\tfor ( i = 0; i < count; ++ i ) {\n\n\t\t\t\t\t\t\tpixel_data[ shift + i ] = data[ offset ++ ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tshift += count;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t } else {\n\n\t\t\t\t// raw pixels\n\n\t\t\t\tpixel_data = data.subarray(\n\t\t\t\t\t offset, offset += ( use_pal ? header.width * header.height : pixel_total )\n\t\t\t\t);\n\n\t\t\t }\n\n\t\t\t return {\n\t\t\t\tpixel_data: pixel_data,\n\t\t\t\tpalettes: palettes\n\t\t\t };\n\n\t\t}\n\n\t\tfunction tgaGetImageData8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image, palettes ) {\n\n\t\t\tconst colormap = palettes;\n\t\t\tlet color, i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = colormap[ ( color * 3 ) + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = colormap[ ( color * 3 ) + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = colormap[ ( color * 3 ) + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet color, i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\tcolor = image[ i + 0 ] + ( image[ i + 1 ] << 8 );\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = ( color & 0x7C00 ) >> 7;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = ( color & 0x03E0 ) >> 2;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = ( color & 0x001F ) << 3;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = ( color & 0x8000 ) ? 0 : 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData24bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 3 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageData32bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 4 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 1 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 2 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 3 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageDataGrey8bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet color, i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i ++ ) {\n\n\t\t\t\t\tcolor = image[ i ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = color;\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = 255;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction tgaGetImageDataGrey16bits( imageData, y_start, y_step, y_end, x_start, x_step, x_end, image ) {\n\n\t\t\tlet i = 0, x, y;\n\t\t\tconst width = header.width;\n\n\t\t\tfor ( y = y_start; y !== y_end; y += y_step ) {\n\n\t\t\t\tfor ( x = x_start; x !== x_end; x += x_step, i += 2 ) {\n\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 0 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 1 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 2 ] = image[ i + 0 ];\n\t\t\t\t\timageData[ ( x + width * y ) * 4 + 3 ] = image[ i + 1 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn imageData;\n\n\t\t}\n\n\t\tfunction getTgaRGBA( data, width, height, image, palette ) {\n\n\t\t\tlet x_start,\n\t\t\t\ty_start,\n\t\t\t\tx_step,\n\t\t\t\ty_step,\n\t\t\t\tx_end,\n\t\t\t\ty_end;\n\n\t\t\tswitch ( ( header.flags & TGA_ORIGIN_MASK ) >> TGA_ORIGIN_SHIFT ) {\n\n\t\t\t\tdefault:\n\t\t\t\tcase TGA_ORIGIN_UL:\n\t\t\t\t\tx_start = 0;\n\t\t\t\t\tx_step = 1;\n\t\t\t\t\tx_end = width;\n\t\t\t\t\ty_start = 0;\n\t\t\t\t\ty_step = 1;\n\t\t\t\t\ty_end = height;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_BL:\n\t\t\t\t\tx_start = 0;\n\t\t\t\t\tx_step = 1;\n\t\t\t\t\tx_end = width;\n\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\ty_step = - 1;\n\t\t\t\t\ty_end = - 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_UR:\n\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\tx_step = - 1;\n\t\t\t\t\tx_end = - 1;\n\t\t\t\t\ty_start = 0;\n\t\t\t\t\ty_step = 1;\n\t\t\t\t\ty_end = height;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TGA_ORIGIN_BR:\n\t\t\t\t\tx_start = width - 1;\n\t\t\t\t\tx_step = - 1;\n\t\t\t\t\tx_end = - 1;\n\t\t\t\t\ty_start = height - 1;\n\t\t\t\t\ty_step = - 1;\n\t\t\t\t\ty_end = - 1;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( use_grey ) {\n\n\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\ttgaGetImageDataGrey8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\ttgaGetImageDataGrey16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tswitch ( header.pixel_size ) {\n\n\t\t\t\t\tcase 8:\n\t\t\t\t\t\ttgaGetImageData8bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image, palette );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\ttgaGetImageData16bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 24:\n\t\t\t\t\t\ttgaGetImageData24bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 32:\n\t\t\t\t\t\ttgaGetImageData32bits( data, y_start, y_step, y_end, x_start, x_step, x_end, image );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.TGALoader: Format not supported.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Load image data according to specific method\n\t\t\t// let func = 'tgaGetImageData' + (use_grey ? 'Grey' : '') + (header.pixel_size) + 'bits';\n\t\t\t// func(data, y_start, y_step, y_end, x_start, x_step, x_end, width, image, palette );\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// TGA constants\n\n\t\tconst TGA_TYPE_NO_DATA = 0,\n\t\t\tTGA_TYPE_INDEXED = 1,\n\t\t\tTGA_TYPE_RGB = 2,\n\t\t\tTGA_TYPE_GREY = 3,\n\t\t\tTGA_TYPE_RLE_INDEXED = 9,\n\t\t\tTGA_TYPE_RLE_RGB = 10,\n\t\t\tTGA_TYPE_RLE_GREY = 11,\n\n\t\t\tTGA_ORIGIN_MASK = 0x30,\n\t\t\tTGA_ORIGIN_SHIFT = 0x04,\n\t\t\tTGA_ORIGIN_BL = 0x00,\n\t\t\tTGA_ORIGIN_BR = 0x01,\n\t\t\tTGA_ORIGIN_UL = 0x02,\n\t\t\tTGA_ORIGIN_UR = 0x03;\n\n\t\tif ( buffer.length < 19 ) console.error( 'THREE.TGALoader: Not enough data to contain header.' );\n\n\t\tlet offset = 0;\n\n\t\tconst content = new Uint8Array( buffer ),\n\t\t\theader = {\n\t\t\t\tid_length: content[ offset ++ ],\n\t\t\t\tcolormap_type: content[ offset ++ ],\n\t\t\t\timage_type: content[ offset ++ ],\n\t\t\t\tcolormap_index: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tcolormap_length: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tcolormap_size: content[ offset ++ ],\n\t\t\t\torigin: [\n\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\t\tcontent[ offset ++ ] | content[ offset ++ ] << 8\n\t\t\t\t],\n\t\t\t\twidth: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\theight: content[ offset ++ ] | content[ offset ++ ] << 8,\n\t\t\t\tpixel_size: content[ offset ++ ],\n\t\t\t\tflags: content[ offset ++ ]\n\t\t\t};\n\n\t\t// check tga if it is valid format\n\n\t\ttgaCheckHeader( header );\n\n\t\tif ( header.id_length + offset > buffer.length ) {\n\n\t\t\tconsole.error( 'THREE.TGALoader: No data.' );\n\n\t\t}\n\n\t\t// skip the needn't data\n\n\t\toffset += header.id_length;\n\n\t\t// get targa information about RLE compression and palette\n\n\t\tlet use_rle = false,\n\t\t\tuse_pal = false,\n\t\t\tuse_grey = false;\n\n\t\tswitch ( header.image_type ) {\n\n\t\t\tcase TGA_TYPE_RLE_INDEXED:\n\t\t\t\tuse_rle = true;\n\t\t\t\tuse_pal = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_INDEXED:\n\t\t\t\tuse_pal = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RLE_RGB:\n\t\t\t\tuse_rle = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RGB:\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_RLE_GREY:\n\t\t\t\tuse_rle = true;\n\t\t\t\tuse_grey = true;\n\t\t\t\tbreak;\n\n\t\t\tcase TGA_TYPE_GREY:\n\t\t\t\tuse_grey = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\t//\n\n\t\tconst imageData = new Uint8Array( header.width * header.height * 4 );\n\t\tconst result = tgaParse( use_rle, use_pal, header, offset, content );\n\t\tgetTgaRGBA( imageData, header.width, header.height, result.pixel_data, result.palettes );\n\n\t\treturn {\n\n\t\t\tdata: imageData,\n\t\t\twidth: header.width,\n\t\t\theight: header.height,\n\t\t\tflipY: true,\n\t\t\tgenerateMipmaps: true,\n\t\t\tminFilter: LinearMipmapLinearFilter,\n\n\t\t};\n\n\t}\n\n}\n\nexport { TGALoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}