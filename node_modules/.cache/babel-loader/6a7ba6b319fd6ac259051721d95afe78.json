{"ast":null,"code":"import { Transformation } from '../geometry/transformation.js';\n\nclass NodeIdGenerator {\n  constructor() {\n    this.nextId = 0;\n  }\n\n  GenerateId() {\n    const id = this.nextId;\n    this.nextId += 1;\n    return id;\n  }\n\n}\n\nexport const NodeType = {\n  GroupNode: 0,\n  MeshNode: 1\n};\nexport class Node {\n  constructor() {\n    this.type = NodeType.GroupNode;\n    this.name = '';\n    this.parent = null;\n    this.transformation = new Transformation();\n    this.childNodes = [];\n    this.meshIndices = [];\n    this.idGenerator = new NodeIdGenerator();\n    this.id = this.idGenerator.GenerateId();\n  }\n\n  IsEmpty() {\n    return this.childNodes.length === 0 && this.meshIndices.length === 0;\n  }\n\n  GetType() {\n    return this.type;\n  }\n\n  SetType(type) {\n    this.type = type;\n  }\n\n  GetId() {\n    return this.id;\n  }\n\n  GetName() {\n    return this.name;\n  }\n\n  SetName(name) {\n    this.name = name;\n  }\n\n  HasParent() {\n    return this.parent !== null;\n  }\n\n  GetParent() {\n    return this.parent;\n  }\n\n  GetTransformation() {\n    return this.transformation;\n  }\n\n  GetWorldTransformation() {\n    let transformation = this.transformation.Clone();\n    let parent = this.parent;\n\n    while (parent !== null) {\n      transformation.Append(parent.transformation);\n      parent = parent.parent;\n    }\n\n    return transformation;\n  }\n\n  SetTransformation(transformation) {\n    this.transformation = transformation;\n  }\n\n  AddChildNode(node) {\n    node.parent = this;\n    node.idGenerator = this.idGenerator;\n    node.id = node.idGenerator.GenerateId();\n    this.childNodes.push(node);\n    return this.childNodes.length - 1;\n  }\n\n  RemoveChildNode(node) {\n    node.parent = null;\n    let index = this.childNodes.indexOf(node);\n    this.childNodes.splice(index, 1);\n  }\n\n  GetChildNodes() {\n    return this.childNodes;\n  }\n\n  ChildNodeCount() {\n    return this.childNodes.length;\n  }\n\n  GetChildNode(index) {\n    return this.childNodes[index];\n  }\n\n  AddMeshIndex(index) {\n    this.meshIndices.push(index);\n    return this.meshIndices.length - 1;\n  }\n\n  MeshIndexCount() {\n    return this.meshIndices.length;\n  }\n\n  GetMeshIndex(index) {\n    return this.meshIndices[index];\n  }\n\n  GetMeshIndices() {\n    return this.meshIndices;\n  }\n\n  Enumerate(processor) {\n    processor(this);\n\n    for (const childNode of this.childNodes) {\n      childNode.Enumerate(processor);\n    }\n  }\n\n  EnumerateChildren(processor) {\n    for (const childNode of this.childNodes) {\n      processor(childNode);\n      childNode.EnumerateChildren(processor);\n    }\n  }\n\n  EnumerateMeshIndices(processor) {\n    for (const meshIndex of this.meshIndices) {\n      processor(meshIndex);\n    }\n\n    for (const childNode of this.childNodes) {\n      childNode.EnumerateMeshIndices(processor);\n    }\n  }\n\n}","map":{"version":3,"names":["Transformation","NodeIdGenerator","constructor","nextId","GenerateId","id","NodeType","GroupNode","MeshNode","Node","type","name","parent","transformation","childNodes","meshIndices","idGenerator","IsEmpty","length","GetType","SetType","GetId","GetName","SetName","HasParent","GetParent","GetTransformation","GetWorldTransformation","Clone","Append","SetTransformation","AddChildNode","node","push","RemoveChildNode","index","indexOf","splice","GetChildNodes","ChildNodeCount","GetChildNode","AddMeshIndex","MeshIndexCount","GetMeshIndex","GetMeshIndices","Enumerate","processor","childNode","EnumerateChildren","EnumerateMeshIndices","meshIndex"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/node.js"],"sourcesContent":["import { Transformation } from '../geometry/transformation.js';\r\n\r\nclass NodeIdGenerator\r\n{\r\n    constructor ()\r\n    {\r\n        this.nextId = 0;\r\n    }\r\n\r\n    GenerateId ()\r\n    {\r\n        const id = this.nextId;\r\n        this.nextId += 1;\r\n        return id;\r\n    }\r\n}\r\n\r\nexport const NodeType =\r\n{\r\n    GroupNode : 0,\r\n    MeshNode : 1\r\n};\r\n\r\nexport class Node\r\n{\r\n    constructor ()\r\n    {\r\n        this.type = NodeType.GroupNode;\r\n        this.name = '';\r\n        this.parent = null;\r\n        this.transformation = new Transformation ();\r\n\r\n        this.childNodes = [];\r\n        this.meshIndices = [];\r\n\r\n        this.idGenerator = new NodeIdGenerator ();\r\n        this.id = this.idGenerator.GenerateId ();\r\n    }\r\n\r\n    IsEmpty ()\r\n    {\r\n        return this.childNodes.length === 0 && this.meshIndices.length === 0;\r\n    }\r\n\r\n    GetType ()\r\n    {\r\n        return this.type;\r\n    }\r\n\r\n    SetType (type)\r\n    {\r\n        this.type = type;\r\n    }\r\n\r\n    GetId ()\r\n    {\r\n        return this.id;\r\n    }\r\n\r\n    GetName ()\r\n    {\r\n        return this.name;\r\n    }\r\n\r\n    SetName (name)\r\n    {\r\n        this.name = name;\r\n    }\r\n\r\n    HasParent ()\r\n    {\r\n        return this.parent !== null;\r\n    }\r\n\r\n    GetParent ()\r\n    {\r\n        return this.parent;\r\n    }\r\n\r\n    GetTransformation ()\r\n    {\r\n        return this.transformation;\r\n    }\r\n\r\n    GetWorldTransformation ()\r\n    {\r\n        let transformation = this.transformation.Clone ();\r\n        let parent = this.parent;\r\n        while (parent !== null) {\r\n            transformation.Append (parent.transformation);\r\n            parent = parent.parent;\r\n        }\r\n        return transformation;\r\n    }\r\n\r\n    SetTransformation (transformation)\r\n    {\r\n        this.transformation = transformation;\r\n    }\r\n\r\n    AddChildNode (node)\r\n    {\r\n        node.parent = this;\r\n        node.idGenerator = this.idGenerator;\r\n        node.id = node.idGenerator.GenerateId ();\r\n        this.childNodes.push (node);\r\n        return this.childNodes.length - 1;\r\n    }\r\n\r\n    RemoveChildNode (node)\r\n    {\r\n        node.parent = null;\r\n        let index = this.childNodes.indexOf (node);\r\n        this.childNodes.splice (index, 1);\r\n    }\r\n\r\n    GetChildNodes ()\r\n    {\r\n        return this.childNodes;\r\n    }\r\n\r\n    ChildNodeCount ()\r\n    {\r\n        return this.childNodes.length;\r\n    }\r\n\r\n    GetChildNode (index)\r\n    {\r\n        return this.childNodes[index];\r\n    }\r\n\r\n    AddMeshIndex (index)\r\n    {\r\n        this.meshIndices.push (index);\r\n        return this.meshIndices.length - 1;\r\n    }\r\n\r\n    MeshIndexCount ()\r\n    {\r\n        return this.meshIndices.length;\r\n    }\r\n\r\n    GetMeshIndex (index)\r\n    {\r\n        return this.meshIndices[index];\r\n    }\r\n\r\n    GetMeshIndices ()\r\n    {\r\n        return this.meshIndices;\r\n    }\r\n\r\n    Enumerate (processor)\r\n    {\r\n        processor (this);\r\n        for (const childNode of this.childNodes) {\r\n            childNode.Enumerate (processor);\r\n        }\r\n    }\r\n\r\n    EnumerateChildren (processor)\r\n    {\r\n        for (const childNode of this.childNodes) {\r\n            processor (childNode);\r\n            childNode.EnumerateChildren (processor);\r\n        }\r\n    }\r\n\r\n    EnumerateMeshIndices (processor)\r\n    {\r\n        for (const meshIndex of this.meshIndices) {\r\n            processor (meshIndex);\r\n        }\r\n        for (const childNode of this.childNodes) {\r\n            childNode.EnumerateMeshIndices (processor);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}