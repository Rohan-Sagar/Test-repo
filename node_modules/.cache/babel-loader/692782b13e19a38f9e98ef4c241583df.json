{"ast":null,"code":"import { Coord2D } from '../geometry/coord2d.js';\nimport { Coord3D } from '../geometry/coord3d.js';\nimport { RGBColorFromFloatComponents } from '../model/color.js';\nimport { MaterialType } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport * as THREE from 'three'; // Some mobile devices say that they support mediump, but in reality they don't. At the end\n// all materials rendered as black. This hack renders a single plane with red material and\n// it checks if it's really red. If it's not, then probably there is a driver issue.\n// https://github.com/kovacsv/Online3DViewer/issues/69\n\nexport function HasHighpDriverIssue() {\n  let canvas = document.createElement('canvas');\n  document.body.appendChild(canvas);\n  let parameters = {\n    canvas: canvas,\n    antialias: true\n  };\n  let renderer = new THREE.WebGLRenderer(parameters);\n  renderer.setClearColor('#ffffff', 1);\n  renderer.setSize(10, 10);\n  let scene = new THREE.Scene();\n  let ambientLight = new THREE.AmbientLight(0x888888);\n  scene.add(ambientLight);\n  let light = new THREE.DirectionalLight(0x888888);\n  light.position.set(0.0, 0.0, 1.0);\n  scene.add(light);\n  let camera = new THREE.PerspectiveCamera(45.0, 1.0, 0.1, 1000.0);\n  camera.position.set(0.0, 0.0, 1.0);\n  camera.up.set(0.0, 1.0, 0.0);\n  camera.lookAt(new THREE.Vector3(0.0, 0.0, 0.0));\n  scene.add(camera);\n  let plane = new THREE.PlaneGeometry(1.0, 1.0);\n  let mesh = new THREE.Mesh(plane, new THREE.MeshPhongMaterial({\n    color: 0xcc0000\n  }));\n  scene.add(mesh);\n  renderer.render(scene, camera);\n  let context = renderer.getContext();\n  let pixels = new Uint8Array(4);\n  context.readPixels(5, 5, 1, 1, context.RGBA, context.UNSIGNED_BYTE, pixels);\n  document.body.removeChild(canvas);\n  let blackThreshold = 50;\n\n  if (pixels[0] < blackThreshold && pixels[1] < blackThreshold && pixels[2] < blackThreshold) {\n    return true;\n  }\n\n  return false;\n}\nexport const ShadingType = {\n  Phong: 1,\n  Physical: 2\n};\nexport function GetShadingType(model) {\n  let phongCount = 0;\n  let physicalCount = 0;\n\n  for (let i = 0; i < model.MaterialCount(); i++) {\n    let material = model.GetMaterial(i);\n\n    if (material.type === MaterialType.Phong) {\n      phongCount += 1;\n    } else if (material.type === MaterialType.Physical) {\n      physicalCount += 1;\n    }\n  }\n\n  if (phongCount >= physicalCount) {\n    return ShadingType.Phong;\n  } else {\n    return ShadingType.Physical;\n  }\n}\nexport function ConvertThreeColorToColor(threeColor) {\n  return RGBColorFromFloatComponents(threeColor.r, threeColor.g, threeColor.b);\n}\nexport function ConvertColorToThreeColor(color) {\n  return new THREE.Color(color.r / 255.0, color.g / 255.0, color.b / 255.0);\n}\nexport function ConvertThreeGeometryToMesh(threeGeometry, materialIndex) {\n  let mesh = new Mesh();\n  let vertices = threeGeometry.attributes.position.array;\n  let vertexItemSize = threeGeometry.attributes.position.itemSize || 3;\n\n  for (let i = 0; i < vertices.length; i += vertexItemSize) {\n    let x = vertices[i];\n    let y = vertices[i + 1];\n    let z = vertices[i + 2];\n    mesh.AddVertex(new Coord3D(x, y, z));\n  }\n\n  let hasVertexColors = threeGeometry.attributes.color !== undefined;\n\n  if (hasVertexColors) {\n    let colors = threeGeometry.attributes.color.array;\n    let colorItemSize = threeGeometry.attributes.color.itemSize || 3;\n\n    for (let i = 0; i < colors.length; i += colorItemSize) {\n      let threeColor = new THREE.Color(colors[i], colors[i + 1], colors[i + 2]);\n      mesh.AddVertexColor(ConvertThreeColorToColor(threeColor));\n    }\n  }\n\n  let hasNormals = threeGeometry.attributes.normal !== undefined;\n\n  if (hasNormals) {\n    let normals = threeGeometry.attributes.normal.array;\n    let normalItemSize = threeGeometry.attributes.normal.itemSize || 3;\n\n    for (let i = 0; i < normals.length; i += normalItemSize) {\n      let x = normals[i];\n      let y = normals[i + 1];\n      let z = normals[i + 2];\n      mesh.AddNormal(new Coord3D(x, y, z));\n    }\n  }\n\n  let hasUVs = threeGeometry.attributes.uv !== undefined;\n\n  if (hasUVs) {\n    let uvs = threeGeometry.attributes.uv.array;\n    let uvItemSize = threeGeometry.attributes.uv.itemSize || 2;\n\n    for (let i = 0; i < uvs.length; i += uvItemSize) {\n      let x = uvs[i];\n      let y = uvs[i + 1];\n      mesh.AddTextureUV(new Coord2D(x, y));\n    }\n  }\n\n  let indices = null;\n\n  if (threeGeometry.index !== null) {\n    indices = threeGeometry.index.array;\n  } else {\n    indices = [];\n\n    for (let i = 0; i < vertices.length / 3; i++) {\n      indices.push(i);\n    }\n  }\n\n  for (let i = 0; i < indices.length; i += 3) {\n    let v0 = indices[i];\n    let v1 = indices[i + 1];\n    let v2 = indices[i + 2];\n    let triangle = new Triangle(v0, v1, v2);\n\n    if (hasVertexColors) {\n      triangle.SetVertexColors(v0, v1, v2);\n    }\n\n    if (hasNormals) {\n      triangle.SetNormals(v0, v1, v2);\n    }\n\n    if (hasUVs) {\n      triangle.SetTextureUVs(v0, v1, v2);\n    }\n\n    if (materialIndex !== null) {\n      triangle.SetMaterial(materialIndex);\n    }\n\n    mesh.AddTriangle(triangle);\n  }\n\n  return mesh;\n}","map":{"version":3,"names":["Coord2D","Coord3D","RGBColorFromFloatComponents","MaterialType","Mesh","Triangle","THREE","HasHighpDriverIssue","canvas","document","createElement","body","appendChild","parameters","antialias","renderer","WebGLRenderer","setClearColor","setSize","scene","Scene","ambientLight","AmbientLight","add","light","DirectionalLight","position","set","camera","PerspectiveCamera","up","lookAt","Vector3","plane","PlaneGeometry","mesh","MeshPhongMaterial","color","render","context","getContext","pixels","Uint8Array","readPixels","RGBA","UNSIGNED_BYTE","removeChild","blackThreshold","ShadingType","Phong","Physical","GetShadingType","model","phongCount","physicalCount","i","MaterialCount","material","GetMaterial","type","ConvertThreeColorToColor","threeColor","r","g","b","ConvertColorToThreeColor","Color","ConvertThreeGeometryToMesh","threeGeometry","materialIndex","vertices","attributes","array","vertexItemSize","itemSize","length","x","y","z","AddVertex","hasVertexColors","undefined","colors","colorItemSize","AddVertexColor","hasNormals","normal","normals","normalItemSize","AddNormal","hasUVs","uv","uvs","uvItemSize","AddTextureUV","indices","index","push","v0","v1","v2","triangle","SetVertexColors","SetNormals","SetTextureUVs","SetMaterial","AddTriangle"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/threejs/threeutils.js"],"sourcesContent":["import { Coord2D } from '../geometry/coord2d.js';\r\nimport { Coord3D } from '../geometry/coord3d.js';\r\nimport { RGBColorFromFloatComponents } from '../model/color.js';\r\nimport { MaterialType } from '../model/material.js';\r\nimport { Mesh } from '../model/mesh.js';\r\nimport { Triangle } from '../model/triangle.js';\r\n\r\nimport * as THREE from 'three';\r\n\r\n// Some mobile devices say that they support mediump, but in reality they don't. At the end\r\n// all materials rendered as black. This hack renders a single plane with red material and\r\n// it checks if it's really red. If it's not, then probably there is a driver issue.\r\n// https://github.com/kovacsv/Online3DViewer/issues/69\r\nexport function HasHighpDriverIssue ()\r\n{\r\n    let canvas = document.createElement ('canvas');\r\n    document.body.appendChild (canvas);\r\n    let parameters = {\r\n        canvas : canvas,\r\n        antialias : true\r\n    };\r\n\r\n    let renderer = new THREE.WebGLRenderer (parameters);\r\n    renderer.setClearColor ('#ffffff', 1);\r\n    renderer.setSize (10, 10);\r\n\r\n    let scene = new THREE.Scene ();\r\n\r\n    let ambientLight = new THREE.AmbientLight (0x888888);\r\n    scene.add (ambientLight);\r\n\r\n    let light = new THREE.DirectionalLight (0x888888);\r\n    light.position.set (0.0, 0.0, 1.0);\r\n    scene.add (light);\r\n\r\n    let camera = new THREE.PerspectiveCamera (45.0, 1.0, 0.1, 1000.0);\r\n    camera.position.set (0.0, 0.0, 1.0);\r\n    camera.up.set (0.0, 1.0, 0.0);\r\n    camera.lookAt (new THREE.Vector3 (0.0, 0.0, 0.0));\r\n    scene.add (camera);\r\n\r\n    let plane = new THREE.PlaneGeometry (1.0, 1.0);\r\n    let mesh = new THREE.Mesh (plane, new THREE.MeshPhongMaterial ({\r\n        color : 0xcc0000\r\n    }));\r\n    scene.add (mesh);\r\n    renderer.render (scene, camera);\r\n\r\n    let context = renderer.getContext ();\r\n    let pixels = new Uint8Array (4);\r\n    context.readPixels(\r\n        5, 5, 1, 1,\r\n        context.RGBA,\r\n        context.UNSIGNED_BYTE,\r\n        pixels\r\n    );\r\n\r\n    document.body.removeChild (canvas);\r\n\r\n    let blackThreshold = 50;\r\n    if (pixels[0] < blackThreshold && pixels[1] < blackThreshold && pixels[2] < blackThreshold) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport const ShadingType =\r\n{\r\n    Phong : 1,\r\n    Physical : 2\r\n};\r\n\r\nexport function GetShadingType (model)\r\n{\r\n    let phongCount = 0;\r\n    let physicalCount = 0;\r\n    for (let i = 0; i < model.MaterialCount (); i++) {\r\n        let material = model.GetMaterial (i);\r\n        if (material.type === MaterialType.Phong) {\r\n            phongCount += 1;\r\n        } else if (material.type === MaterialType.Physical) {\r\n            physicalCount += 1;\r\n        }\r\n    }\r\n    if (phongCount >= physicalCount) {\r\n        return ShadingType.Phong;\r\n    } else {\r\n        return ShadingType.Physical;\r\n    }\r\n}\r\n\r\nexport function ConvertThreeColorToColor (threeColor)\r\n{\r\n    return RGBColorFromFloatComponents (threeColor.r, threeColor.g, threeColor.b);\r\n}\r\n\r\nexport function ConvertColorToThreeColor (color)\r\n{\r\n    return new THREE.Color (\r\n        color.r / 255.0,\r\n        color.g / 255.0,\r\n        color.b / 255.0\r\n    );\r\n}\r\n\r\nexport function ConvertThreeGeometryToMesh (threeGeometry, materialIndex)\r\n{\r\n    let mesh = new Mesh ();\r\n\r\n    let vertices = threeGeometry.attributes.position.array;\r\n    let vertexItemSize = threeGeometry.attributes.position.itemSize || 3;\r\n    for (let i = 0; i < vertices.length; i += vertexItemSize) {\r\n        let x = vertices[i];\r\n        let y = vertices[i + 1];\r\n        let z = vertices[i + 2];\r\n        mesh.AddVertex (new Coord3D (x, y, z));\r\n    }\r\n\r\n    let hasVertexColors = (threeGeometry.attributes.color !== undefined);\r\n    if (hasVertexColors) {\r\n        let colors = threeGeometry.attributes.color.array;\r\n        let colorItemSize = threeGeometry.attributes.color.itemSize || 3;\r\n        for (let i = 0; i < colors.length; i += colorItemSize) {\r\n            let threeColor = new THREE.Color (colors[i], colors[i + 1], colors[i + 2]);\r\n            mesh.AddVertexColor (ConvertThreeColorToColor (threeColor));\r\n        }\r\n    }\r\n\r\n    let hasNormals = (threeGeometry.attributes.normal !== undefined);\r\n    if (hasNormals) {\r\n        let normals = threeGeometry.attributes.normal.array;\r\n        let normalItemSize = threeGeometry.attributes.normal.itemSize || 3;\r\n        for (let i = 0; i < normals.length; i += normalItemSize) {\r\n            let x = normals[i];\r\n            let y = normals[i + 1];\r\n            let z = normals[i + 2];\r\n            mesh.AddNormal (new Coord3D (x, y, z));\r\n        }\r\n    }\r\n\r\n    let hasUVs = (threeGeometry.attributes.uv !== undefined);\r\n    if (hasUVs) {\r\n        let uvs = threeGeometry.attributes.uv.array;\r\n        let uvItemSize = threeGeometry.attributes.uv.itemSize || 2;\r\n        for (let i = 0; i < uvs.length; i += uvItemSize) {\r\n            let x = uvs[i];\r\n            let y = uvs[i + 1];\r\n            mesh.AddTextureUV (new Coord2D (x, y));\r\n        }\r\n    }\r\n\r\n    let indices = null;\r\n    if (threeGeometry.index !== null) {\r\n        indices = threeGeometry.index.array;\r\n    } else {\r\n        indices = [];\r\n        for (let i = 0; i < vertices.length / 3; i++) {\r\n            indices.push (i);\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < indices.length; i += 3) {\r\n        let v0 = indices[i];\r\n        let v1 = indices[i + 1];\r\n        let v2 = indices[i + 2];\r\n        let triangle = new Triangle (v0, v1, v2);\r\n        if (hasVertexColors) {\r\n            triangle.SetVertexColors (v0, v1, v2);\r\n        }\r\n        if (hasNormals) {\r\n            triangle.SetNormals (v0, v1, v2);\r\n        }\r\n        if (hasUVs) {\r\n            triangle.SetTextureUVs (v0, v1, v2);\r\n        }\r\n        if (materialIndex !== null) {\r\n            triangle.SetMaterial (materialIndex);\r\n        }\r\n        mesh.AddTriangle (triangle);\r\n    }\r\n\r\n    return mesh;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}