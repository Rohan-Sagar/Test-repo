{"ast":null,"code":"import { ValueOrDefault } from '../core/core.js';\nimport { ArrayToCoord3D, Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { ArrayToQuaternion, Quaternion } from '../geometry/quaternion.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { ArrayToRGBColor } from '../model/color.js';\nimport { GenerateCone, GenerateCuboid, GenerateCylinder, GeneratePlatonicSolid, GenerateSphere, GeneratorParams } from '../model/generator.js';\nimport { PhysicalMaterial } from '../model/material.js';\nimport { Node, NodeType } from '../model/node.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nimport { ImporterBase } from './importerbase.js';\nexport class ImporterO3dv extends ImporterBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'o3dv';\n  }\n\n  GetUpDirection() {\n    return Direction.Z;\n  }\n\n  ClearContent() {}\n\n  ResetContent() {}\n\n  ImportContent(fileContent, onFinish) {\n    let textContent = ArrayBufferToUtf8String(fileContent);\n    let content = JSON.parse(textContent);\n\n    if (content.root === undefined) {\n      onFinish();\n      return;\n    }\n\n    if (content.materials !== undefined) {\n      for (let i = 0; i < content.materials.length; i++) {\n        const materialContent = content.materials[i];\n        this.ImportMaterial(materialContent);\n      }\n    }\n\n    if (content.meshes !== undefined) {\n      for (let i = 0; i < content.meshes.length; i++) {\n        const meshContent = content.meshes[i];\n        this.ImportMesh(meshContent);\n      }\n    }\n\n    let rootNode = content.nodes[content.root];\n    this.ImportNode(content, rootNode, this.model.GetRootNode());\n    this.ImportProperties(this.model, content);\n    onFinish();\n  }\n\n  ImportMaterial(materialContent) {\n    let material = new PhysicalMaterial();\n    material.color.Set(255, 255, 255);\n\n    if (materialContent.name !== undefined) {\n      material.name = materialContent.name;\n    }\n\n    if (materialContent.color !== undefined) {\n      material.color = ArrayToRGBColor(materialContent.color);\n    }\n\n    material.metalness = ValueOrDefault(materialContent.metalness, 0.0);\n    material.roughness = ValueOrDefault(materialContent.roughness, 1.0);\n    this.model.AddMaterial(material);\n  }\n\n  ImportMesh(meshContent) {\n    let genParams = new GeneratorParams();\n\n    if (meshContent.name !== undefined) {\n      genParams.SetName(meshContent.name);\n    }\n\n    if (meshContent.material !== undefined) {\n      genParams.SetMaterial(meshContent.material);\n    }\n\n    let parameters = meshContent.parameters;\n\n    if (parameters === undefined) {\n      return;\n    }\n\n    let mesh = null;\n\n    if (meshContent.type === 'cuboid') {\n      if (parameters.size_x === undefined || parameters.size_y === undefined || parameters.size_z === undefined) {\n        return;\n      }\n\n      mesh = GenerateCuboid(genParams, parameters.size_x, parameters.size_y, parameters.size_z);\n    } else if (meshContent.type === 'cylinder') {\n      if (parameters.radius === undefined || parameters.height === undefined) {\n        return;\n      }\n\n      let segments = ValueOrDefault(parameters.segments, 25);\n      let smooth = ValueOrDefault(parameters.smooth, true);\n      mesh = GenerateCylinder(genParams, parameters.radius, parameters.height, segments, smooth);\n    } else if (meshContent.type === 'cone') {\n      if (parameters.top_radius === undefined || parameters.bottom_radius === undefined || parameters.height === undefined) {\n        return;\n      }\n\n      let segments = ValueOrDefault(parameters.segments, 25);\n      let smooth = ValueOrDefault(parameters.smooth, true);\n      mesh = GenerateCone(genParams, parameters.top_radius, parameters.bottom_radius, parameters.height, segments, smooth);\n    } else if (meshContent.type === 'sphere') {\n      if (parameters.radius === undefined) {\n        return;\n      }\n\n      let segments = ValueOrDefault(parameters.segments, 20);\n      let smooth = ValueOrDefault(parameters.smooth, true);\n      mesh = GenerateSphere(genParams, parameters.radius, segments, smooth);\n    } else if (meshContent.type === 'platonic') {\n      if (parameters.solid_type === undefined) {\n        return;\n      }\n\n      let radius = ValueOrDefault(parameters.radius, 1.0);\n      mesh = GeneratePlatonicSolid(genParams, parameters.solid_type, radius);\n    }\n\n    if (mesh !== null) {\n      this.ImportProperties(mesh, meshContent);\n      this.model.AddMesh(mesh);\n    }\n  }\n\n  ImportNode(content, nodeContent, node) {\n    if (nodeContent.name !== undefined) {\n      node.SetName(nodeContent.name);\n    }\n\n    if (nodeContent.transformation !== undefined) {\n      const nodeTransformation = this.GetTransformation(nodeContent.transformation);\n      node.SetTransformation(nodeTransformation);\n    }\n\n    if (nodeContent.children !== undefined) {\n      for (const childIndex of nodeContent.children) {\n        let childContent = content.nodes[childIndex];\n        let childNode = new Node();\n        node.AddChildNode(childNode);\n        this.ImportNode(content, childContent, childNode);\n      }\n    }\n\n    if (nodeContent.mesh !== undefined) {\n      if (nodeContent.children === undefined || nodeContent.children.length === 0) {\n        node.SetType(NodeType.MeshNode);\n      }\n\n      node.AddMeshIndex(nodeContent.mesh);\n    }\n  }\n\n  ImportProperties(element, nodeContent) {\n    if (nodeContent.properties !== undefined) {\n      const propertyGroup = new PropertyGroup('Properties');\n      element.AddPropertyGroup(propertyGroup);\n\n      for (const nodeProperty of nodeContent.properties) {\n        const property = new Property(PropertyType.Text, nodeProperty.name, nodeProperty.value);\n        propertyGroup.AddProperty(property);\n      }\n    }\n  }\n\n  GetTransformation(contentTransformation) {\n    let translation = new Coord3D(0.0, 0.0, 0.0);\n    let rotation = new Quaternion(0.0, 0.0, 0.0, 1.0);\n    let scale = new Coord3D(1.0, 1.0, 1.0);\n\n    if (contentTransformation.translation !== undefined) {\n      translation = ArrayToCoord3D(contentTransformation.translation);\n    }\n\n    if (contentTransformation.rotation !== undefined) {\n      rotation = ArrayToQuaternion(contentTransformation.rotation);\n    }\n\n    if (contentTransformation.scale !== undefined) {\n      scale = ArrayToCoord3D(contentTransformation.scale);\n    }\n\n    const matrix = new Matrix().ComposeTRS(translation, rotation, scale);\n    return new Transformation(matrix);\n  }\n\n}","map":{"version":3,"names":["ValueOrDefault","ArrayToCoord3D","Coord3D","Direction","Matrix","ArrayToQuaternion","Quaternion","Transformation","ArrayBufferToUtf8String","ArrayToRGBColor","GenerateCone","GenerateCuboid","GenerateCylinder","GeneratePlatonicSolid","GenerateSphere","GeneratorParams","PhysicalMaterial","Node","NodeType","Property","PropertyGroup","PropertyType","ImporterBase","ImporterO3dv","constructor","CanImportExtension","extension","GetUpDirection","Z","ClearContent","ResetContent","ImportContent","fileContent","onFinish","textContent","content","JSON","parse","root","undefined","materials","i","length","materialContent","ImportMaterial","meshes","meshContent","ImportMesh","rootNode","nodes","ImportNode","model","GetRootNode","ImportProperties","material","color","Set","name","metalness","roughness","AddMaterial","genParams","SetName","SetMaterial","parameters","mesh","type","size_x","size_y","size_z","radius","height","segments","smooth","top_radius","bottom_radius","solid_type","AddMesh","nodeContent","node","transformation","nodeTransformation","GetTransformation","SetTransformation","children","childIndex","childContent","childNode","AddChildNode","SetType","MeshNode","AddMeshIndex","element","properties","propertyGroup","AddPropertyGroup","nodeProperty","property","Text","value","AddProperty","contentTransformation","translation","rotation","scale","matrix","ComposeTRS"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importero3dv.js"],"sourcesContent":["import { ValueOrDefault } from '../core/core.js';\r\nimport { ArrayToCoord3D, Coord3D } from '../geometry/coord3d.js';\r\nimport { Direction } from '../geometry/geometry.js';\r\nimport { Matrix } from '../geometry/matrix.js';\r\nimport { ArrayToQuaternion, Quaternion } from '../geometry/quaternion.js';\r\nimport { Transformation } from '../geometry/transformation.js';\r\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\r\nimport { ArrayToRGBColor } from '../model/color.js';\r\nimport { GenerateCone, GenerateCuboid, GenerateCylinder, GeneratePlatonicSolid, GenerateSphere, GeneratorParams } from '../model/generator.js';\r\nimport { PhysicalMaterial } from '../model/material.js';\r\nimport { Node, NodeType } from '../model/node.js';\r\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\r\nimport { ImporterBase } from './importerbase.js';\r\n\r\nexport class ImporterO3dv extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'o3dv';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Z;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        let textContent = ArrayBufferToUtf8String (fileContent);\r\n        let content = JSON.parse (textContent);\r\n        if (content.root === undefined) {\r\n            onFinish ();\r\n            return;\r\n        }\r\n\r\n        if (content.materials !== undefined) {\r\n            for (let i = 0; i < content.materials.length; i++) {\r\n                const materialContent = content.materials[i];\r\n                this.ImportMaterial (materialContent);\r\n            }\r\n        }\r\n        if (content.meshes !== undefined) {\r\n            for (let i = 0; i < content.meshes.length; i++) {\r\n                const meshContent = content.meshes[i];\r\n                this.ImportMesh (meshContent);\r\n            }\r\n        }\r\n\r\n        let rootNode = content.nodes[content.root];\r\n        this.ImportNode (content, rootNode, this.model.GetRootNode ());\r\n        this.ImportProperties (this.model, content);\r\n\r\n        onFinish ();\r\n    }\r\n\r\n    ImportMaterial (materialContent)\r\n    {\r\n        let material = new PhysicalMaterial ();\r\n        material.color.Set (255, 255, 255);\r\n        if (materialContent.name !== undefined) {\r\n            material.name = materialContent.name;\r\n        }\r\n        if (materialContent.color !== undefined) {\r\n            material.color = ArrayToRGBColor (materialContent.color);\r\n        }\r\n        material.metalness = ValueOrDefault (materialContent.metalness, 0.0);\r\n        material.roughness = ValueOrDefault (materialContent.roughness, 1.0);\r\n        this.model.AddMaterial (material);\r\n    }\r\n\r\n    ImportMesh (meshContent)\r\n    {\r\n        let genParams = new GeneratorParams ();\r\n        if (meshContent.name !== undefined) {\r\n            genParams.SetName (meshContent.name);\r\n        }\r\n        if (meshContent.material !== undefined) {\r\n            genParams.SetMaterial (meshContent.material);\r\n        }\r\n\r\n        let parameters = meshContent.parameters;\r\n        if (parameters === undefined) {\r\n            return;\r\n        }\r\n\r\n        let mesh = null;\r\n        if (meshContent.type === 'cuboid') {\r\n            if (parameters.size_x === undefined || parameters.size_y === undefined || parameters.size_z === undefined) {\r\n                return;\r\n            }\r\n            mesh = GenerateCuboid (genParams, parameters.size_x, parameters.size_y, parameters.size_z);\r\n        } else if (meshContent.type === 'cylinder') {\r\n            if (parameters.radius === undefined || parameters.height === undefined) {\r\n                return;\r\n            }\r\n            let segments = ValueOrDefault (parameters.segments, 25);\r\n            let smooth = ValueOrDefault (parameters.smooth, true);\r\n            mesh = GenerateCylinder (genParams, parameters.radius, parameters.height, segments, smooth);\r\n        } else if (meshContent.type === 'cone') {\r\n            if (parameters.top_radius === undefined || parameters.bottom_radius === undefined || parameters.height === undefined) {\r\n                return;\r\n            }\r\n            let segments = ValueOrDefault (parameters.segments, 25);\r\n            let smooth = ValueOrDefault (parameters.smooth, true);\r\n            mesh = GenerateCone (genParams, parameters.top_radius, parameters.bottom_radius, parameters.height, segments, smooth);\r\n        } else if (meshContent.type === 'sphere') {\r\n            if (parameters.radius === undefined) {\r\n                return;\r\n            }\r\n            let segments = ValueOrDefault (parameters.segments, 20);\r\n            let smooth = ValueOrDefault (parameters.smooth, true);\r\n            mesh = GenerateSphere (genParams, parameters.radius, segments, smooth);\r\n        } else if (meshContent.type === 'platonic') {\r\n            if (parameters.solid_type === undefined) {\r\n                return;\r\n            }\r\n            let radius = ValueOrDefault (parameters.radius, 1.0);\r\n            mesh = GeneratePlatonicSolid (genParams, parameters.solid_type, radius);\r\n        }\r\n        if (mesh !== null) {\r\n            this.ImportProperties (mesh, meshContent);\r\n            this.model.AddMesh (mesh);\r\n        }\r\n    }\r\n\r\n    ImportNode (content, nodeContent, node)\r\n    {\r\n        if (nodeContent.name !== undefined) {\r\n            node.SetName (nodeContent.name);\r\n        }\r\n        if (nodeContent.transformation !== undefined) {\r\n            const nodeTransformation = this.GetTransformation (nodeContent.transformation);\r\n            node.SetTransformation (nodeTransformation);\r\n        }\r\n        if (nodeContent.children !== undefined) {\r\n            for (const childIndex of nodeContent.children) {\r\n                let childContent = content.nodes[childIndex];\r\n                let childNode = new Node ();\r\n                node.AddChildNode (childNode);\r\n                this.ImportNode (content, childContent, childNode);\r\n            }\r\n        }\r\n        if (nodeContent.mesh !== undefined) {\r\n            if (nodeContent.children === undefined || nodeContent.children.length === 0) {\r\n                node.SetType (NodeType.MeshNode);\r\n            }\r\n            node.AddMeshIndex (nodeContent.mesh);\r\n        }\r\n    }\r\n\r\n    ImportProperties (element, nodeContent)\r\n    {\r\n        if (nodeContent.properties !== undefined) {\r\n            const propertyGroup = new PropertyGroup ('Properties');\r\n            element.AddPropertyGroup (propertyGroup);\r\n            for (const nodeProperty of nodeContent.properties) {\r\n                const property = new Property (PropertyType.Text, nodeProperty.name, nodeProperty.value);\r\n                propertyGroup.AddProperty (property);\r\n            }\r\n        }\r\n    }\r\n\r\n    GetTransformation (contentTransformation)\r\n    {\r\n        let translation = new Coord3D (0.0, 0.0, 0.0);\r\n        let rotation = new Quaternion (0.0, 0.0, 0.0, 1.0);\r\n        let scale = new Coord3D (1.0, 1.0, 1.0);\r\n        if (contentTransformation.translation !== undefined) {\r\n            translation = ArrayToCoord3D (contentTransformation.translation);\r\n        }\r\n        if (contentTransformation.rotation !== undefined) {\r\n            rotation = ArrayToQuaternion (contentTransformation.rotation);\r\n        }\r\n        if (contentTransformation.scale !== undefined) {\r\n            scale = ArrayToCoord3D (contentTransformation.scale);\r\n        }\r\n        const matrix = new Matrix ().ComposeTRS (translation, rotation, scale);\r\n        return new Transformation (matrix);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}