{"ast":null,"code":"import { RunTaskAsync } from '../core/taskrunner.js';\nimport { FileSource, GetFileName } from '../io/fileutils.js';\nimport { RGBColor } from '../model/color.js';\nimport { ImporterFile, ImporterFileList } from './importerfiles.js';\nimport { Importer3dm } from './importer3dm.js';\nimport { Importer3ds } from './importer3ds.js';\nimport { ImporterGltf } from './importergltf.js';\nimport { ImporterIfc } from './importerifc.js';\nimport { ImporterO3dv } from './importero3dv.js';\nimport { ImporterObj } from './importerobj.js';\nimport { ImporterOff } from './importeroff.js';\nimport { ImporterPly } from './importerply.js';\nimport { ImporterOcct } from './importerocct.js';\nimport { ImporterStl } from './importerstl.js';\nimport { ImporterBim } from './importerbim.js';\nimport { ImporterThree3mf, ImporterThreeDae, ImporterThreeFbx, ImporterThreeWrl } from './importerthree.js';\nimport * as fflate from 'fflate';\nexport class ImportSettings {\n  constructor() {\n    this.defaultColor = new RGBColor(200, 200, 200);\n  }\n\n}\nexport const ImportErrorCode = {\n  NoImportableFile: 1,\n  FailedToLoadFile: 2,\n  ImportFailed: 3,\n  UnknownError: 4\n};\nexport class ImportError {\n  constructor(code) {\n    this.code = code;\n    this.mainFile = null;\n    this.message = null;\n  }\n\n}\nexport class ImportResult {\n  constructor() {\n    this.model = null;\n    this.mainFile = null;\n    this.upVector = null;\n    this.usedFiles = null;\n    this.missingFiles = null;\n  }\n\n}\nexport class ImporterFileAccessor {\n  constructor(getBufferCallback) {\n    this.getBufferCallback = getBufferCallback;\n    this.fileBuffers = new Map();\n  }\n\n  GetFileBuffer(filePath) {\n    let fileName = GetFileName(filePath);\n\n    if (this.fileBuffers.has(fileName)) {\n      return this.fileBuffers.get(fileName);\n    }\n\n    let buffer = this.getBufferCallback(fileName);\n    this.fileBuffers.set(fileName, buffer);\n    return buffer;\n  }\n\n}\nexport class Importer {\n  constructor() {\n    this.importers = [new ImporterObj(), new ImporterStl(), new ImporterOff(), new ImporterPly(), new Importer3ds(), new ImporterGltf(), new ImporterO3dv(), new ImporterBim(), new Importer3dm(), new ImporterIfc(), new ImporterOcct(), new ImporterThreeFbx(), new ImporterThreeDae(), new ImporterThreeWrl(), new ImporterThree3mf()];\n    this.fileList = new ImporterFileList();\n    this.model = null;\n    this.usedFiles = [];\n    this.missingFiles = [];\n  }\n\n  AddImporter(importer) {\n    this.importers.push(importer);\n  }\n\n  ImportFiles(inputFiles, settings, callbacks) {\n    callbacks.onLoadStart();\n    this.LoadFiles(inputFiles, {\n      onReady: () => {\n        callbacks.onImportStart();\n        RunTaskAsync(() => {\n          this.DecompressArchives(this.fileList, () => {\n            this.ImportLoadedFiles(settings, callbacks);\n          });\n        });\n      },\n      onFileListProgress: callbacks.onFileListProgress,\n      onFileLoadProgress: callbacks.onFileLoadProgress\n    });\n  }\n\n  LoadFiles(inputFiles, callbacks) {\n    let newFileList = new ImporterFileList();\n    newFileList.FillFromInputFiles(inputFiles);\n    let reset = false;\n\n    if (this.HasImportableFile(newFileList)) {\n      reset = true;\n    } else {\n      let foundMissingFile = false;\n\n      for (let i = 0; i < this.missingFiles.length; i++) {\n        let missingFile = this.missingFiles[i];\n\n        if (newFileList.ContainsFileByPath(missingFile)) {\n          foundMissingFile = true;\n        }\n      }\n\n      if (!foundMissingFile) {\n        reset = true;\n      } else {\n        this.fileList.ExtendFromFileList(newFileList);\n        reset = false;\n      }\n    }\n\n    if (reset) {\n      this.fileList = newFileList;\n    }\n\n    this.fileList.GetContent({\n      onReady: callbacks.onReady,\n      onFileListProgress: callbacks.onFileListProgress,\n      onFileLoadProgress: callbacks.onFileLoadProgress\n    });\n  }\n\n  ImportLoadedFiles(settings, callbacks) {\n    let importableFiles = this.GetImportableFiles(this.fileList);\n\n    if (importableFiles.length === 0) {\n      callbacks.onImportError(new ImportError(ImportErrorCode.NoImportableFile));\n      return;\n    }\n\n    if (importableFiles.length === 1 || !callbacks.onSelectMainFile) {\n      let mainFile = importableFiles[0];\n      this.ImportLoadedMainFile(mainFile, settings, callbacks);\n    } else {\n      let fileNames = importableFiles.map(importableFile => importableFile.file.name);\n      callbacks.onSelectMainFile(fileNames, mainFileIndex => {\n        if (mainFileIndex === null) {\n          callbacks.onImportError(new ImportError(ImportErrorCode.NoImportableFile));\n          return;\n        }\n\n        RunTaskAsync(() => {\n          let mainFile = importableFiles[mainFileIndex];\n          this.ImportLoadedMainFile(mainFile, settings, callbacks);\n        });\n      });\n    }\n  }\n\n  ImportLoadedMainFile(mainFile, settings, callbacks) {\n    if (mainFile === null || mainFile.file === null || mainFile.file.content === null) {\n      let error = new ImportError(ImportErrorCode.FailedToLoadFile);\n\n      if (mainFile !== null && mainFile.file !== null) {\n        error.mainFile = mainFile.file.name;\n      }\n\n      callbacks.onImportError(error);\n      return;\n    }\n\n    this.model = null;\n    this.usedFiles = [];\n    this.missingFiles = [];\n    this.usedFiles.push(mainFile.file.name);\n    let importer = mainFile.importer;\n    let fileAccessor = new ImporterFileAccessor(fileName => {\n      let fileBuffer = null;\n      let file = this.fileList.FindFileByPath(fileName);\n\n      if (file === null || file.content === null) {\n        this.missingFiles.push(fileName);\n        fileBuffer = null;\n      } else {\n        this.usedFiles.push(fileName);\n        fileBuffer = file.content;\n      }\n\n      return fileBuffer;\n    });\n    importer.Import(mainFile.file.name, mainFile.file.extension, mainFile.file.content, {\n      getDefaultMaterialColor: () => {\n        return settings.defaultColor;\n      },\n      getFileBuffer: filePath => {\n        return fileAccessor.GetFileBuffer(filePath);\n      },\n      onSuccess: () => {\n        this.model = importer.GetModel();\n        let result = new ImportResult();\n        result.mainFile = mainFile.file.name;\n        result.model = this.model;\n        result.usedFiles = this.usedFiles;\n        result.missingFiles = this.missingFiles;\n        result.upVector = importer.GetUpDirection();\n        callbacks.onImportSuccess(result);\n      },\n      onError: () => {\n        let error = new ImportError(ImportErrorCode.ImportFailed);\n        error.mainFile = mainFile.file.name;\n        error.message = importer.GetErrorMessage();\n        callbacks.onImportError(error);\n      },\n      onComplete: () => {\n        importer.Clear();\n      }\n    });\n  }\n\n  DecompressArchives(fileList, onReady) {\n    let files = fileList.GetFiles();\n    let archives = [];\n\n    for (let file of files) {\n      if (file.extension === 'zip') {\n        archives.push(file);\n      }\n    }\n\n    if (archives.length === 0) {\n      onReady();\n      return;\n    }\n\n    for (let i = 0; i < archives.length; i++) {\n      const archiveFile = archives[i];\n      const archiveBuffer = new Uint8Array(archiveFile.content);\n      const decompressed = fflate.unzipSync(archiveBuffer);\n\n      for (const fileName in decompressed) {\n        if (Object.prototype.hasOwnProperty.call(decompressed, fileName)) {\n          let file = new ImporterFile(fileName, FileSource.Decompressed, null);\n          file.SetContent(decompressed[fileName].buffer);\n          fileList.AddFile(file);\n        }\n      }\n    }\n\n    onReady();\n  }\n\n  GetFileList() {\n    return this.fileList;\n  }\n\n  HasImportableFile(fileList) {\n    let importableFiles = this.GetImportableFiles(fileList);\n    return importableFiles.length > 0;\n  }\n\n  GetImportableFiles(fileList) {\n    function FindImporter(file, importers) {\n      for (let importerIndex = 0; importerIndex < importers.length; importerIndex++) {\n        let importer = importers[importerIndex];\n\n        if (importer.CanImportExtension(file.extension)) {\n          return importer;\n        }\n      }\n\n      return null;\n    }\n\n    let importableFiles = [];\n    let files = fileList.GetFiles();\n\n    for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {\n      let file = files[fileIndex];\n      let importer = FindImporter(file, this.importers);\n\n      if (importer !== null) {\n        importableFiles.push({\n          file: file,\n          importer: importer\n        });\n      }\n    }\n\n    return importableFiles;\n  }\n\n}","map":{"version":3,"names":["RunTaskAsync","FileSource","GetFileName","RGBColor","ImporterFile","ImporterFileList","Importer3dm","Importer3ds","ImporterGltf","ImporterIfc","ImporterO3dv","ImporterObj","ImporterOff","ImporterPly","ImporterOcct","ImporterStl","ImporterBim","ImporterThree3mf","ImporterThreeDae","ImporterThreeFbx","ImporterThreeWrl","fflate","ImportSettings","constructor","defaultColor","ImportErrorCode","NoImportableFile","FailedToLoadFile","ImportFailed","UnknownError","ImportError","code","mainFile","message","ImportResult","model","upVector","usedFiles","missingFiles","ImporterFileAccessor","getBufferCallback","fileBuffers","Map","GetFileBuffer","filePath","fileName","has","get","buffer","set","Importer","importers","fileList","AddImporter","importer","push","ImportFiles","inputFiles","settings","callbacks","onLoadStart","LoadFiles","onReady","onImportStart","DecompressArchives","ImportLoadedFiles","onFileListProgress","onFileLoadProgress","newFileList","FillFromInputFiles","reset","HasImportableFile","foundMissingFile","i","length","missingFile","ContainsFileByPath","ExtendFromFileList","GetContent","importableFiles","GetImportableFiles","onImportError","onSelectMainFile","ImportLoadedMainFile","fileNames","map","importableFile","file","name","mainFileIndex","content","error","fileAccessor","fileBuffer","FindFileByPath","Import","extension","getDefaultMaterialColor","getFileBuffer","onSuccess","GetModel","result","GetUpDirection","onImportSuccess","onError","GetErrorMessage","onComplete","Clear","files","GetFiles","archives","archiveFile","archiveBuffer","Uint8Array","decompressed","unzipSync","Object","prototype","hasOwnProperty","call","Decompressed","SetContent","AddFile","GetFileList","FindImporter","importerIndex","CanImportExtension","fileIndex"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importer.js"],"sourcesContent":["import { RunTaskAsync } from '../core/taskrunner.js';\r\nimport { FileSource, GetFileName } from '../io/fileutils.js';\r\nimport { RGBColor } from '../model/color.js';\r\nimport { ImporterFile, ImporterFileList } from './importerfiles.js';\r\nimport { Importer3dm } from './importer3dm.js';\r\nimport { Importer3ds } from './importer3ds.js';\r\nimport { ImporterGltf } from './importergltf.js';\r\nimport { ImporterIfc } from './importerifc.js';\r\nimport { ImporterO3dv } from './importero3dv.js';\r\nimport { ImporterObj } from './importerobj.js';\r\nimport { ImporterOff } from './importeroff.js';\r\nimport { ImporterPly } from './importerply.js';\r\nimport { ImporterOcct } from './importerocct.js';\r\nimport { ImporterStl } from './importerstl.js';\r\nimport { ImporterBim } from './importerbim.js';\r\nimport { ImporterThree3mf, ImporterThreeDae, ImporterThreeFbx, ImporterThreeWrl } from './importerthree.js';\r\n\r\nimport * as fflate from 'fflate';\r\n\r\nexport class ImportSettings\r\n{\r\n    constructor ()\r\n    {\r\n        this.defaultColor = new RGBColor (200, 200, 200);\r\n    }\r\n}\r\n\r\nexport const ImportErrorCode =\r\n{\r\n    NoImportableFile : 1,\r\n    FailedToLoadFile : 2,\r\n    ImportFailed : 3,\r\n    UnknownError : 4\r\n};\r\n\r\nexport class ImportError\r\n{\r\n    constructor (code)\r\n    {\r\n        this.code = code;\r\n        this.mainFile = null;\r\n        this.message = null;\r\n    }\r\n}\r\n\r\nexport class ImportResult\r\n{\r\n    constructor ()\r\n    {\r\n        this.model = null;\r\n        this.mainFile = null;\r\n        this.upVector = null;\r\n        this.usedFiles = null;\r\n        this.missingFiles = null;\r\n    }\r\n}\r\n\r\nexport class ImporterFileAccessor\r\n{\r\n    constructor (getBufferCallback)\r\n    {\r\n        this.getBufferCallback = getBufferCallback;\r\n        this.fileBuffers = new Map ();\r\n    }\r\n\r\n    GetFileBuffer (filePath)\r\n    {\r\n        let fileName = GetFileName (filePath);\r\n        if (this.fileBuffers.has (fileName)) {\r\n            return this.fileBuffers.get (fileName);\r\n        }\r\n        let buffer = this.getBufferCallback (fileName);\r\n        this.fileBuffers.set (fileName, buffer);\r\n        return buffer;\r\n    }\r\n}\r\n\r\nexport class Importer\r\n{\r\n    constructor ()\r\n    {\r\n        this.importers = [\r\n            new ImporterObj (),\r\n            new ImporterStl (),\r\n            new ImporterOff (),\r\n            new ImporterPly (),\r\n            new Importer3ds (),\r\n            new ImporterGltf (),\r\n            new ImporterO3dv (),\r\n            new ImporterBim (),\r\n            new Importer3dm (),\r\n            new ImporterIfc (),\r\n            new ImporterOcct (),\r\n            new ImporterThreeFbx (),\r\n            new ImporterThreeDae (),\r\n            new ImporterThreeWrl (),\r\n            new ImporterThree3mf ()\r\n        ];\r\n        this.fileList = new ImporterFileList ();\r\n        this.model = null;\r\n        this.usedFiles = [];\r\n        this.missingFiles = [];\r\n    }\r\n\r\n\tAddImporter (importer)\r\n\t{\r\n\t\tthis.importers.push (importer);\r\n\t}\r\n\r\n    ImportFiles (inputFiles, settings, callbacks)\r\n    {\r\n        callbacks.onLoadStart ();\r\n        this.LoadFiles (inputFiles, {\r\n            onReady : () => {\r\n                callbacks.onImportStart ();\r\n                RunTaskAsync (() => {\r\n                    this.DecompressArchives (this.fileList, () => {\r\n                        this.ImportLoadedFiles (settings, callbacks);\r\n                    });\r\n                });\r\n            },\r\n            onFileListProgress : callbacks.onFileListProgress,\r\n            onFileLoadProgress : callbacks.onFileLoadProgress\r\n        });\r\n    }\r\n\r\n    LoadFiles (inputFiles, callbacks)\r\n    {\r\n        let newFileList = new ImporterFileList ();\r\n        newFileList.FillFromInputFiles (inputFiles);\r\n\r\n        let reset = false;\r\n        if (this.HasImportableFile (newFileList)) {\r\n            reset = true;\r\n        } else {\r\n            let foundMissingFile = false;\r\n            for (let i = 0; i < this.missingFiles.length; i++) {\r\n                let missingFile = this.missingFiles[i];\r\n                if (newFileList.ContainsFileByPath (missingFile)) {\r\n                    foundMissingFile = true;\r\n                }\r\n            }\r\n            if (!foundMissingFile) {\r\n                reset = true;\r\n            } else {\r\n                this.fileList.ExtendFromFileList (newFileList);\r\n                reset = false;\r\n            }\r\n        }\r\n        if (reset) {\r\n            this.fileList = newFileList;\r\n        }\r\n        this.fileList.GetContent ({\r\n            onReady : callbacks.onReady,\r\n            onFileListProgress : callbacks.onFileListProgress,\r\n            onFileLoadProgress : callbacks.onFileLoadProgress\r\n        });\r\n    }\r\n\r\n    ImportLoadedFiles (settings, callbacks)\r\n    {\r\n        let importableFiles = this.GetImportableFiles (this.fileList);\r\n        if (importableFiles.length === 0) {\r\n            callbacks.onImportError (new ImportError (ImportErrorCode.NoImportableFile));\r\n            return;\r\n        }\r\n\r\n        if (importableFiles.length === 1 || !callbacks.onSelectMainFile) {\r\n            let mainFile = importableFiles[0];\r\n            this.ImportLoadedMainFile (mainFile, settings, callbacks);\r\n        } else {\r\n            let fileNames = importableFiles.map (importableFile => importableFile.file.name);\r\n            callbacks.onSelectMainFile (fileNames, (mainFileIndex) => {\r\n                if (mainFileIndex === null) {\r\n                    callbacks.onImportError (new ImportError (ImportErrorCode.NoImportableFile));\r\n                    return;\r\n                }\r\n                RunTaskAsync (() => {\r\n                    let mainFile = importableFiles[mainFileIndex];\r\n                    this.ImportLoadedMainFile (mainFile, settings, callbacks);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    ImportLoadedMainFile (mainFile, settings, callbacks)\r\n    {\r\n        if (mainFile === null || mainFile.file === null || mainFile.file.content === null) {\r\n            let error = new ImportError (ImportErrorCode.FailedToLoadFile);\r\n            if (mainFile !== null && mainFile.file !== null) {\r\n                error.mainFile = mainFile.file.name;\r\n            }\r\n            callbacks.onImportError (error);\r\n            return;\r\n        }\r\n\r\n        this.model = null;\r\n        this.usedFiles = [];\r\n        this.missingFiles = [];\r\n        this.usedFiles.push (mainFile.file.name);\r\n\r\n        let importer = mainFile.importer;\r\n        let fileAccessor = new ImporterFileAccessor ((fileName) => {\r\n            let fileBuffer = null;\r\n            let file = this.fileList.FindFileByPath (fileName);\r\n            if (file === null || file.content === null) {\r\n                this.missingFiles.push (fileName);\r\n                fileBuffer = null;\r\n            } else {\r\n                this.usedFiles.push (fileName);\r\n                fileBuffer = file.content;\r\n            }\r\n            return fileBuffer;\r\n        });\r\n\r\n        importer.Import (mainFile.file.name, mainFile.file.extension, mainFile.file.content, {\r\n            getDefaultMaterialColor : () => {\r\n                return settings.defaultColor;\r\n            },\r\n            getFileBuffer : (filePath) => {\r\n                return fileAccessor.GetFileBuffer (filePath);\r\n            },\r\n            onSuccess : () => {\r\n                this.model = importer.GetModel ();\r\n                let result = new ImportResult ();\r\n                result.mainFile = mainFile.file.name;\r\n                result.model = this.model;\r\n                result.usedFiles = this.usedFiles;\r\n                result.missingFiles = this.missingFiles;\r\n                result.upVector = importer.GetUpDirection ();\r\n                callbacks.onImportSuccess (result);\r\n            },\r\n            onError : () => {\r\n                let error = new ImportError (ImportErrorCode.ImportFailed);\r\n                error.mainFile = mainFile.file.name;\r\n                error.message = importer.GetErrorMessage ();\r\n                callbacks.onImportError (error);\r\n            },\r\n            onComplete : () => {\r\n                importer.Clear ();\r\n            }\r\n        });\r\n    }\r\n\r\n    DecompressArchives (fileList, onReady)\r\n    {\r\n        let files = fileList.GetFiles ();\r\n        let archives = [];\r\n        for (let file of files) {\r\n            if (file.extension === 'zip') {\r\n                archives.push (file);\r\n            }\r\n        }\r\n        if (archives.length === 0) {\r\n            onReady ();\r\n            return;\r\n        }\r\n        for (let i = 0; i < archives.length; i++) {\r\n            const archiveFile = archives[i];\r\n            const archiveBuffer = new Uint8Array (archiveFile.content);\r\n            const decompressed = fflate.unzipSync (archiveBuffer);\r\n            for (const fileName in decompressed) {\r\n                if (Object.prototype.hasOwnProperty.call (decompressed, fileName)) {\r\n                    let file = new ImporterFile (fileName, FileSource.Decompressed, null);\r\n                    file.SetContent (decompressed[fileName].buffer);\r\n                    fileList.AddFile (file);\r\n                }\r\n            }\r\n        }\r\n        onReady ();\r\n    }\r\n\r\n    GetFileList ()\r\n    {\r\n        return this.fileList;\r\n    }\r\n\r\n    HasImportableFile (fileList)\r\n    {\r\n        let importableFiles = this.GetImportableFiles (fileList);\r\n        return importableFiles.length > 0;\r\n    }\r\n\r\n    GetImportableFiles (fileList)\r\n    {\r\n        function FindImporter (file, importers)\r\n        {\r\n            for (let importerIndex = 0; importerIndex < importers.length; importerIndex++) {\r\n                let importer = importers[importerIndex];\r\n                if (importer.CanImportExtension (file.extension)) {\r\n                    return importer;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        let importableFiles = [];\r\n        let files = fileList.GetFiles ();\r\n        for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {\r\n            let file = files[fileIndex];\r\n            let importer = FindImporter (file, this.importers);\r\n            if (importer !== null) {\r\n                importableFiles.push ({\r\n                    file : file,\r\n                    importer : importer\r\n                });\r\n            }\r\n        }\r\n        return importableFiles;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}