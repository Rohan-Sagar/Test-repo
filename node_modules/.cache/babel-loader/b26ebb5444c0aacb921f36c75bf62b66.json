{"ast":null,"code":"import { TransformMesh } from './meshutils.js';\nimport { ModelObject3D } from './object.js';\nexport class MeshInstanceId {\n  constructor(nodeId, meshIndex) {\n    this.nodeId = nodeId;\n    this.meshIndex = meshIndex;\n  }\n\n  IsEqual(rhs) {\n    return this.nodeId === rhs.nodeId && this.meshIndex === rhs.meshIndex;\n  }\n\n  GetKey() {\n    return this.nodeId.toString() + ':' + this.meshIndex.toString();\n  }\n\n}\nexport class MeshInstance extends ModelObject3D {\n  constructor(id, node, mesh) {\n    super();\n    this.id = id;\n    this.node = node;\n    this.mesh = mesh;\n  }\n\n  GetId() {\n    return this.id;\n  }\n\n  GetTransformation() {\n    return this.node.GetWorldTransformation();\n  }\n\n  GetMesh() {\n    return this.mesh;\n  }\n\n  VertexCount() {\n    return this.mesh.VertexCount();\n  }\n\n  VertexColorCount() {\n    return this.mesh.VertexColorCount();\n  }\n\n  NormalCount() {\n    return this.mesh.NormalCount();\n  }\n\n  TextureUVCount() {\n    return this.mesh.TextureUVCount();\n  }\n\n  TriangleCount() {\n    return this.mesh.TriangleCount();\n  }\n\n  EnumerateVertices(onVertex) {\n    let transformation = this.node.GetWorldTransformation();\n\n    if (transformation.IsIdentity()) {\n      this.mesh.EnumerateVertices(onVertex);\n    } else {\n      this.mesh.EnumerateVertices(vertex => {\n        const transformed = transformation.TransformCoord3D(vertex);\n        onVertex(transformed);\n      });\n    }\n  }\n\n  EnumerateTriangleVertexIndices(onTriangleVertexIndices) {\n    this.mesh.EnumerateTriangleVertexIndices(onTriangleVertexIndices);\n  }\n\n  EnumerateTriangleVertices(onTriangleVertices) {\n    let transformation = this.node.GetWorldTransformation();\n\n    if (transformation.IsIdentity()) {\n      this.mesh.EnumerateTriangleVertices(onTriangleVertices);\n    } else {\n      this.mesh.EnumerateTriangleVertices((v0, v1, v2) => {\n        const v0Transformed = transformation.TransformCoord3D(v0);\n        const v1Transformed = transformation.TransformCoord3D(v1);\n        const v2Transformed = transformation.TransformCoord3D(v2);\n        onTriangleVertices(v0Transformed, v1Transformed, v2Transformed);\n      });\n    }\n  }\n\n  PropertyGroupCount() {\n    return this.mesh.PropertyGroupCount();\n  }\n\n  AddPropertyGroup(propertyGroup) {\n    return this.mesh.AddPropertyGroup(propertyGroup);\n  }\n\n  GetPropertyGroup(index) {\n    return this.mesh.GetPropertyGroup(index);\n  }\n\n  GetTransformedMesh() {\n    let transformation = this.node.GetWorldTransformation();\n    let transformed = this.mesh.Clone();\n    TransformMesh(transformed, transformation);\n    return transformed;\n  }\n\n}","map":{"version":3,"names":["TransformMesh","ModelObject3D","MeshInstanceId","constructor","nodeId","meshIndex","IsEqual","rhs","GetKey","toString","MeshInstance","id","node","mesh","GetId","GetTransformation","GetWorldTransformation","GetMesh","VertexCount","VertexColorCount","NormalCount","TextureUVCount","TriangleCount","EnumerateVertices","onVertex","transformation","IsIdentity","vertex","transformed","TransformCoord3D","EnumerateTriangleVertexIndices","onTriangleVertexIndices","EnumerateTriangleVertices","onTriangleVertices","v0","v1","v2","v0Transformed","v1Transformed","v2Transformed","PropertyGroupCount","AddPropertyGroup","propertyGroup","GetPropertyGroup","index","GetTransformedMesh","Clone"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/meshinstance.js"],"sourcesContent":["import { TransformMesh } from './meshutils.js';\r\nimport { ModelObject3D } from './object.js';\r\n\r\nexport class MeshInstanceId\r\n{\r\n    constructor (nodeId, meshIndex)\r\n    {\r\n        this.nodeId = nodeId;\r\n        this.meshIndex = meshIndex;\r\n    }\r\n\r\n    IsEqual (rhs)\r\n    {\r\n        return this.nodeId === rhs.nodeId && this.meshIndex === rhs.meshIndex;\r\n    }\r\n\r\n    GetKey ()\r\n    {\r\n        return this.nodeId.toString () + ':' + this.meshIndex.toString ();\r\n    }\r\n}\r\n\r\nexport class MeshInstance extends ModelObject3D\r\n{\r\n    constructor (id, node, mesh)\r\n    {\r\n        super ();\r\n        this.id = id;\r\n        this.node = node;\r\n        this.mesh = mesh;\r\n    }\r\n\r\n    GetId ()\r\n    {\r\n        return this.id;\r\n    }\r\n\r\n    GetTransformation ()\r\n    {\r\n        return this.node.GetWorldTransformation ();\r\n    }\r\n\r\n    GetMesh ()\r\n    {\r\n        return this.mesh;\r\n    }\r\n\r\n    VertexCount ()\r\n    {\r\n        return this.mesh.VertexCount ();\r\n    }\r\n\r\n    VertexColorCount ()\r\n    {\r\n        return this.mesh.VertexColorCount ();\r\n    }\r\n\r\n    NormalCount ()\r\n    {\r\n        return this.mesh.NormalCount ();\r\n    }\r\n\r\n    TextureUVCount ()\r\n    {\r\n        return this.mesh.TextureUVCount ();\r\n    }\r\n\r\n    TriangleCount ()\r\n    {\r\n        return this.mesh.TriangleCount ();\r\n    }\r\n\r\n    EnumerateVertices (onVertex)\r\n    {\r\n        let transformation = this.node.GetWorldTransformation ();\r\n        if (transformation.IsIdentity ()) {\r\n            this.mesh.EnumerateVertices (onVertex);\r\n        } else {\r\n            this.mesh.EnumerateVertices ((vertex) => {\r\n                const transformed = transformation.TransformCoord3D (vertex);\r\n                onVertex (transformed);\r\n            });\r\n        }\r\n    }\r\n\r\n    EnumerateTriangleVertexIndices (onTriangleVertexIndices)\r\n    {\r\n        this.mesh.EnumerateTriangleVertexIndices (onTriangleVertexIndices);\r\n    }\r\n\r\n    EnumerateTriangleVertices (onTriangleVertices)\r\n    {\r\n        let transformation = this.node.GetWorldTransformation ();\r\n        if (transformation.IsIdentity ()) {\r\n            this.mesh.EnumerateTriangleVertices (onTriangleVertices);\r\n        } else {\r\n            this.mesh.EnumerateTriangleVertices ((v0, v1, v2) => {\r\n                const v0Transformed = transformation.TransformCoord3D (v0);\r\n                const v1Transformed = transformation.TransformCoord3D (v1);\r\n                const v2Transformed = transformation.TransformCoord3D (v2);\r\n                onTriangleVertices (v0Transformed, v1Transformed, v2Transformed);\r\n            });\r\n        }\r\n    }\r\n\r\n    PropertyGroupCount ()\r\n    {\r\n        return this.mesh.PropertyGroupCount ();\r\n    }\r\n\r\n    AddPropertyGroup (propertyGroup)\r\n    {\r\n        return this.mesh.AddPropertyGroup (propertyGroup);\r\n    }\r\n\r\n    GetPropertyGroup (index)\r\n    {\r\n        return this.mesh.GetPropertyGroup (index);\r\n    }\r\n\r\n    GetTransformedMesh ()\r\n    {\r\n        let transformation = this.node.GetWorldTransformation ();\r\n        let transformed = this.mesh.Clone ();\r\n        TransformMesh (transformed, transformation);\r\n        return transformed;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}