{"ast":null,"code":"import { CopyObjectAttributes } from '../core/core.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { CalculateTriangleNormal, TransformMesh } from '../model/meshutils.js';\nexport class ExporterSettings {\n  constructor(settings) {\n    this.transformation = new Transformation();\n\n    this.isMeshVisible = meshInstanceId => {\n      return true;\n    };\n\n    CopyObjectAttributes(settings, this);\n  }\n\n}\nexport class ExporterModel {\n  constructor(model, settings) {\n    this.model = model;\n    this.settings = settings || new ExporterSettings();\n  }\n\n  GetModel() {\n    return this.model;\n  }\n\n  MaterialCount() {\n    return this.model.MaterialCount();\n  }\n\n  GetMaterial(index) {\n    return this.model.GetMaterial(index);\n  }\n\n  VertexCount() {\n    let vertexCount = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      vertexCount += meshInstance.VertexCount();\n    });\n    return vertexCount;\n  }\n\n  TriangleCount() {\n    let triangleCount = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      triangleCount += meshInstance.TriangleCount();\n    });\n    return triangleCount;\n  }\n\n  MeshInstanceCount() {\n    let meshInstanceCount = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      meshInstanceCount += 1;\n    });\n    return meshInstanceCount;\n  }\n\n  EnumerateMeshInstances(onMeshInstance) {\n    this.model.EnumerateMeshInstances(meshInstance => {\n      if (this.settings.isMeshVisible(meshInstance.GetId())) {\n        onMeshInstance(meshInstance);\n      }\n    });\n  }\n\n  EnumerateTransformedMeshes(onMesh) {\n    this.EnumerateMeshInstances(meshInstance => {\n      let transformation = meshInstance.GetTransformation();\n\n      if (!this.settings.transformation.IsIdentity()) {\n        transformation.Append(this.settings.transformation);\n      }\n\n      let mesh = meshInstance.GetMesh();\n      let transformed = mesh.Clone();\n\n      if (!transformation.IsIdentity()) {\n        TransformMesh(transformed, transformation);\n      }\n\n      onMesh(transformed);\n    });\n  }\n\n  EnumerateVerticesAndTriangles(callbacks) {\n    let transformedMeshes = [];\n    this.EnumerateTransformedMeshes(mesh => {\n      transformedMeshes.push(mesh);\n    });\n\n    for (let mesh of transformedMeshes) {\n      mesh.EnumerateVertices(vertex => {\n        callbacks.onVertex(vertex.x, vertex.y, vertex.z);\n      });\n    }\n\n    let vertexOffset = 0;\n\n    for (let mesh of transformedMeshes) {\n      mesh.EnumerateTriangleVertexIndices((v0, v1, v2) => {\n        callbacks.onTriangle(v0 + vertexOffset, v1 + vertexOffset, v2 + vertexOffset);\n      });\n      vertexOffset += mesh.VertexCount();\n    }\n  }\n\n  EnumerateTrianglesWithNormals(onTriangle) {\n    this.EnumerateTransformedMeshes(mesh => {\n      mesh.EnumerateTriangleVertices((v0, v1, v2) => {\n        let normal = CalculateTriangleNormal(v0, v1, v2);\n        onTriangle(v0, v1, v2, normal);\n      });\n    });\n  }\n\n}","map":{"version":3,"names":["CopyObjectAttributes","Transformation","CalculateTriangleNormal","TransformMesh","ExporterSettings","constructor","settings","transformation","isMeshVisible","meshInstanceId","ExporterModel","model","GetModel","MaterialCount","GetMaterial","index","VertexCount","vertexCount","EnumerateMeshInstances","meshInstance","TriangleCount","triangleCount","MeshInstanceCount","meshInstanceCount","onMeshInstance","GetId","EnumerateTransformedMeshes","onMesh","GetTransformation","IsIdentity","Append","mesh","GetMesh","transformed","Clone","EnumerateVerticesAndTriangles","callbacks","transformedMeshes","push","EnumerateVertices","vertex","onVertex","x","y","z","vertexOffset","EnumerateTriangleVertexIndices","v0","v1","v2","onTriangle","EnumerateTrianglesWithNormals","EnumerateTriangleVertices","normal"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/export/exportermodel.js"],"sourcesContent":["import { CopyObjectAttributes } from '../core/core.js';\r\nimport { Transformation } from '../geometry/transformation.js';\r\nimport { CalculateTriangleNormal, TransformMesh } from '../model/meshutils.js';\r\n\r\nexport class ExporterSettings\r\n{\r\n    constructor (settings)\r\n    {\r\n        this.transformation = new Transformation ();\r\n        this.isMeshVisible = (meshInstanceId) => {\r\n            return true;\r\n        };\r\n\r\n        CopyObjectAttributes (settings, this);\r\n    }\r\n}\r\n\r\nexport class ExporterModel\r\n{\r\n    constructor (model, settings)\r\n    {\r\n        this.model = model;\r\n        this.settings = settings || new ExporterSettings ();\r\n    }\r\n\r\n    GetModel ()\r\n    {\r\n        return this.model;\r\n    }\r\n\r\n    MaterialCount ()\r\n    {\r\n        return this.model.MaterialCount ();\r\n    }\r\n\r\n    GetMaterial (index)\r\n    {\r\n        return this.model.GetMaterial (index);\r\n    }\r\n\r\n    VertexCount ()\r\n    {\r\n        let vertexCount = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            vertexCount += meshInstance.VertexCount ();\r\n        });\r\n        return vertexCount;\r\n    }\r\n\r\n    TriangleCount ()\r\n    {\r\n        let triangleCount = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            triangleCount += meshInstance.TriangleCount ();\r\n        });\r\n        return triangleCount;\r\n    }\r\n\r\n    MeshInstanceCount ()\r\n    {\r\n        let meshInstanceCount = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            meshInstanceCount += 1;\r\n        });\r\n        return meshInstanceCount;\r\n    }\r\n\r\n    EnumerateMeshInstances (onMeshInstance)\r\n    {\r\n        this.model.EnumerateMeshInstances ((meshInstance) => {\r\n            if (this.settings.isMeshVisible (meshInstance.GetId ())) {\r\n                onMeshInstance (meshInstance);\r\n            }\r\n        });\r\n    }\r\n\r\n    EnumerateTransformedMeshes (onMesh)\r\n    {\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            let transformation = meshInstance.GetTransformation ();\r\n            if (!this.settings.transformation.IsIdentity ()) {\r\n                transformation.Append (this.settings.transformation);\r\n            }\r\n\r\n            let mesh = meshInstance.GetMesh ();\r\n            let transformed = mesh.Clone ();\r\n            if (!transformation.IsIdentity ()) {\r\n                TransformMesh (transformed, transformation);\r\n            }\r\n\r\n            onMesh (transformed);\r\n        });\r\n    }\r\n\r\n    EnumerateVerticesAndTriangles (callbacks)\r\n    {\r\n        let transformedMeshes = [];\r\n        this.EnumerateTransformedMeshes ((mesh) => {\r\n            transformedMeshes.push (mesh);\r\n        });\r\n\r\n        for (let mesh of transformedMeshes) {\r\n            mesh.EnumerateVertices ((vertex) => {\r\n                callbacks.onVertex (vertex.x, vertex.y, vertex.z);\r\n            });\r\n        }\r\n\r\n        let vertexOffset = 0;\r\n        for (let mesh of transformedMeshes) {\r\n            mesh.EnumerateTriangleVertexIndices ((v0, v1, v2) => {\r\n                callbacks.onTriangle (v0 + vertexOffset, v1 + vertexOffset, v2 + vertexOffset);\r\n            });\r\n            vertexOffset += mesh.VertexCount ();\r\n        }\r\n    }\r\n\r\n    EnumerateTrianglesWithNormals (onTriangle)\r\n    {\r\n        this.EnumerateTransformedMeshes ((mesh) => {\r\n            mesh.EnumerateTriangleVertices ((v0, v1, v2) => {\r\n                let normal = CalculateTriangleNormal (v0, v1, v2);\r\n                onTriangle (v0, v1, v2, normal);\r\n            });\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}