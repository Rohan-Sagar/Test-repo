{"ast":null,"code":"import { Direction } from '../geometry/geometry.js';\nimport { Importer } from '../import/importer.js';\nimport { RevokeObjectUrl } from '../io/bufferutils.js';\nimport { ConvertModelToThreeObject, ModelToThreeConversionOutput, ModelToThreeConversionParams } from './threeconverter.js';\nimport { ConvertColorToThreeColor, HasHighpDriverIssue } from './threeutils.js';\nimport * as THREE from 'three';\nexport class ThreeModelLoader {\n  constructor() {\n    this.importer = new Importer();\n    this.inProgress = false;\n    this.defaultMaterial = null;\n    this.objectUrls = null;\n    this.hasHighpDriverIssue = HasHighpDriverIssue();\n  }\n\n  InProgress() {\n    return this.inProgress;\n  }\n\n  LoadModel(inputFiles, settings, callbacks) {\n    if (this.inProgress) {\n      return;\n    }\n\n    this.inProgress = true;\n    this.RevokeObjectUrls();\n    this.importer.ImportFiles(inputFiles, settings, {\n      onLoadStart: () => {\n        callbacks.onLoadStart();\n      },\n      onFileListProgress: (current, total) => {\n        callbacks.onFileListProgress(current, total);\n      },\n      onFileLoadProgress: (current, total) => {\n        callbacks.onFileLoadProgress(current, total);\n      },\n      onImportStart: () => {\n        callbacks.onImportStart();\n      },\n      onSelectMainFile: (fileNames, selectFile) => {\n        if (!callbacks.onSelectMainFile) {\n          selectFile(0);\n        } else {\n          callbacks.onSelectMainFile(fileNames, selectFile);\n        }\n      },\n      onImportSuccess: importResult => {\n        callbacks.onVisualizationStart();\n        let params = new ModelToThreeConversionParams();\n        params.forceMediumpForMaterials = this.hasHighpDriverIssue;\n        let output = new ModelToThreeConversionOutput();\n        ConvertModelToThreeObject(importResult.model, params, output, {\n          onTextureLoaded: () => {\n            callbacks.onTextureLoaded();\n          },\n          onModelLoaded: threeObject => {\n            this.defaultMaterial = output.defaultMaterial;\n            this.objectUrls = output.objectUrls;\n\n            if (importResult.upVector === Direction.X) {\n              let rotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0.0, 0.0, 1.0), Math.PI / 2.0);\n              threeObject.quaternion.multiply(rotation);\n            } else if (importResult.upVector === Direction.Z) {\n              let rotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1.0, 0.0, 0.0), -Math.PI / 2.0);\n              threeObject.quaternion.multiply(rotation);\n            }\n\n            callbacks.onModelFinished(importResult, threeObject);\n            this.inProgress = false;\n          }\n        });\n      },\n      onImportError: importError => {\n        callbacks.onLoadError(importError);\n        this.inProgress = false;\n      }\n    });\n  }\n\n  GetImporter() {\n    return this.importer;\n  }\n\n  GetDefaultMaterial() {\n    return this.defaultMaterial;\n  }\n\n  ReplaceDefaultMaterialColor(defaultColor) {\n    if (this.defaultMaterial !== null && !this.defaultMaterial.vertexColors) {\n      this.defaultMaterial.color = ConvertColorToThreeColor(defaultColor);\n    }\n  }\n\n  RevokeObjectUrls() {\n    if (this.objectUrls === null) {\n      return;\n    }\n\n    for (let objectUrl of this.objectUrls) {\n      RevokeObjectUrl(objectUrl);\n    }\n\n    this.objectUrls = null;\n  }\n\n}","map":{"version":3,"names":["Direction","Importer","RevokeObjectUrl","ConvertModelToThreeObject","ModelToThreeConversionOutput","ModelToThreeConversionParams","ConvertColorToThreeColor","HasHighpDriverIssue","THREE","ThreeModelLoader","constructor","importer","inProgress","defaultMaterial","objectUrls","hasHighpDriverIssue","InProgress","LoadModel","inputFiles","settings","callbacks","RevokeObjectUrls","ImportFiles","onLoadStart","onFileListProgress","current","total","onFileLoadProgress","onImportStart","onSelectMainFile","fileNames","selectFile","onImportSuccess","importResult","onVisualizationStart","params","forceMediumpForMaterials","output","model","onTextureLoaded","onModelLoaded","threeObject","upVector","X","rotation","Quaternion","setFromAxisAngle","Vector3","Math","PI","quaternion","multiply","Z","onModelFinished","onImportError","importError","onLoadError","GetImporter","GetDefaultMaterial","ReplaceDefaultMaterialColor","defaultColor","vertexColors","color","objectUrl"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/threejs/threemodelloader.js"],"sourcesContent":["import { Direction } from '../geometry/geometry.js';\r\nimport { Importer } from '../import/importer.js';\r\nimport { RevokeObjectUrl } from '../io/bufferutils.js';\r\nimport { ConvertModelToThreeObject, ModelToThreeConversionOutput, ModelToThreeConversionParams } from './threeconverter.js';\r\nimport { ConvertColorToThreeColor, HasHighpDriverIssue } from './threeutils.js';\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class ThreeModelLoader\r\n{\r\n    constructor ()\r\n    {\r\n        this.importer = new Importer ();\r\n        this.inProgress = false;\r\n        this.defaultMaterial = null;\r\n        this.objectUrls = null;\r\n        this.hasHighpDriverIssue = HasHighpDriverIssue ();\r\n    }\r\n\r\n    InProgress ()\r\n    {\r\n        return this.inProgress;\r\n    }\r\n\r\n    LoadModel (inputFiles, settings, callbacks)\r\n    {\r\n        if (this.inProgress) {\r\n            return;\r\n        }\r\n\r\n        this.inProgress = true;\r\n        this.RevokeObjectUrls ();\r\n        this.importer.ImportFiles (inputFiles, settings, {\r\n            onLoadStart : () => {\r\n                callbacks.onLoadStart ();\r\n            },\r\n            onFileListProgress : (current, total) => {\r\n                callbacks.onFileListProgress (current, total);\r\n            },\r\n            onFileLoadProgress : (current, total) => {\r\n                callbacks.onFileLoadProgress (current, total);\r\n            },\r\n            onImportStart : () => {\r\n                callbacks.onImportStart ();\r\n            },\r\n            onSelectMainFile : (fileNames, selectFile) => {\r\n                if (!callbacks.onSelectMainFile) {\r\n                    selectFile (0);\r\n                } else {\r\n                    callbacks.onSelectMainFile (fileNames, selectFile);\r\n                }\r\n            },\r\n            onImportSuccess : (importResult) => {\r\n                callbacks.onVisualizationStart ();\r\n                let params = new ModelToThreeConversionParams ();\r\n                params.forceMediumpForMaterials = this.hasHighpDriverIssue;\r\n                let output = new ModelToThreeConversionOutput ();\r\n                ConvertModelToThreeObject (importResult.model, params, output, {\r\n                    onTextureLoaded : () => {\r\n                        callbacks.onTextureLoaded ();\r\n                    },\r\n                    onModelLoaded : (threeObject) => {\r\n                        this.defaultMaterial = output.defaultMaterial;\r\n                        this.objectUrls = output.objectUrls;\r\n                        if (importResult.upVector === Direction.X) {\r\n                            let rotation = new THREE.Quaternion ().setFromAxisAngle (new THREE.Vector3 (0.0, 0.0, 1.0), Math.PI / 2.0);\r\n                            threeObject.quaternion.multiply (rotation);\r\n                        } else if (importResult.upVector === Direction.Z) {\r\n                            let rotation = new THREE.Quaternion ().setFromAxisAngle (new THREE.Vector3 (1.0, 0.0, 0.0), -Math.PI / 2.0);\r\n                            threeObject.quaternion.multiply (rotation);\r\n                        }\r\n                        callbacks.onModelFinished (importResult, threeObject);\r\n                        this.inProgress = false;\r\n                    }\r\n                });\r\n            },\r\n            onImportError : (importError) => {\r\n                callbacks.onLoadError (importError);\r\n                this.inProgress = false;\r\n            }\r\n        });\r\n    }\r\n\r\n    GetImporter ()\r\n    {\r\n        return this.importer;\r\n    }\r\n\r\n    GetDefaultMaterial ()\r\n    {\r\n        return this.defaultMaterial;\r\n    }\r\n\r\n    ReplaceDefaultMaterialColor (defaultColor)\r\n    {\r\n        if (this.defaultMaterial !== null && !this.defaultMaterial.vertexColors) {\r\n            this.defaultMaterial.color = ConvertColorToThreeColor (defaultColor);\r\n        }\r\n    }\r\n\r\n    RevokeObjectUrls ()\r\n    {\r\n        if (this.objectUrls === null) {\r\n            return;\r\n        }\r\n        for (let objectUrl of this.objectUrls) {\r\n            RevokeObjectUrl (objectUrl);\r\n        }\r\n        this.objectUrls = null;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}