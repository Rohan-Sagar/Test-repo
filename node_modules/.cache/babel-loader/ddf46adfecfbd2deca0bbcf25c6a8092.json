{"ast":null,"code":"import { BufferAttribute, BufferGeometry, ClampToEdgeWrapping, Color, FileLoader, Float32BufferAttribute, Group, LinearFilter, LinearMipmapLinearFilter, Loader, LoaderUtils, Matrix4, Mesh, MeshPhongMaterial, MeshStandardMaterial, MirroredRepeatWrapping, NearestFilter, RepeatWrapping, TextureLoader, sRGBEncoding } from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n    this.availableExtensions = [];\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (buffer) {\n      try {\n        onLoad(scope.parse(buffer));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(data) {\n    const scope = this;\n    const textureLoader = new TextureLoader(this.manager);\n\n    function loadDocument(data) {\n      let zip = null;\n      let file = null;\n      let relsName;\n      let modelRelsName;\n      const modelPartNames = [];\n      const texturesPartNames = [];\n      let modelRels;\n      const modelParts = {};\n      const printTicketParts = {};\n      const texturesParts = {};\n\n      try {\n        zip = fflate.unzipSync(new Uint8Array(data)); // eslint-disable-line no-undef\n      } catch (e) {\n        if (e instanceof ReferenceError) {\n          console.error('THREE.3MFLoader: fflate missing and file is compressed.');\n          return null;\n        }\n      }\n\n      for (file in zip) {\n        if (file.match(/\\_rels\\/.rels$/)) {\n          relsName = file;\n        } else if (file.match(/3D\\/_rels\\/.*\\.model\\.rels$/)) {\n          modelRelsName = file;\n        } else if (file.match(/^3D\\/.*\\.model$/)) {\n          modelPartNames.push(file);\n        } else if (file.match(/^3D\\/Textures?\\/.*/)) {\n          texturesPartNames.push(file);\n        }\n      } //\n\n\n      const relsView = zip[relsName];\n      const relsFileText = LoaderUtils.decodeText(relsView);\n      const rels = parseRelsXml(relsFileText); //\n\n      if (modelRelsName) {\n        const relsView = zip[modelRelsName];\n        const relsFileText = LoaderUtils.decodeText(relsView);\n        modelRels = parseRelsXml(relsFileText);\n      } //\n\n\n      for (let i = 0; i < modelPartNames.length; i++) {\n        const modelPart = modelPartNames[i];\n        const view = zip[modelPart];\n        const fileText = LoaderUtils.decodeText(view);\n        const xmlData = new DOMParser().parseFromString(fileText, 'application/xml');\n\n        if (xmlData.documentElement.nodeName.toLowerCase() !== 'model') {\n          console.error('THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart);\n        }\n\n        const modelNode = xmlData.querySelector('model');\n        const extensions = {};\n\n        for (let i = 0; i < modelNode.attributes.length; i++) {\n          const attr = modelNode.attributes[i];\n\n          if (attr.name.match(/^xmlns:(.+)$/)) {\n            extensions[attr.value] = RegExp.$1;\n          }\n        }\n\n        const modelData = parseModelNode(modelNode);\n        modelData['xml'] = modelNode;\n\n        if (0 < Object.keys(extensions).length) {\n          modelData['extensions'] = extensions;\n        }\n\n        modelParts[modelPart] = modelData;\n      } //\n\n\n      for (let i = 0; i < texturesPartNames.length; i++) {\n        const texturesPartName = texturesPartNames[i];\n        texturesParts[texturesPartName] = zip[texturesPartName].buffer;\n      }\n\n      return {\n        rels: rels,\n        modelRels: modelRels,\n        model: modelParts,\n        printTicket: printTicketParts,\n        texture: texturesParts\n      };\n    }\n\n    function parseRelsXml(relsFileText) {\n      const relationships = [];\n      const relsXmlData = new DOMParser().parseFromString(relsFileText, 'application/xml');\n      const relsNodes = relsXmlData.querySelectorAll('Relationship');\n\n      for (let i = 0; i < relsNodes.length; i++) {\n        const relsNode = relsNodes[i];\n        const relationship = {\n          target: relsNode.getAttribute('Target'),\n          //required\n          id: relsNode.getAttribute('Id'),\n          //required\n          type: relsNode.getAttribute('Type') //required\n\n        };\n        relationships.push(relationship);\n      }\n\n      return relationships;\n    }\n\n    function parseMetadataNodes(metadataNodes) {\n      const metadataData = {};\n\n      for (let i = 0; i < metadataNodes.length; i++) {\n        const metadataNode = metadataNodes[i];\n        const name = metadataNode.getAttribute('name');\n        const validNames = ['Title', 'Designer', 'Description', 'Copyright', 'LicenseTerms', 'Rating', 'CreationDate', 'ModificationDate'];\n\n        if (0 <= validNames.indexOf(name)) {\n          metadataData[name] = metadataNode.textContent;\n        }\n      }\n\n      return metadataData;\n    }\n\n    function parseBasematerialsNode(basematerialsNode) {\n      const basematerialsData = {\n        id: basematerialsNode.getAttribute('id'),\n        // required\n        basematerials: []\n      };\n      const basematerialNodes = basematerialsNode.querySelectorAll('base');\n\n      for (let i = 0; i < basematerialNodes.length; i++) {\n        const basematerialNode = basematerialNodes[i];\n        const basematerialData = parseBasematerialNode(basematerialNode);\n        basematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\n        basematerialsData.basematerials.push(basematerialData);\n      }\n\n      return basematerialsData;\n    }\n\n    function parseTexture2DNode(texture2DNode) {\n      const texture2dData = {\n        id: texture2DNode.getAttribute('id'),\n        // required\n        path: texture2DNode.getAttribute('path'),\n        // required\n        contenttype: texture2DNode.getAttribute('contenttype'),\n        // required\n        tilestyleu: texture2DNode.getAttribute('tilestyleu'),\n        tilestylev: texture2DNode.getAttribute('tilestylev'),\n        filter: texture2DNode.getAttribute('filter')\n      };\n      return texture2dData;\n    }\n\n    function parseTextures2DGroupNode(texture2DGroupNode) {\n      const texture2DGroupData = {\n        id: texture2DGroupNode.getAttribute('id'),\n        // required\n        texid: texture2DGroupNode.getAttribute('texid'),\n        // required\n        displaypropertiesid: texture2DGroupNode.getAttribute('displaypropertiesid')\n      };\n      const tex2coordNodes = texture2DGroupNode.querySelectorAll('tex2coord');\n      const uvs = [];\n\n      for (let i = 0; i < tex2coordNodes.length; i++) {\n        const tex2coordNode = tex2coordNodes[i];\n        const u = tex2coordNode.getAttribute('u');\n        const v = tex2coordNode.getAttribute('v');\n        uvs.push(parseFloat(u), parseFloat(v));\n      }\n\n      texture2DGroupData['uvs'] = new Float32Array(uvs);\n      return texture2DGroupData;\n    }\n\n    function parseColorGroupNode(colorGroupNode) {\n      const colorGroupData = {\n        id: colorGroupNode.getAttribute('id'),\n        // required\n        displaypropertiesid: colorGroupNode.getAttribute('displaypropertiesid')\n      };\n      const colorNodes = colorGroupNode.querySelectorAll('color');\n      const colors = [];\n      const colorObject = new Color();\n\n      for (let i = 0; i < colorNodes.length; i++) {\n        const colorNode = colorNodes[i];\n        const color = colorNode.getAttribute('color');\n        colorObject.setStyle(color.substring(0, 7));\n        colorObject.convertSRGBToLinear(); // color is in sRGB\n\n        colors.push(colorObject.r, colorObject.g, colorObject.b);\n      }\n\n      colorGroupData['colors'] = new Float32Array(colors);\n      return colorGroupData;\n    }\n\n    function parseMetallicDisplaypropertiesNode(metallicDisplaypropetiesNode) {\n      const metallicDisplaypropertiesData = {\n        id: metallicDisplaypropetiesNode.getAttribute('id') // required\n\n      };\n      const metallicNodes = metallicDisplaypropetiesNode.querySelectorAll('pbmetallic');\n      const metallicData = [];\n\n      for (let i = 0; i < metallicNodes.length; i++) {\n        const metallicNode = metallicNodes[i];\n        metallicData.push({\n          name: metallicNode.getAttribute('name'),\n          // required\n          metallicness: parseFloat(metallicNode.getAttribute('metallicness')),\n          // required\n          roughness: parseFloat(metallicNode.getAttribute('roughness')) // required\n\n        });\n      }\n\n      metallicDisplaypropertiesData.data = metallicData;\n      return metallicDisplaypropertiesData;\n    }\n\n    function parseBasematerialNode(basematerialNode) {\n      const basematerialData = {};\n      basematerialData['name'] = basematerialNode.getAttribute('name'); // required\n\n      basematerialData['displaycolor'] = basematerialNode.getAttribute('displaycolor'); // required\n\n      basematerialData['displaypropertiesid'] = basematerialNode.getAttribute('displaypropertiesid');\n      return basematerialData;\n    }\n\n    function parseMeshNode(meshNode) {\n      const meshData = {};\n      const vertices = [];\n      const vertexNodes = meshNode.querySelectorAll('vertices vertex');\n\n      for (let i = 0; i < vertexNodes.length; i++) {\n        const vertexNode = vertexNodes[i];\n        const x = vertexNode.getAttribute('x');\n        const y = vertexNode.getAttribute('y');\n        const z = vertexNode.getAttribute('z');\n        vertices.push(parseFloat(x), parseFloat(y), parseFloat(z));\n      }\n\n      meshData['vertices'] = new Float32Array(vertices);\n      const triangleProperties = [];\n      const triangles = [];\n      const triangleNodes = meshNode.querySelectorAll('triangles triangle');\n\n      for (let i = 0; i < triangleNodes.length; i++) {\n        const triangleNode = triangleNodes[i];\n        const v1 = triangleNode.getAttribute('v1');\n        const v2 = triangleNode.getAttribute('v2');\n        const v3 = triangleNode.getAttribute('v3');\n        const p1 = triangleNode.getAttribute('p1');\n        const p2 = triangleNode.getAttribute('p2');\n        const p3 = triangleNode.getAttribute('p3');\n        const pid = triangleNode.getAttribute('pid');\n        const triangleProperty = {};\n        triangleProperty['v1'] = parseInt(v1, 10);\n        triangleProperty['v2'] = parseInt(v2, 10);\n        triangleProperty['v3'] = parseInt(v3, 10);\n        triangles.push(triangleProperty['v1'], triangleProperty['v2'], triangleProperty['v3']); // optional\n\n        if (p1) {\n          triangleProperty['p1'] = parseInt(p1, 10);\n        }\n\n        if (p2) {\n          triangleProperty['p2'] = parseInt(p2, 10);\n        }\n\n        if (p3) {\n          triangleProperty['p3'] = parseInt(p3, 10);\n        }\n\n        if (pid) {\n          triangleProperty['pid'] = pid;\n        }\n\n        if (0 < Object.keys(triangleProperty).length) {\n          triangleProperties.push(triangleProperty);\n        }\n      }\n\n      meshData['triangleProperties'] = triangleProperties;\n      meshData['triangles'] = new Uint32Array(triangles);\n      return meshData;\n    }\n\n    function parseComponentsNode(componentsNode) {\n      const components = [];\n      const componentNodes = componentsNode.querySelectorAll('component');\n\n      for (let i = 0; i < componentNodes.length; i++) {\n        const componentNode = componentNodes[i];\n        const componentData = parseComponentNode(componentNode);\n        components.push(componentData);\n      }\n\n      return components;\n    }\n\n    function parseComponentNode(componentNode) {\n      const componentData = {};\n      componentData['objectId'] = componentNode.getAttribute('objectid'); // required\n\n      const transform = componentNode.getAttribute('transform');\n\n      if (transform) {\n        componentData['transform'] = parseTransform(transform);\n      }\n\n      return componentData;\n    }\n\n    function parseTransform(transform) {\n      const t = [];\n      transform.split(' ').forEach(function (s) {\n        t.push(parseFloat(s));\n      });\n      const matrix = new Matrix4();\n      matrix.set(t[0], t[3], t[6], t[9], t[1], t[4], t[7], t[10], t[2], t[5], t[8], t[11], 0.0, 0.0, 0.0, 1.0);\n      return matrix;\n    }\n\n    function parseObjectNode(objectNode) {\n      const objectData = {\n        type: objectNode.getAttribute('type')\n      };\n      const id = objectNode.getAttribute('id');\n\n      if (id) {\n        objectData['id'] = id;\n      }\n\n      const pid = objectNode.getAttribute('pid');\n\n      if (pid) {\n        objectData['pid'] = pid;\n      }\n\n      const pindex = objectNode.getAttribute('pindex');\n\n      if (pindex) {\n        objectData['pindex'] = pindex;\n      }\n\n      const thumbnail = objectNode.getAttribute('thumbnail');\n\n      if (thumbnail) {\n        objectData['thumbnail'] = thumbnail;\n      }\n\n      const partnumber = objectNode.getAttribute('partnumber');\n\n      if (partnumber) {\n        objectData['partnumber'] = partnumber;\n      }\n\n      const name = objectNode.getAttribute('name');\n\n      if (name) {\n        objectData['name'] = name;\n      }\n\n      const meshNode = objectNode.querySelector('mesh');\n\n      if (meshNode) {\n        objectData['mesh'] = parseMeshNode(meshNode);\n      }\n\n      const componentsNode = objectNode.querySelector('components');\n\n      if (componentsNode) {\n        objectData['components'] = parseComponentsNode(componentsNode);\n      }\n\n      return objectData;\n    }\n\n    function parseResourcesNode(resourcesNode) {\n      const resourcesData = {};\n      resourcesData['basematerials'] = {};\n      const basematerialsNodes = resourcesNode.querySelectorAll('basematerials');\n\n      for (let i = 0; i < basematerialsNodes.length; i++) {\n        const basematerialsNode = basematerialsNodes[i];\n        const basematerialsData = parseBasematerialsNode(basematerialsNode);\n        resourcesData['basematerials'][basematerialsData['id']] = basematerialsData;\n      } //\n\n\n      resourcesData['texture2d'] = {};\n      const textures2DNodes = resourcesNode.querySelectorAll('texture2d');\n\n      for (let i = 0; i < textures2DNodes.length; i++) {\n        const textures2DNode = textures2DNodes[i];\n        const texture2DData = parseTexture2DNode(textures2DNode);\n        resourcesData['texture2d'][texture2DData['id']] = texture2DData;\n      } //\n\n\n      resourcesData['colorgroup'] = {};\n      const colorGroupNodes = resourcesNode.querySelectorAll('colorgroup');\n\n      for (let i = 0; i < colorGroupNodes.length; i++) {\n        const colorGroupNode = colorGroupNodes[i];\n        const colorGroupData = parseColorGroupNode(colorGroupNode);\n        resourcesData['colorgroup'][colorGroupData['id']] = colorGroupData;\n      } //\n\n\n      resourcesData['pbmetallicdisplayproperties'] = {};\n      const pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll('pbmetallicdisplayproperties');\n\n      for (let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i++) {\n        const pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[i];\n        const pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode(pbmetallicdisplaypropertiesNode);\n        resourcesData['pbmetallicdisplayproperties'][pbmetallicdisplaypropertiesData['id']] = pbmetallicdisplaypropertiesData;\n      } //\n\n\n      resourcesData['texture2dgroup'] = {};\n      const textures2DGroupNodes = resourcesNode.querySelectorAll('texture2dgroup');\n\n      for (let i = 0; i < textures2DGroupNodes.length; i++) {\n        const textures2DGroupNode = textures2DGroupNodes[i];\n        const textures2DGroupData = parseTextures2DGroupNode(textures2DGroupNode);\n        resourcesData['texture2dgroup'][textures2DGroupData['id']] = textures2DGroupData;\n      } //\n\n\n      resourcesData['object'] = {};\n      const objectNodes = resourcesNode.querySelectorAll('object');\n\n      for (let i = 0; i < objectNodes.length; i++) {\n        const objectNode = objectNodes[i];\n        const objectData = parseObjectNode(objectNode);\n        resourcesData['object'][objectData['id']] = objectData;\n      }\n\n      return resourcesData;\n    }\n\n    function parseBuildNode(buildNode) {\n      const buildData = [];\n      const itemNodes = buildNode.querySelectorAll('item');\n\n      for (let i = 0; i < itemNodes.length; i++) {\n        const itemNode = itemNodes[i];\n        const buildItem = {\n          objectId: itemNode.getAttribute('objectid')\n        };\n        const transform = itemNode.getAttribute('transform');\n\n        if (transform) {\n          buildItem['transform'] = parseTransform(transform);\n        }\n\n        buildData.push(buildItem);\n      }\n\n      return buildData;\n    }\n\n    function parseModelNode(modelNode) {\n      const modelData = {\n        unit: modelNode.getAttribute('unit') || 'millimeter'\n      };\n      const metadataNodes = modelNode.querySelectorAll('metadata');\n\n      if (metadataNodes) {\n        modelData['metadata'] = parseMetadataNodes(metadataNodes);\n      }\n\n      const resourcesNode = modelNode.querySelector('resources');\n\n      if (resourcesNode) {\n        modelData['resources'] = parseResourcesNode(resourcesNode);\n      }\n\n      const buildNode = modelNode.querySelector('build');\n\n      if (buildNode) {\n        modelData['build'] = parseBuildNode(buildNode);\n      }\n\n      return modelData;\n    }\n\n    function buildTexture(texture2dgroup, objects, modelData, textureData) {\n      const texid = texture2dgroup.texid;\n      const texture2ds = modelData.resources.texture2d;\n      const texture2d = texture2ds[texid];\n\n      if (texture2d) {\n        const data = textureData[texture2d.path];\n        const type = texture2d.contenttype;\n        const blob = new Blob([data], {\n          type: type\n        });\n        const sourceURI = URL.createObjectURL(blob);\n        const texture = textureLoader.load(sourceURI, function () {\n          URL.revokeObjectURL(sourceURI);\n        });\n        texture.encoding = sRGBEncoding; // texture parameters\n\n        switch (texture2d.tilestyleu) {\n          case 'wrap':\n            texture.wrapS = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapS = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapS = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapS = RepeatWrapping;\n        }\n\n        switch (texture2d.tilestylev) {\n          case 'wrap':\n            texture.wrapT = RepeatWrapping;\n            break;\n\n          case 'mirror':\n            texture.wrapT = MirroredRepeatWrapping;\n            break;\n\n          case 'none':\n          case 'clamp':\n            texture.wrapT = ClampToEdgeWrapping;\n            break;\n\n          default:\n            texture.wrapT = RepeatWrapping;\n        }\n\n        switch (texture2d.filter) {\n          case 'auto':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n            break;\n\n          case 'linear':\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearFilter;\n            break;\n\n          case 'nearest':\n            texture.magFilter = NearestFilter;\n            texture.minFilter = NearestFilter;\n            break;\n\n          default:\n            texture.magFilter = LinearFilter;\n            texture.minFilter = LinearMipmapLinearFilter;\n        }\n\n        return texture;\n      } else {\n        return null;\n      }\n    }\n\n    function buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      const objectPindex = objectData.pindex;\n      const materialMap = {};\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const pindex = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectPindex;\n        if (materialMap[pindex] === undefined) materialMap[pindex] = [];\n        materialMap[pindex].push(triangleProperty);\n      } //\n\n\n      const keys = Object.keys(materialMap);\n      const meshes = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const materialIndex = keys[i];\n        const trianglePropertiesProps = materialMap[materialIndex];\n        const basematerialData = basematerials.basematerials[materialIndex];\n        const material = getBuild(basematerialData, objects, modelData, textureData, objectData, buildBasematerial); //\n\n        const geometry = new BufferGeometry();\n        const positionData = [];\n        const vertices = meshData.vertices;\n\n        for (let j = 0, jl = trianglePropertiesProps.length; j < jl; j++) {\n          const triangleProperty = trianglePropertiesProps[j];\n          positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n          positionData.push(vertices[triangleProperty.v3 * 3 + 2]);\n        }\n\n        geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3)); //\n\n        const mesh = new Mesh(geometry, material);\n        meshes.push(mesh);\n      }\n\n      return meshes;\n    }\n\n    function buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const uvData = [];\n      const vertices = meshData.vertices;\n      const uvs = texture2dgroup.uvs;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        positionData.push(vertices[triangleProperty.v1 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v1 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v2 * 3 + 2]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 0]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 1]);\n        positionData.push(vertices[triangleProperty.v3 * 3 + 2]); //\n\n        uvData.push(uvs[triangleProperty.p1 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p1 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p2 * 2 + 1]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 0]);\n        uvData.push(uvs[triangleProperty.p3 * 2 + 1]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('uv', new Float32BufferAttribute(uvData, 2)); // material\n\n      const texture = getBuild(texture2dgroup, objects, modelData, textureData, objectData, buildTexture);\n      const material = new MeshPhongMaterial({\n        map: texture,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildVertexColorMesh(colorgroup, triangleProperties, meshData, objectData) {\n      // geometry\n      const geometry = new BufferGeometry();\n      const positionData = [];\n      const colorData = [];\n      const vertices = meshData.vertices;\n      const colors = colorgroup.colors;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        const v1 = triangleProperty.v1;\n        const v2 = triangleProperty.v2;\n        const v3 = triangleProperty.v3;\n        positionData.push(vertices[v1 * 3 + 0]);\n        positionData.push(vertices[v1 * 3 + 1]);\n        positionData.push(vertices[v1 * 3 + 2]);\n        positionData.push(vertices[v2 * 3 + 0]);\n        positionData.push(vertices[v2 * 3 + 1]);\n        positionData.push(vertices[v2 * 3 + 2]);\n        positionData.push(vertices[v3 * 3 + 0]);\n        positionData.push(vertices[v3 * 3 + 1]);\n        positionData.push(vertices[v3 * 3 + 2]); //\n\n        const p1 = triangleProperty.p1 !== undefined ? triangleProperty.p1 : objectData.pindex;\n        const p2 = triangleProperty.p2 !== undefined ? triangleProperty.p2 : p1;\n        const p3 = triangleProperty.p3 !== undefined ? triangleProperty.p3 : p1;\n        colorData.push(colors[p1 * 3 + 0]);\n        colorData.push(colors[p1 * 3 + 1]);\n        colorData.push(colors[p1 * 3 + 2]);\n        colorData.push(colors[p2 * 3 + 0]);\n        colorData.push(colors[p2 * 3 + 1]);\n        colorData.push(colors[p2 * 3 + 2]);\n        colorData.push(colors[p3 * 3 + 0]);\n        colorData.push(colors[p3 * 3 + 1]);\n        colorData.push(colors[p3 * 3 + 2]);\n      }\n\n      geometry.setAttribute('position', new Float32BufferAttribute(positionData, 3));\n      geometry.setAttribute('color', new Float32BufferAttribute(colorData, 3)); // material\n\n      const material = new MeshPhongMaterial({\n        vertexColors: true,\n        flatShading: true\n      }); // mesh\n\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildDefaultMesh(meshData) {\n      const geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(meshData['triangles'], 1));\n      geometry.setAttribute('position', new BufferAttribute(meshData['vertices'], 3));\n      const material = new MeshPhongMaterial({\n        color: 0xffffff,\n        flatShading: true\n      });\n      const mesh = new Mesh(geometry, material);\n      return mesh;\n    }\n\n    function buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData) {\n      const keys = Object.keys(resourceMap);\n      const meshes = [];\n\n      for (let i = 0, il = keys.length; i < il; i++) {\n        const resourceId = keys[i];\n        const triangleProperties = resourceMap[resourceId];\n        const resourceType = getResourceType(resourceId, modelData);\n\n        switch (resourceType) {\n          case 'material':\n            const basematerials = modelData.resources.basematerials[resourceId];\n            const newMeshes = buildBasematerialsMeshes(basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData);\n\n            for (let j = 0, jl = newMeshes.length; j < jl; j++) {\n              meshes.push(newMeshes[j]);\n            }\n\n            break;\n\n          case 'texture':\n            const texture2dgroup = modelData.resources.texture2dgroup[resourceId];\n            meshes.push(buildTexturedMesh(texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData));\n            break;\n\n          case 'vertexColors':\n            const colorgroup = modelData.resources.colorgroup[resourceId];\n            meshes.push(buildVertexColorMesh(colorgroup, triangleProperties, meshData, objectData));\n            break;\n\n          case 'default':\n            meshes.push(buildDefaultMesh(meshData));\n            break;\n\n          default:\n            console.error('THREE.3MFLoader: Unsupported resource type.');\n        }\n      }\n\n      if (objectData.name) {\n        for (let i = 0; i < meshes.length; i++) {\n          meshes[i].name = objectData.name;\n        }\n      }\n\n      return meshes;\n    }\n\n    function getResourceType(pid, modelData) {\n      if (modelData.resources.texture2dgroup[pid] !== undefined) {\n        return 'texture';\n      } else if (modelData.resources.basematerials[pid] !== undefined) {\n        return 'material';\n      } else if (modelData.resources.colorgroup[pid] !== undefined) {\n        return 'vertexColors';\n      } else if (pid === 'default') {\n        return 'default';\n      } else {\n        return undefined;\n      }\n    }\n\n    function analyzeObject(meshData, objectData) {\n      const resourceMap = {};\n      const triangleProperties = meshData['triangleProperties'];\n      const objectPid = objectData.pid;\n\n      for (let i = 0, l = triangleProperties.length; i < l; i++) {\n        const triangleProperty = triangleProperties[i];\n        let pid = triangleProperty.pid !== undefined ? triangleProperty.pid : objectPid;\n        if (pid === undefined) pid = 'default';\n        if (resourceMap[pid] === undefined) resourceMap[pid] = [];\n        resourceMap[pid].push(triangleProperty);\n      }\n\n      return resourceMap;\n    }\n\n    function buildGroup(meshData, objects, modelData, textureData, objectData) {\n      const group = new Group();\n      const resourceMap = analyzeObject(meshData, objectData);\n      const meshes = buildMeshes(resourceMap, meshData, objects, modelData, textureData, objectData);\n\n      for (let i = 0, l = meshes.length; i < l; i++) {\n        group.add(meshes[i]);\n      }\n\n      return group;\n    }\n\n    function applyExtensions(extensions, meshData, modelXml) {\n      if (!extensions) {\n        return;\n      }\n\n      const availableExtensions = [];\n      const keys = Object.keys(extensions);\n\n      for (let i = 0; i < keys.length; i++) {\n        const ns = keys[i];\n\n        for (let j = 0; j < scope.availableExtensions.length; j++) {\n          const extension = scope.availableExtensions[j];\n\n          if (extension.ns === ns) {\n            availableExtensions.push(extension);\n          }\n        }\n      }\n\n      for (let i = 0; i < availableExtensions.length; i++) {\n        const extension = availableExtensions[i];\n        extension.apply(modelXml, extensions[extension['ns']], meshData);\n      }\n    }\n\n    function getBuild(data, objects, modelData, textureData, objectData, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data, objects, modelData, textureData, objectData);\n      return data.build;\n    }\n\n    function buildBasematerial(materialData, objects, modelData) {\n      let material;\n      const displaypropertiesid = materialData.displaypropertiesid;\n      const pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n      if (displaypropertiesid !== null && pbmetallicdisplayproperties[displaypropertiesid] !== undefined) {\n        // metallic display property, use StandardMaterial\n        const pbmetallicdisplayproperty = pbmetallicdisplayproperties[displaypropertiesid];\n        const metallicData = pbmetallicdisplayproperty.data[materialData.index];\n        material = new MeshStandardMaterial({\n          flatShading: true,\n          roughness: metallicData.roughness,\n          metalness: metallicData.metallicness\n        });\n      } else {\n        // otherwise use PhongMaterial\n        material = new MeshPhongMaterial({\n          flatShading: true\n        });\n      }\n\n      material.name = materialData.name; // displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n      const displaycolor = materialData.displaycolor;\n      const color = displaycolor.substring(0, 7);\n      material.color.setStyle(color);\n      material.color.convertSRGBToLinear(); // displaycolor is in sRGB\n      // process alpha if set\n\n      if (displaycolor.length === 9) {\n        material.opacity = parseInt(displaycolor.charAt(7) + displaycolor.charAt(8), 16) / 255;\n      }\n\n      return material;\n    }\n\n    function buildComposite(compositeData, objects, modelData, textureData) {\n      const composite = new Group();\n\n      for (let j = 0; j < compositeData.length; j++) {\n        const component = compositeData[j];\n        let build = objects[component.objectId];\n\n        if (build === undefined) {\n          buildObject(component.objectId, objects, modelData, textureData);\n          build = objects[component.objectId];\n        }\n\n        const object3D = build.clone(); // apply component transform\n\n        const transform = component.transform;\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        composite.add(object3D);\n      }\n\n      return composite;\n    }\n\n    function buildObject(objectId, objects, modelData, textureData) {\n      const objectData = modelData['resources']['object'][objectId];\n\n      if (objectData['mesh']) {\n        const meshData = objectData['mesh'];\n        const extensions = modelData['extensions'];\n        const modelXml = modelData['xml'];\n        applyExtensions(extensions, meshData, modelXml);\n        objects[objectData.id] = getBuild(meshData, objects, modelData, textureData, objectData, buildGroup);\n      } else {\n        const compositeData = objectData['components'];\n        objects[objectData.id] = getBuild(compositeData, objects, modelData, textureData, objectData, buildComposite);\n      }\n\n      if (objectData.name) {\n        objects[objectData.id].name = objectData.name;\n      }\n    }\n\n    function buildObjects(data3mf) {\n      const modelsData = data3mf.model;\n      const modelRels = data3mf.modelRels;\n      const objects = {};\n      const modelsKeys = Object.keys(modelsData);\n      const textureData = {}; // evaluate model relationships to textures\n\n      if (modelRels) {\n        for (let i = 0, l = modelRels.length; i < l; i++) {\n          const modelRel = modelRels[i];\n          const textureKey = modelRel.target.substring(1);\n\n          if (data3mf.texture[textureKey]) {\n            textureData[modelRel.target] = data3mf.texture[textureKey];\n          }\n        }\n      } // start build\n\n\n      for (let i = 0; i < modelsKeys.length; i++) {\n        const modelsKey = modelsKeys[i];\n        const modelData = modelsData[modelsKey];\n        const objectIds = Object.keys(modelData['resources']['object']);\n\n        for (let j = 0; j < objectIds.length; j++) {\n          const objectId = objectIds[j];\n          buildObject(objectId, objects, modelData, textureData);\n        }\n      }\n\n      return objects;\n    }\n\n    function fetch3DModelPart(rels) {\n      for (let i = 0; i < rels.length; i++) {\n        const rel = rels[i];\n        const extension = rel.target.split('.').pop();\n        if (extension.toLowerCase() === 'model') return rel;\n      }\n    }\n\n    function build(objects, data3mf) {\n      const group = new Group();\n      const relationship = fetch3DModelPart(data3mf['rels']);\n      const buildData = data3mf.model[relationship['target'].substring(1)]['build'];\n\n      for (let i = 0; i < buildData.length; i++) {\n        const buildItem = buildData[i];\n        const object3D = objects[buildItem['objectId']].clone(); // apply transform\n\n        const transform = buildItem['transform'];\n\n        if (transform) {\n          object3D.applyMatrix4(transform);\n        }\n\n        group.add(object3D);\n      }\n\n      return group;\n    }\n\n    const data3mf = loadDocument(data);\n    const objects = buildObjects(data3mf);\n    return build(objects, data3mf);\n  }\n\n  addExtension(extension) {\n    this.availableExtensions.push(extension);\n  }\n\n}\n\nexport { ThreeMFLoader };","map":{"version":3,"names":["BufferAttribute","BufferGeometry","ClampToEdgeWrapping","Color","FileLoader","Float32BufferAttribute","Group","LinearFilter","LinearMipmapLinearFilter","Loader","LoaderUtils","Matrix4","Mesh","MeshPhongMaterial","MeshStandardMaterial","MirroredRepeatWrapping","NearestFilter","RepeatWrapping","TextureLoader","sRGBEncoding","fflate","ThreeMFLoader","constructor","manager","availableExtensions","load","url","onLoad","onProgress","onError","scope","loader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","buffer","parse","e","console","error","itemError","data","textureLoader","loadDocument","zip","file","relsName","modelRelsName","modelPartNames","texturesPartNames","modelRels","modelParts","printTicketParts","texturesParts","unzipSync","Uint8Array","ReferenceError","match","push","relsView","relsFileText","decodeText","rels","parseRelsXml","i","length","modelPart","view","fileText","xmlData","DOMParser","parseFromString","documentElement","nodeName","toLowerCase","modelNode","querySelector","extensions","attributes","attr","name","value","RegExp","$1","modelData","parseModelNode","Object","keys","texturesPartName","model","printTicket","texture","relationships","relsXmlData","relsNodes","querySelectorAll","relsNode","relationship","target","getAttribute","id","type","parseMetadataNodes","metadataNodes","metadataData","metadataNode","validNames","indexOf","textContent","parseBasematerialsNode","basematerialsNode","basematerialsData","basematerials","basematerialNodes","basematerialNode","basematerialData","parseBasematerialNode","index","parseTexture2DNode","texture2DNode","texture2dData","contenttype","tilestyleu","tilestylev","filter","parseTextures2DGroupNode","texture2DGroupNode","texture2DGroupData","texid","displaypropertiesid","tex2coordNodes","uvs","tex2coordNode","u","v","parseFloat","Float32Array","parseColorGroupNode","colorGroupNode","colorGroupData","colorNodes","colors","colorObject","colorNode","color","setStyle","substring","convertSRGBToLinear","r","g","b","parseMetallicDisplaypropertiesNode","metallicDisplaypropetiesNode","metallicDisplaypropertiesData","metallicNodes","metallicData","metallicNode","metallicness","roughness","parseMeshNode","meshNode","meshData","vertices","vertexNodes","vertexNode","x","y","z","triangleProperties","triangles","triangleNodes","triangleNode","v1","v2","v3","p1","p2","p3","pid","triangleProperty","parseInt","Uint32Array","parseComponentsNode","componentsNode","components","componentNodes","componentNode","componentData","parseComponentNode","transform","parseTransform","t","split","forEach","s","matrix","set","parseObjectNode","objectNode","objectData","pindex","thumbnail","partnumber","parseResourcesNode","resourcesNode","resourcesData","basematerialsNodes","textures2DNodes","textures2DNode","texture2DData","colorGroupNodes","pbmetallicdisplaypropertiesNodes","pbmetallicdisplaypropertiesNode","pbmetallicdisplaypropertiesData","textures2DGroupNodes","textures2DGroupNode","textures2DGroupData","objectNodes","parseBuildNode","buildNode","buildData","itemNodes","itemNode","buildItem","objectId","unit","buildTexture","texture2dgroup","objects","textureData","texture2ds","resources","texture2d","blob","Blob","sourceURI","URL","createObjectURL","revokeObjectURL","encoding","wrapS","wrapT","magFilter","minFilter","buildBasematerialsMeshes","objectPindex","materialMap","l","undefined","meshes","materialIndex","trianglePropertiesProps","material","getBuild","buildBasematerial","geometry","positionData","j","jl","setAttribute","mesh","buildTexturedMesh","uvData","map","flatShading","buildVertexColorMesh","colorgroup","colorData","vertexColors","buildDefaultMesh","setIndex","buildMeshes","resourceMap","il","resourceId","resourceType","getResourceType","newMeshes","analyzeObject","objectPid","buildGroup","group","add","applyExtensions","modelXml","ns","extension","apply","builder","build","materialData","pbmetallicdisplayproperties","pbmetallicdisplayproperty","metalness","displaycolor","opacity","charAt","buildComposite","compositeData","composite","component","buildObject","object3D","clone","applyMatrix4","buildObjects","data3mf","modelsData","modelsKeys","modelRel","textureKey","modelsKey","objectIds","fetch3DModelPart","rel","pop","addExtension"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/three/examples/jsm/loaders/3MFLoader.js"],"sourcesContent":["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLoader,\n\tLoaderUtils,\n\tMatrix4,\n\tMesh,\n\tMeshPhongMaterial,\n\tMeshStandardMaterial,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tRepeatWrapping,\n\tTextureLoader,\n\tsRGBEncoding\n} from 'three';\nimport * as fflate from '../libs/fflate.module.js';\n\n/**\n *\n * 3D Manufacturing Format (3MF) specification: https://3mf.io/specification/\n *\n * The following features from the core specification are supported:\n *\n * - 3D Models\n * - Object Resources (Meshes and Components)\n * - Material Resources (Base Materials)\n *\n * 3MF Materials and Properties Extension are only partially supported.\n *\n * - Texture 2D\n * - Texture 2D Groups\n * - Color Groups (Vertex Colors)\n * - Metallic Display Properties (PBR)\n */\n\nclass ThreeMFLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.availableExtensions = [];\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( data ) {\n\n\t\tconst scope = this;\n\t\tconst textureLoader = new TextureLoader( this.manager );\n\n\t\tfunction loadDocument( data ) {\n\n\t\t\tlet zip = null;\n\t\t\tlet file = null;\n\n\t\t\tlet relsName;\n\t\t\tlet modelRelsName;\n\t\t\tconst modelPartNames = [];\n\t\t\tconst texturesPartNames = [];\n\n\t\t\tlet modelRels;\n\t\t\tconst modelParts = {};\n\t\t\tconst printTicketParts = {};\n\t\t\tconst texturesParts = {};\n\n\t\t\ttry {\n\n\t\t\t\tzip = fflate.unzipSync( new Uint8Array( data ) ); // eslint-disable-line no-undef\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( e instanceof ReferenceError ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: fflate missing and file is compressed.' );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( file in zip ) {\n\n\t\t\t\tif ( file.match( /\\_rels\\/.rels$/ ) ) {\n\n\t\t\t\t\trelsName = file;\n\n\t\t\t\t} else if ( file.match( /3D\\/_rels\\/.*\\.model\\.rels$/ ) ) {\n\n\t\t\t\t\tmodelRelsName = file;\n\n\t\t\t\t} else if ( file.match( /^3D\\/.*\\.model$/ ) ) {\n\n\t\t\t\t\tmodelPartNames.push( file );\n\n\t\t\t\t} else if ( file.match( /^3D\\/Textures?\\/.*/ ) ) {\n\n\t\t\t\t\ttexturesPartNames.push( file );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst relsView = zip[ relsName ];\n\t\t\tconst relsFileText = LoaderUtils.decodeText( relsView );\n\t\t\tconst rels = parseRelsXml( relsFileText );\n\n\t\t\t//\n\n\t\t\tif ( modelRelsName ) {\n\n\t\t\t\tconst relsView = zip[ modelRelsName ];\n\t\t\t\tconst relsFileText = LoaderUtils.decodeText( relsView );\n\t\t\t\tmodelRels = parseRelsXml( relsFileText );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < modelPartNames.length; i ++ ) {\n\n\t\t\t\tconst modelPart = modelPartNames[ i ];\n\t\t\t\tconst view = zip[ modelPart ];\n\n\t\t\t\tconst fileText = LoaderUtils.decodeText( view );\n\t\t\t\tconst xmlData = new DOMParser().parseFromString( fileText, 'application/xml' );\n\n\t\t\t\tif ( xmlData.documentElement.nodeName.toLowerCase() !== 'model' ) {\n\n\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Error loading 3MF - no 3MF document found: ', modelPart );\n\n\t\t\t\t}\n\n\t\t\t\tconst modelNode = xmlData.querySelector( 'model' );\n\t\t\t\tconst extensions = {};\n\n\t\t\t\tfor ( let i = 0; i < modelNode.attributes.length; i ++ ) {\n\n\t\t\t\t\tconst attr = modelNode.attributes[ i ];\n\t\t\t\t\tif ( attr.name.match( /^xmlns:(.+)$/ ) ) {\n\n\t\t\t\t\t\textensions[ attr.value ] = RegExp.$1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst modelData = parseModelNode( modelNode );\n\t\t\t\tmodelData[ 'xml' ] = modelNode;\n\n\t\t\t\tif ( 0 < Object.keys( extensions ).length ) {\n\n\t\t\t\t\tmodelData[ 'extensions' ] = extensions;\n\n\t\t\t\t}\n\n\t\t\t\tmodelParts[ modelPart ] = modelData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < texturesPartNames.length; i ++ ) {\n\n\t\t\t\tconst texturesPartName = texturesPartNames[ i ];\n\t\t\t\ttexturesParts[ texturesPartName ] = zip[ texturesPartName ].buffer;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\trels: rels,\n\t\t\t\tmodelRels: modelRels,\n\t\t\t\tmodel: modelParts,\n\t\t\t\tprintTicket: printTicketParts,\n\t\t\t\ttexture: texturesParts\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseRelsXml( relsFileText ) {\n\n\t\t\tconst relationships = [];\n\n\t\t\tconst relsXmlData = new DOMParser().parseFromString( relsFileText, 'application/xml' );\n\n\t\t\tconst relsNodes = relsXmlData.querySelectorAll( 'Relationship' );\n\n\t\t\tfor ( let i = 0; i < relsNodes.length; i ++ ) {\n\n\t\t\t\tconst relsNode = relsNodes[ i ];\n\n\t\t\t\tconst relationship = {\n\t\t\t\t\ttarget: relsNode.getAttribute( 'Target' ), //required\n\t\t\t\t\tid: relsNode.getAttribute( 'Id' ), //required\n\t\t\t\t\ttype: relsNode.getAttribute( 'Type' ) //required\n\t\t\t\t};\n\n\t\t\t\trelationships.push( relationship );\n\n\t\t\t}\n\n\t\t\treturn relationships;\n\n\t\t}\n\n\t\tfunction parseMetadataNodes( metadataNodes ) {\n\n\t\t\tconst metadataData = {};\n\n\t\t\tfor ( let i = 0; i < metadataNodes.length; i ++ ) {\n\n\t\t\t\tconst metadataNode = metadataNodes[ i ];\n\t\t\t\tconst name = metadataNode.getAttribute( 'name' );\n\t\t\t\tconst validNames = [\n\t\t\t\t\t'Title',\n\t\t\t\t\t'Designer',\n\t\t\t\t\t'Description',\n\t\t\t\t\t'Copyright',\n\t\t\t\t\t'LicenseTerms',\n\t\t\t\t\t'Rating',\n\t\t\t\t\t'CreationDate',\n\t\t\t\t\t'ModificationDate'\n\t\t\t\t];\n\n\t\t\t\tif ( 0 <= validNames.indexOf( name ) ) {\n\n\t\t\t\t\tmetadataData[ name ] = metadataNode.textContent;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn metadataData;\n\n\t\t}\n\n\t\tfunction parseBasematerialsNode( basematerialsNode ) {\n\n\t\t\tconst basematerialsData = {\n\t\t\t\tid: basematerialsNode.getAttribute( 'id' ), // required\n\t\t\t\tbasematerials: []\n\t\t\t};\n\n\t\t\tconst basematerialNodes = basematerialsNode.querySelectorAll( 'base' );\n\n\t\t\tfor ( let i = 0; i < basematerialNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialNode = basematerialNodes[ i ];\n\t\t\t\tconst basematerialData = parseBasematerialNode( basematerialNode );\n\t\t\t\tbasematerialData.index = i; // the order and count of the material nodes form an implicit 0-based index\n\t\t\t\tbasematerialsData.basematerials.push( basematerialData );\n\n\t\t\t}\n\n\t\t\treturn basematerialsData;\n\n\t\t}\n\n\t\tfunction parseTexture2DNode( texture2DNode ) {\n\n\t\t\tconst texture2dData = {\n\t\t\t\tid: texture2DNode.getAttribute( 'id' ), // required\n\t\t\t\tpath: texture2DNode.getAttribute( 'path' ), // required\n\t\t\t\tcontenttype: texture2DNode.getAttribute( 'contenttype' ), // required\n\t\t\t\ttilestyleu: texture2DNode.getAttribute( 'tilestyleu' ),\n\t\t\t\ttilestylev: texture2DNode.getAttribute( 'tilestylev' ),\n\t\t\t\tfilter: texture2DNode.getAttribute( 'filter' ),\n\t\t\t};\n\n\t\t\treturn texture2dData;\n\n\t\t}\n\n\t\tfunction parseTextures2DGroupNode( texture2DGroupNode ) {\n\n\t\t\tconst texture2DGroupData = {\n\t\t\t\tid: texture2DGroupNode.getAttribute( 'id' ), // required\n\t\t\t\ttexid: texture2DGroupNode.getAttribute( 'texid' ), // required\n\t\t\t\tdisplaypropertiesid: texture2DGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst tex2coordNodes = texture2DGroupNode.querySelectorAll( 'tex2coord' );\n\n\t\t\tconst uvs = [];\n\n\t\t\tfor ( let i = 0; i < tex2coordNodes.length; i ++ ) {\n\n\t\t\t\tconst tex2coordNode = tex2coordNodes[ i ];\n\t\t\t\tconst u = tex2coordNode.getAttribute( 'u' );\n\t\t\t\tconst v = tex2coordNode.getAttribute( 'v' );\n\n\t\t\t\tuvs.push( parseFloat( u ), parseFloat( v ) );\n\n\t\t\t}\n\n\t\t\ttexture2DGroupData[ 'uvs' ] = new Float32Array( uvs );\n\n\t\t\treturn texture2DGroupData;\n\n\t\t}\n\n\t\tfunction parseColorGroupNode( colorGroupNode ) {\n\n\t\t\tconst colorGroupData = {\n\t\t\t\tid: colorGroupNode.getAttribute( 'id' ), // required\n\t\t\t\tdisplaypropertiesid: colorGroupNode.getAttribute( 'displaypropertiesid' )\n\t\t\t};\n\n\t\t\tconst colorNodes = colorGroupNode.querySelectorAll( 'color' );\n\n\t\t\tconst colors = [];\n\t\t\tconst colorObject = new Color();\n\n\t\t\tfor ( let i = 0; i < colorNodes.length; i ++ ) {\n\n\t\t\t\tconst colorNode = colorNodes[ i ];\n\t\t\t\tconst color = colorNode.getAttribute( 'color' );\n\n\t\t\t\tcolorObject.setStyle( color.substring( 0, 7 ) );\n\t\t\t\tcolorObject.convertSRGBToLinear(); // color is in sRGB\n\n\t\t\t\tcolors.push( colorObject.r, colorObject.g, colorObject.b );\n\n\t\t\t}\n\n\t\t\tcolorGroupData[ 'colors' ] = new Float32Array( colors );\n\n\t\t\treturn colorGroupData;\n\n\t\t}\n\n\t\tfunction parseMetallicDisplaypropertiesNode( metallicDisplaypropetiesNode ) {\n\n\t\t\tconst metallicDisplaypropertiesData = {\n\t\t\t\tid: metallicDisplaypropetiesNode.getAttribute( 'id' ) // required\n\t\t\t};\n\n\t\t\tconst metallicNodes = metallicDisplaypropetiesNode.querySelectorAll( 'pbmetallic' );\n\n\t\t\tconst metallicData = [];\n\n\t\t\tfor ( let i = 0; i < metallicNodes.length; i ++ ) {\n\n\t\t\t\tconst metallicNode = metallicNodes[ i ];\n\n\t\t\t\tmetallicData.push( {\n\t\t\t\t\tname: metallicNode.getAttribute( 'name' ), // required\n\t\t\t\t\tmetallicness: parseFloat( metallicNode.getAttribute( 'metallicness' ) ), // required\n\t\t\t\t\troughness: parseFloat( metallicNode.getAttribute( 'roughness' ) ) // required\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tmetallicDisplaypropertiesData.data = metallicData;\n\n\t\t\treturn metallicDisplaypropertiesData;\n\n\t\t}\n\n\t\tfunction parseBasematerialNode( basematerialNode ) {\n\n\t\t\tconst basematerialData = {};\n\n\t\t\tbasematerialData[ 'name' ] = basematerialNode.getAttribute( 'name' ); // required\n\t\t\tbasematerialData[ 'displaycolor' ] = basematerialNode.getAttribute( 'displaycolor' ); // required\n\t\t\tbasematerialData[ 'displaypropertiesid' ] = basematerialNode.getAttribute( 'displaypropertiesid' );\n\n\t\t\treturn basematerialData;\n\n\t\t}\n\n\t\tfunction parseMeshNode( meshNode ) {\n\n\t\t\tconst meshData = {};\n\n\t\t\tconst vertices = [];\n\t\t\tconst vertexNodes = meshNode.querySelectorAll( 'vertices vertex' );\n\n\t\t\tfor ( let i = 0; i < vertexNodes.length; i ++ ) {\n\n\t\t\t\tconst vertexNode = vertexNodes[ i ];\n\t\t\t\tconst x = vertexNode.getAttribute( 'x' );\n\t\t\t\tconst y = vertexNode.getAttribute( 'y' );\n\t\t\t\tconst z = vertexNode.getAttribute( 'z' );\n\n\t\t\t\tvertices.push( parseFloat( x ), parseFloat( y ), parseFloat( z ) );\n\n\t\t\t}\n\n\t\t\tmeshData[ 'vertices' ] = new Float32Array( vertices );\n\n\t\t\tconst triangleProperties = [];\n\t\t\tconst triangles = [];\n\t\t\tconst triangleNodes = meshNode.querySelectorAll( 'triangles triangle' );\n\n\t\t\tfor ( let i = 0; i < triangleNodes.length; i ++ ) {\n\n\t\t\t\tconst triangleNode = triangleNodes[ i ];\n\t\t\t\tconst v1 = triangleNode.getAttribute( 'v1' );\n\t\t\t\tconst v2 = triangleNode.getAttribute( 'v2' );\n\t\t\t\tconst v3 = triangleNode.getAttribute( 'v3' );\n\t\t\t\tconst p1 = triangleNode.getAttribute( 'p1' );\n\t\t\t\tconst p2 = triangleNode.getAttribute( 'p2' );\n\t\t\t\tconst p3 = triangleNode.getAttribute( 'p3' );\n\t\t\t\tconst pid = triangleNode.getAttribute( 'pid' );\n\n\t\t\t\tconst triangleProperty = {};\n\n\t\t\t\ttriangleProperty[ 'v1' ] = parseInt( v1, 10 );\n\t\t\t\ttriangleProperty[ 'v2' ] = parseInt( v2, 10 );\n\t\t\t\ttriangleProperty[ 'v3' ] = parseInt( v3, 10 );\n\n\t\t\t\ttriangles.push( triangleProperty[ 'v1' ], triangleProperty[ 'v2' ], triangleProperty[ 'v3' ] );\n\n\t\t\t\t// optional\n\n\t\t\t\tif ( p1 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p1' ] = parseInt( p1, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p2 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p2' ] = parseInt( p2, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( p3 ) {\n\n\t\t\t\t\ttriangleProperty[ 'p3' ] = parseInt( p3, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pid ) {\n\n\t\t\t\t\ttriangleProperty[ 'pid' ] = pid;\n\n\t\t\t\t}\n\n\t\t\t\tif ( 0 < Object.keys( triangleProperty ).length ) {\n\n\t\t\t\t\ttriangleProperties.push( triangleProperty );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmeshData[ 'triangleProperties' ] = triangleProperties;\n\t\t\tmeshData[ 'triangles' ] = new Uint32Array( triangles );\n\n\t\t\treturn meshData;\n\n\t\t}\n\n\t\tfunction parseComponentsNode( componentsNode ) {\n\n\t\t\tconst components = [];\n\n\t\t\tconst componentNodes = componentsNode.querySelectorAll( 'component' );\n\n\t\t\tfor ( let i = 0; i < componentNodes.length; i ++ ) {\n\n\t\t\t\tconst componentNode = componentNodes[ i ];\n\t\t\t\tconst componentData = parseComponentNode( componentNode );\n\t\t\t\tcomponents.push( componentData );\n\n\t\t\t}\n\n\t\t\treturn components;\n\n\t\t}\n\n\t\tfunction parseComponentNode( componentNode ) {\n\n\t\t\tconst componentData = {};\n\n\t\t\tcomponentData[ 'objectId' ] = componentNode.getAttribute( 'objectid' ); // required\n\n\t\t\tconst transform = componentNode.getAttribute( 'transform' );\n\n\t\t\tif ( transform ) {\n\n\t\t\t\tcomponentData[ 'transform' ] = parseTransform( transform );\n\n\t\t\t}\n\n\t\t\treturn componentData;\n\n\t\t}\n\n\t\tfunction parseTransform( transform ) {\n\n\t\t\tconst t = [];\n\t\t\ttransform.split( ' ' ).forEach( function ( s ) {\n\n\t\t\t\tt.push( parseFloat( s ) );\n\n\t\t\t} );\n\n\t\t\tconst matrix = new Matrix4();\n\t\t\tmatrix.set(\n\t\t\t\tt[ 0 ], t[ 3 ], t[ 6 ], t[ 9 ],\n\t\t\t\tt[ 1 ], t[ 4 ], t[ 7 ], t[ 10 ],\n\t\t\t\tt[ 2 ], t[ 5 ], t[ 8 ], t[ 11 ],\n\t\t\t\t 0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\n\t\t\treturn matrix;\n\n\t\t}\n\n\t\tfunction parseObjectNode( objectNode ) {\n\n\t\t\tconst objectData = {\n\t\t\t\ttype: objectNode.getAttribute( 'type' )\n\t\t\t};\n\n\t\t\tconst id = objectNode.getAttribute( 'id' );\n\n\t\t\tif ( id ) {\n\n\t\t\t\tobjectData[ 'id' ] = id;\n\n\t\t\t}\n\n\t\t\tconst pid = objectNode.getAttribute( 'pid' );\n\n\t\t\tif ( pid ) {\n\n\t\t\t\tobjectData[ 'pid' ] = pid;\n\n\t\t\t}\n\n\t\t\tconst pindex = objectNode.getAttribute( 'pindex' );\n\n\t\t\tif ( pindex ) {\n\n\t\t\t\tobjectData[ 'pindex' ] = pindex;\n\n\t\t\t}\n\n\t\t\tconst thumbnail = objectNode.getAttribute( 'thumbnail' );\n\n\t\t\tif ( thumbnail ) {\n\n\t\t\t\tobjectData[ 'thumbnail' ] = thumbnail;\n\n\t\t\t}\n\n\t\t\tconst partnumber = objectNode.getAttribute( 'partnumber' );\n\n\t\t\tif ( partnumber ) {\n\n\t\t\t\tobjectData[ 'partnumber' ] = partnumber;\n\n\t\t\t}\n\n\t\t\tconst name = objectNode.getAttribute( 'name' );\n\n\t\t\tif ( name ) {\n\n\t\t\t\tobjectData[ 'name' ] = name;\n\n\t\t\t}\n\n\t\t\tconst meshNode = objectNode.querySelector( 'mesh' );\n\n\t\t\tif ( meshNode ) {\n\n\t\t\t\tobjectData[ 'mesh' ] = parseMeshNode( meshNode );\n\n\t\t\t}\n\n\t\t\tconst componentsNode = objectNode.querySelector( 'components' );\n\n\t\t\tif ( componentsNode ) {\n\n\t\t\t\tobjectData[ 'components' ] = parseComponentsNode( componentsNode );\n\n\t\t\t}\n\n\t\t\treturn objectData;\n\n\t\t}\n\n\t\tfunction parseResourcesNode( resourcesNode ) {\n\n\t\t\tconst resourcesData = {};\n\n\t\t\tresourcesData[ 'basematerials' ] = {};\n\t\t\tconst basematerialsNodes = resourcesNode.querySelectorAll( 'basematerials' );\n\n\t\t\tfor ( let i = 0; i < basematerialsNodes.length; i ++ ) {\n\n\t\t\t\tconst basematerialsNode = basematerialsNodes[ i ];\n\t\t\t\tconst basematerialsData = parseBasematerialsNode( basematerialsNode );\n\t\t\t\tresourcesData[ 'basematerials' ][ basematerialsData[ 'id' ] ] = basematerialsData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2d' ] = {};\n\t\t\tconst textures2DNodes = resourcesNode.querySelectorAll( 'texture2d' );\n\n\t\t\tfor ( let i = 0; i < textures2DNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DNode = textures2DNodes[ i ];\n\t\t\t\tconst texture2DData = parseTexture2DNode( textures2DNode );\n\t\t\t\tresourcesData[ 'texture2d' ][ texture2DData[ 'id' ] ] = texture2DData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'colorgroup' ] = {};\n\t\t\tconst colorGroupNodes = resourcesNode.querySelectorAll( 'colorgroup' );\n\n\t\t\tfor ( let i = 0; i < colorGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst colorGroupNode = colorGroupNodes[ i ];\n\t\t\t\tconst colorGroupData = parseColorGroupNode( colorGroupNode );\n\t\t\t\tresourcesData[ 'colorgroup' ][ colorGroupData[ 'id' ] ] = colorGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ] = {};\n\t\t\tconst pbmetallicdisplaypropertiesNodes = resourcesNode.querySelectorAll( 'pbmetallicdisplayproperties' );\n\n\t\t\tfor ( let i = 0; i < pbmetallicdisplaypropertiesNodes.length; i ++ ) {\n\n\t\t\t\tconst pbmetallicdisplaypropertiesNode = pbmetallicdisplaypropertiesNodes[ i ];\n\t\t\t\tconst pbmetallicdisplaypropertiesData = parseMetallicDisplaypropertiesNode( pbmetallicdisplaypropertiesNode );\n\t\t\t\tresourcesData[ 'pbmetallicdisplayproperties' ][ pbmetallicdisplaypropertiesData[ 'id' ] ] = pbmetallicdisplaypropertiesData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'texture2dgroup' ] = {};\n\t\t\tconst textures2DGroupNodes = resourcesNode.querySelectorAll( 'texture2dgroup' );\n\n\t\t\tfor ( let i = 0; i < textures2DGroupNodes.length; i ++ ) {\n\n\t\t\t\tconst textures2DGroupNode = textures2DGroupNodes[ i ];\n\t\t\t\tconst textures2DGroupData = parseTextures2DGroupNode( textures2DGroupNode );\n\t\t\t\tresourcesData[ 'texture2dgroup' ][ textures2DGroupData[ 'id' ] ] = textures2DGroupData;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tresourcesData[ 'object' ] = {};\n\t\t\tconst objectNodes = resourcesNode.querySelectorAll( 'object' );\n\n\t\t\tfor ( let i = 0; i < objectNodes.length; i ++ ) {\n\n\t\t\t\tconst objectNode = objectNodes[ i ];\n\t\t\t\tconst objectData = parseObjectNode( objectNode );\n\t\t\t\tresourcesData[ 'object' ][ objectData[ 'id' ] ] = objectData;\n\n\t\t\t}\n\n\t\t\treturn resourcesData;\n\n\t\t}\n\n\t\tfunction parseBuildNode( buildNode ) {\n\n\t\t\tconst buildData = [];\n\t\t\tconst itemNodes = buildNode.querySelectorAll( 'item' );\n\n\t\t\tfor ( let i = 0; i < itemNodes.length; i ++ ) {\n\n\t\t\t\tconst itemNode = itemNodes[ i ];\n\t\t\t\tconst buildItem = {\n\t\t\t\t\tobjectId: itemNode.getAttribute( 'objectid' )\n\t\t\t\t};\n\t\t\t\tconst transform = itemNode.getAttribute( 'transform' );\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tbuildItem[ 'transform' ] = parseTransform( transform );\n\n\t\t\t\t}\n\n\t\t\t\tbuildData.push( buildItem );\n\n\t\t\t}\n\n\t\t\treturn buildData;\n\n\t\t}\n\n\t\tfunction parseModelNode( modelNode ) {\n\n\t\t\tconst modelData = { unit: modelNode.getAttribute( 'unit' ) || 'millimeter' };\n\t\t\tconst metadataNodes = modelNode.querySelectorAll( 'metadata' );\n\n\t\t\tif ( metadataNodes ) {\n\n\t\t\t\tmodelData[ 'metadata' ] = parseMetadataNodes( metadataNodes );\n\n\t\t\t}\n\n\t\t\tconst resourcesNode = modelNode.querySelector( 'resources' );\n\n\t\t\tif ( resourcesNode ) {\n\n\t\t\t\tmodelData[ 'resources' ] = parseResourcesNode( resourcesNode );\n\n\t\t\t}\n\n\t\t\tconst buildNode = modelNode.querySelector( 'build' );\n\n\t\t\tif ( buildNode ) {\n\n\t\t\t\tmodelData[ 'build' ] = parseBuildNode( buildNode );\n\n\t\t\t}\n\n\t\t\treturn modelData;\n\n\t\t}\n\n\t\tfunction buildTexture( texture2dgroup, objects, modelData, textureData ) {\n\n\t\t\tconst texid = texture2dgroup.texid;\n\t\t\tconst texture2ds = modelData.resources.texture2d;\n\t\t\tconst texture2d = texture2ds[ texid ];\n\n\t\t\tif ( texture2d ) {\n\n\t\t\t\tconst data = textureData[ texture2d.path ];\n\t\t\t\tconst type = texture2d.contenttype;\n\n\t\t\t\tconst blob = new Blob( [ data ], { type: type } );\n\t\t\t\tconst sourceURI = URL.createObjectURL( blob );\n\n\t\t\t\tconst texture = textureLoader.load( sourceURI, function () {\n\n\t\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t\t} );\n\n\t\t\t\ttexture.encoding = sRGBEncoding;\n\n\t\t\t\t// texture parameters\n\n\t\t\t\tswitch ( texture2d.tilestyleu ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapS = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapS = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.tilestylev ) {\n\n\t\t\t\t\tcase 'wrap':\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mirror':\n\t\t\t\t\t\ttexture.wrapT = MirroredRepeatWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'none':\n\t\t\t\t\tcase 'clamp':\n\t\t\t\t\t\ttexture.wrapT = ClampToEdgeWrapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\n\t\t\t\t}\n\n\t\t\t\tswitch ( texture2d.filter ) {\n\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'linear':\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'nearest':\n\t\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\treturn texture;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst objectPindex = objectData.pindex;\n\n\t\t\tconst materialMap = {};\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tconst pindex = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectPindex;\n\n\t\t\t\tif ( materialMap[ pindex ] === undefined ) materialMap[ pindex ] = [];\n\n\t\t\t\tmaterialMap[ pindex ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst keys = Object.keys( materialMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\tconst materialIndex = keys[ i ];\n\t\t\t\tconst trianglePropertiesProps = materialMap[ materialIndex ];\n\t\t\t\tconst basematerialData = basematerials.basematerials[ materialIndex ];\n\t\t\t\tconst material = getBuild( basematerialData, objects, modelData, textureData, objectData, buildBasematerial );\n\n\t\t\t\t//\n\n\t\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\t\tconst positionData = [];\n\n\t\t\t\tconst vertices = meshData.vertices;\n\n\t\t\t\tfor ( let j = 0, jl = trianglePropertiesProps.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst triangleProperty = trianglePropertiesProps[ j ];\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\n\t\t\t\t//\n\n\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\tmeshes.push( mesh );\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst uvData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst uvs = texture2dgroup.uvs;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( triangleProperty.v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p1 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p2 * 2 ) + 1 ] );\n\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 0 ] );\n\t\t\t\tuvData.push( uvs[ ( triangleProperty.p3 * 2 ) + 1 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( uvData, 2 ) );\n\n\t\t\t// material\n\n\t\t\tconst texture = getBuild( texture2dgroup, objects, modelData, textureData, objectData, buildTexture );\n\n\t\t\tconst material = new MeshPhongMaterial( { map: texture, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) {\n\n\t\t\t// geometry\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst positionData = [];\n\t\t\tconst colorData = [];\n\n\t\t\tconst vertices = meshData.vertices;\n\t\t\tconst colors = colorgroup.colors;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\n\t\t\t\tconst v1 = triangleProperty.v1;\n\t\t\t\tconst v2 = triangleProperty.v2;\n\t\t\t\tconst v3 = triangleProperty.v3;\n\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v1 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v2 * 3 ) + 2 ] );\n\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 0 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 1 ] );\n\t\t\t\tpositionData.push( vertices[ ( v3 * 3 ) + 2 ] );\n\n\t\t\t\t//\n\n\t\t\t\tconst p1 = ( triangleProperty.p1 !== undefined ) ? triangleProperty.p1 : objectData.pindex;\n\t\t\t\tconst p2 = ( triangleProperty.p2 !== undefined ) ? triangleProperty.p2 : p1;\n\t\t\t\tconst p3 = ( triangleProperty.p3 !== undefined ) ? triangleProperty.p3 : p1;\n\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p1 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p2 * 3 ) + 2 ] );\n\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 0 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 1 ] );\n\t\t\t\tcolorData.push( colors[ ( p3 * 3 ) + 2 ] );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positionData, 3 ) );\n\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colorData, 3 ) );\n\n\t\t\t// material\n\n\t\t\tconst material = new MeshPhongMaterial( { vertexColors: true, flatShading: true } );\n\n\t\t\t// mesh\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildDefaultMesh( meshData ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex( new BufferAttribute( meshData[ 'triangles' ], 1 ) );\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( meshData[ 'vertices' ], 3 ) );\n\n\t\t\tconst material = new MeshPhongMaterial( { color: 0xffffff, flatShading: true } );\n\n\t\t\tconst mesh = new Mesh( geometry, material );\n\n\t\t\treturn mesh;\n\n\t\t}\n\n\t\tfunction buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst keys = Object.keys( resourceMap );\n\t\t\tconst meshes = [];\n\n\t\t\tfor ( let i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\t\tconst resourceId = keys[ i ];\n\t\t\t\tconst triangleProperties = resourceMap[ resourceId ];\n\t\t\t\tconst resourceType = getResourceType( resourceId, modelData );\n\n\t\t\t\tswitch ( resourceType ) {\n\n\t\t\t\t\tcase 'material':\n\t\t\t\t\t\tconst basematerials = modelData.resources.basematerials[ resourceId ];\n\t\t\t\t\t\tconst newMeshes = buildBasematerialsMeshes( basematerials, triangleProperties, meshData, objects, modelData, textureData, objectData );\n\n\t\t\t\t\t\tfor ( let j = 0, jl = newMeshes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tmeshes.push( newMeshes[ j ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tconst texture2dgroup = modelData.resources.texture2dgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildTexturedMesh( texture2dgroup, triangleProperties, meshData, objects, modelData, textureData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertexColors':\n\t\t\t\t\t\tconst colorgroup = modelData.resources.colorgroup[ resourceId ];\n\t\t\t\t\t\tmeshes.push( buildVertexColorMesh( colorgroup, triangleProperties, meshData, objectData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'default':\n\t\t\t\t\t\tmeshes.push( buildDefaultMesh( meshData ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.error( 'THREE.3MFLoader: Unsupported resource type.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tfor ( let i = 0; i < meshes.length; i ++ ) {\n\n\t\t\t\t\tmeshes[ i ].name = objectData.name;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn meshes;\n\n\t\t}\n\n\t\tfunction getResourceType( pid, modelData ) {\n\n\t\t\tif ( modelData.resources.texture2dgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'texture';\n\n\t\t\t} else if ( modelData.resources.basematerials[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'material';\n\n\t\t\t} else if ( modelData.resources.colorgroup[ pid ] !== undefined ) {\n\n\t\t\t\treturn 'vertexColors';\n\n\t\t\t} else if ( pid === 'default' ) {\n\n\t\t\t\treturn 'default';\n\n\t\t\t} else {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction analyzeObject( meshData, objectData ) {\n\n\t\t\tconst resourceMap = {};\n\n\t\t\tconst triangleProperties = meshData[ 'triangleProperties' ];\n\n\t\t\tconst objectPid = objectData.pid;\n\n\t\t\tfor ( let i = 0, l = triangleProperties.length; i < l; i ++ ) {\n\n\t\t\t\tconst triangleProperty = triangleProperties[ i ];\n\t\t\t\tlet pid = ( triangleProperty.pid !== undefined ) ? triangleProperty.pid : objectPid;\n\n\t\t\t\tif ( pid === undefined ) pid = 'default';\n\n\t\t\t\tif ( resourceMap[ pid ] === undefined ) resourceMap[ pid ] = [];\n\n\t\t\t\tresourceMap[ pid ].push( triangleProperty );\n\n\t\t\t}\n\n\t\t\treturn resourceMap;\n\n\t\t}\n\n\t\tfunction buildGroup( meshData, objects, modelData, textureData, objectData ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst resourceMap = analyzeObject( meshData, objectData );\n\t\t\tconst meshes = buildMeshes( resourceMap, meshData, objects, modelData, textureData, objectData );\n\n\t\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction applyExtensions( extensions, meshData, modelXml ) {\n\n\t\t\tif ( ! extensions ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst availableExtensions = [];\n\t\t\tconst keys = Object.keys( extensions );\n\n\t\t\tfor ( let i = 0; i < keys.length; i ++ ) {\n\n\t\t\t\tconst ns = keys[ i ];\n\n\t\t\t\tfor ( let j = 0; j < scope.availableExtensions.length; j ++ ) {\n\n\t\t\t\t\tconst extension = scope.availableExtensions[ j ];\n\n\t\t\t\t\tif ( extension.ns === ns ) {\n\n\t\t\t\t\t\tavailableExtensions.push( extension );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < availableExtensions.length; i ++ ) {\n\n\t\t\t\tconst extension = availableExtensions[ i ];\n\t\t\t\textension.apply( modelXml, extensions[ extension[ 'ns' ] ], meshData );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getBuild( data, objects, modelData, textureData, objectData, builder ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\tdata.build = builder( data, objects, modelData, textureData, objectData );\n\n\t\t\treturn data.build;\n\n\t\t}\n\n\t\tfunction buildBasematerial( materialData, objects, modelData ) {\n\n\t\t\tlet material;\n\n\t\t\tconst displaypropertiesid = materialData.displaypropertiesid;\n\t\t\tconst pbmetallicdisplayproperties = modelData.resources.pbmetallicdisplayproperties;\n\n\t\t\tif ( displaypropertiesid !== null && pbmetallicdisplayproperties[ displaypropertiesid ] !== undefined ) {\n\n\t\t\t\t// metallic display property, use StandardMaterial\n\n\t\t\t\tconst pbmetallicdisplayproperty = pbmetallicdisplayproperties[ displaypropertiesid ];\n\t\t\t\tconst metallicData = pbmetallicdisplayproperty.data[ materialData.index ];\n\n\t\t\t\tmaterial = new MeshStandardMaterial( { flatShading: true, roughness: metallicData.roughness, metalness: metallicData.metallicness } );\n\n\t\t\t} else {\n\n\t\t\t\t// otherwise use PhongMaterial\n\n\t\t\t\tmaterial = new MeshPhongMaterial( { flatShading: true } );\n\n\t\t\t}\n\n\t\t\tmaterial.name = materialData.name;\n\n\t\t\t// displaycolor MUST be specified with a value of a 6 or 8 digit hexadecimal number, e.g. \"#RRGGBB\" or \"#RRGGBBAA\"\n\n\t\t\tconst displaycolor = materialData.displaycolor;\n\n\t\t\tconst color = displaycolor.substring( 0, 7 );\n\t\t\tmaterial.color.setStyle( color );\n\t\t\tmaterial.color.convertSRGBToLinear(); // displaycolor is in sRGB\n\n\t\t\t// process alpha if set\n\n\t\t\tif ( displaycolor.length === 9 ) {\n\n\t\t\t\tmaterial.opacity = parseInt( displaycolor.charAt( 7 ) + displaycolor.charAt( 8 ), 16 ) / 255;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction buildComposite( compositeData, objects, modelData, textureData ) {\n\n\t\t\tconst composite = new Group();\n\n\t\t\tfor ( let j = 0; j < compositeData.length; j ++ ) {\n\n\t\t\t\tconst component = compositeData[ j ];\n\t\t\t\tlet build = objects[ component.objectId ];\n\n\t\t\t\tif ( build === undefined ) {\n\n\t\t\t\t\tbuildObject( component.objectId, objects, modelData, textureData );\n\t\t\t\t\tbuild = objects[ component.objectId ];\n\n\t\t\t\t}\n\n\t\t\t\tconst object3D = build.clone();\n\n\t\t\t\t// apply component transform\n\n\t\t\t\tconst transform = component.transform;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tcomposite.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn composite;\n\n\t\t}\n\n\t\tfunction buildObject( objectId, objects, modelData, textureData ) {\n\n\t\t\tconst objectData = modelData[ 'resources' ][ 'object' ][ objectId ];\n\n\t\t\tif ( objectData[ 'mesh' ] ) {\n\n\t\t\t\tconst meshData = objectData[ 'mesh' ];\n\n\t\t\t\tconst extensions = modelData[ 'extensions' ];\n\t\t\t\tconst modelXml = modelData[ 'xml' ];\n\n\t\t\t\tapplyExtensions( extensions, meshData, modelXml );\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( meshData, objects, modelData, textureData, objectData, buildGroup );\n\n\t\t\t} else {\n\n\t\t\t\tconst compositeData = objectData[ 'components' ];\n\n\t\t\t\tobjects[ objectData.id ] = getBuild( compositeData, objects, modelData, textureData, objectData, buildComposite );\n\n\t\t\t}\n\n\t\t\tif ( objectData.name ) {\n\n\t\t\t\tobjects[ objectData.id ].name = objectData.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildObjects( data3mf ) {\n\n\t\t\tconst modelsData = data3mf.model;\n\t\t\tconst modelRels = data3mf.modelRels;\n\t\t\tconst objects = {};\n\t\t\tconst modelsKeys = Object.keys( modelsData );\n\t\t\tconst textureData = {};\n\n\t\t\t// evaluate model relationships to textures\n\n\t\t\tif ( modelRels ) {\n\n\t\t\t\tfor ( let i = 0, l = modelRels.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst modelRel = modelRels[ i ];\n\t\t\t\t\tconst textureKey = modelRel.target.substring( 1 );\n\n\t\t\t\t\tif ( data3mf.texture[ textureKey ] ) {\n\n\t\t\t\t\t\ttextureData[ modelRel.target ] = data3mf.texture[ textureKey ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// start build\n\n\t\t\tfor ( let i = 0; i < modelsKeys.length; i ++ ) {\n\n\t\t\t\tconst modelsKey = modelsKeys[ i ];\n\t\t\t\tconst modelData = modelsData[ modelsKey ];\n\n\t\t\t\tconst objectIds = Object.keys( modelData[ 'resources' ][ 'object' ] );\n\n\t\t\t\tfor ( let j = 0; j < objectIds.length; j ++ ) {\n\n\t\t\t\t\tconst objectId = objectIds[ j ];\n\n\t\t\t\t\tbuildObject( objectId, objects, modelData, textureData );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn objects;\n\n\t\t}\n\n\t\tfunction fetch3DModelPart( rels ) {\n\n\t\t\tfor ( let i = 0; i < rels.length; i ++ ) {\n\n\t\t\t\tconst rel = rels[ i ];\n\t\t\t\tconst extension = rel.target.split( '.' ).pop();\n\n\t\t\t\tif ( extension.toLowerCase() === 'model' ) return rel;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction build( objects, data3mf ) {\n\n\t\t\tconst group = new Group();\n\n\t\t\tconst relationship = fetch3DModelPart( data3mf[ 'rels' ] );\n\t\t\tconst buildData = data3mf.model[ relationship[ 'target' ].substring( 1 ) ][ 'build' ];\n\n\t\t\tfor ( let i = 0; i < buildData.length; i ++ ) {\n\n\t\t\t\tconst buildItem = buildData[ i ];\n\t\t\t\tconst object3D = objects[ buildItem[ 'objectId' ] ].clone();\n\n\t\t\t\t// apply transform\n\n\t\t\t\tconst transform = buildItem[ 'transform' ];\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\tobject3D.applyMatrix4( transform );\n\n\t\t\t\t}\n\n\t\t\t\tgroup.add( object3D );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tconst data3mf = loadDocument( data );\n\t\tconst objects = buildObjects( data3mf );\n\n\t\treturn build( objects, data3mf );\n\n\t}\n\n\taddExtension( extension ) {\n\n\t\tthis.availableExtensions.push( extension );\n\n\t}\n\n}\n\nexport { ThreeMFLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}