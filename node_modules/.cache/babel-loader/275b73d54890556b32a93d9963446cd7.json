{"ast":null,"code":"import { Box3D } from './box3d.js';\nimport { Coord3D, CoordIsEqual3D } from './coord3d.js';\nimport { IsGreaterOrEqual, IsLowerOrEqual } from './geometry.js';\nexport class OctreeNode {\n  constructor(boundingBox, level) {\n    this.boundingBox = boundingBox;\n    this.level = level;\n    this.pointItems = [];\n    this.childNodes = [];\n  }\n\n  AddPoint(point, data, options) {\n    let node = this.FindNodeForPoint(point);\n\n    if (node === null) {\n      return false;\n    }\n\n    if (node.FindPointDirectly(point) !== null) {\n      return false;\n    }\n\n    if (node.pointItems.length < options.maxPointsPerNode || node.level >= options.maxTreeDepth) {\n      node.AddPointDirectly(point, data);\n      return true;\n    } else {\n      node.CreateChildNodes();\n      let oldPointItems = node.pointItems;\n      node.pointItems = [];\n\n      for (let i = 0; i < oldPointItems.length; i++) {\n        let pointItem = oldPointItems[i];\n\n        if (!node.AddPoint(pointItem.point, pointItem.data, options)) {\n          return false;\n        }\n      }\n\n      return node.AddPoint(point, data, options);\n    }\n  }\n\n  FindPoint(point) {\n    let node = this.FindNodeForPoint(point);\n\n    if (node === null) {\n      return null;\n    }\n\n    return node.FindPointDirectly(point);\n  }\n\n  AddPointDirectly(point, data) {\n    this.pointItems.push({\n      point: point,\n      data: data\n    });\n  }\n\n  FindPointDirectly(point) {\n    for (let i = 0; i < this.pointItems.length; i++) {\n      let pointItem = this.pointItems[i];\n\n      if (CoordIsEqual3D(point, pointItem.point)) {\n        return pointItem.data;\n      }\n    }\n\n    return null;\n  }\n\n  FindNodeForPoint(point) {\n    if (!this.IsPointInBounds(point)) {\n      return null;\n    }\n\n    if (this.childNodes.length === 0) {\n      return this;\n    }\n\n    for (let i = 0; i < this.childNodes.length; i++) {\n      let childNode = this.childNodes[i];\n      let foundNode = childNode.FindNodeForPoint(point);\n\n      if (foundNode !== null) {\n        return foundNode;\n      }\n    }\n\n    return null;\n  }\n\n  CreateChildNodes() {\n    function AddChildNode(node, minX, minY, minZ, sizeX, sizeY, sizeZ) {\n      let box = new Box3D(new Coord3D(minX, minY, minZ), new Coord3D(minX + sizeX, minY + sizeY, minZ + sizeZ));\n      node.childNodes.push(new OctreeNode(box, node.level + 1));\n    }\n\n    let min = this.boundingBox.min;\n    let center = this.boundingBox.GetCenter();\n    let sizeX = (this.boundingBox.max.x - this.boundingBox.min.x) / 2.0;\n    let sizeY = (this.boundingBox.max.y - this.boundingBox.min.y) / 2.0;\n    let sizeZ = (this.boundingBox.max.z - this.boundingBox.min.z) / 2.0;\n    AddChildNode(this, min.x, min.y, min.z, sizeX, sizeY, sizeZ);\n    AddChildNode(this, center.x, min.y, min.z, sizeX, sizeY, sizeZ);\n    AddChildNode(this, min.x, center.y, min.z, sizeX, sizeY, sizeZ);\n    AddChildNode(this, center.x, center.y, min.z, sizeX, sizeY, sizeZ);\n    AddChildNode(this, min.x, min.y, center.z, sizeX, sizeY, sizeZ);\n    AddChildNode(this, center.x, min.y, center.z, sizeX, sizeY, sizeZ);\n    AddChildNode(this, min.x, center.y, center.z, sizeX, sizeY, sizeZ);\n    AddChildNode(this, center.x, center.y, center.z, sizeX, sizeY, sizeZ);\n  }\n\n  IsPointInBounds(point) {\n    let isEqual = IsGreaterOrEqual(point.x, this.boundingBox.min.x) && IsGreaterOrEqual(point.y, this.boundingBox.min.y) && IsGreaterOrEqual(point.z, this.boundingBox.min.z) && IsLowerOrEqual(point.x, this.boundingBox.max.x) && IsLowerOrEqual(point.y, this.boundingBox.max.y) && IsLowerOrEqual(point.z, this.boundingBox.max.z);\n    return isEqual;\n  }\n\n}\nexport class Octree {\n  constructor(boundingBox, options) {\n    this.options = {\n      maxPointsPerNode: 10,\n      maxTreeDepth: 10\n    };\n\n    if (options !== undefined) {\n      if (options.maxPointsPerNode !== undefined) {\n        this.options.maxPointsPerNode = options.maxPointsPerNode;\n      }\n\n      if (options.maxTreeDepth !== undefined) {\n        this.options.maxTreeDepth = options.maxTreeDepth;\n      }\n    }\n\n    this.rootNode = new OctreeNode(boundingBox, 0);\n  }\n\n  AddPoint(point, data) {\n    return this.rootNode.AddPoint(point, data, this.options);\n  }\n\n  FindPoint(point) {\n    return this.rootNode.FindPoint(point);\n  }\n\n}","map":{"version":3,"names":["Box3D","Coord3D","CoordIsEqual3D","IsGreaterOrEqual","IsLowerOrEqual","OctreeNode","constructor","boundingBox","level","pointItems","childNodes","AddPoint","point","data","options","node","FindNodeForPoint","FindPointDirectly","length","maxPointsPerNode","maxTreeDepth","AddPointDirectly","CreateChildNodes","oldPointItems","i","pointItem","FindPoint","push","IsPointInBounds","childNode","foundNode","AddChildNode","minX","minY","minZ","sizeX","sizeY","sizeZ","box","min","center","GetCenter","max","x","y","z","isEqual","Octree","undefined","rootNode"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/geometry/octree.js"],"sourcesContent":["import { Box3D } from './box3d.js';\r\nimport { Coord3D, CoordIsEqual3D } from './coord3d.js';\r\nimport { IsGreaterOrEqual, IsLowerOrEqual } from './geometry.js';\r\n\r\nexport class OctreeNode\r\n{\r\n    constructor (boundingBox, level)\r\n    {\r\n        this.boundingBox = boundingBox;\r\n        this.level = level;\r\n        this.pointItems = [];\r\n        this.childNodes = [];\r\n    }\r\n\r\n    AddPoint (point, data, options)\r\n    {\r\n        let node = this.FindNodeForPoint (point);\r\n        if (node === null) {\r\n            return false;\r\n        }\r\n\r\n        if (node.FindPointDirectly (point) !== null) {\r\n            return false;\r\n        }\r\n\r\n        if (node.pointItems.length < options.maxPointsPerNode || node.level >= options.maxTreeDepth) {\r\n            node.AddPointDirectly (point, data);\r\n            return true;\r\n        } else {\r\n            node.CreateChildNodes ();\r\n            let oldPointItems = node.pointItems;\r\n            node.pointItems = [];\r\n            for (let i = 0; i < oldPointItems.length; i++) {\r\n                let pointItem = oldPointItems[i];\r\n                if (!node.AddPoint (pointItem.point, pointItem.data, options)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return node.AddPoint (point, data, options);\r\n        }\r\n    }\r\n\r\n    FindPoint (point)\r\n    {\r\n        let node = this.FindNodeForPoint (point);\r\n        if (node === null) {\r\n            return null;\r\n        }\r\n        return node.FindPointDirectly (point);\r\n    }\r\n\r\n    AddPointDirectly (point, data)\r\n    {\r\n        this.pointItems.push ({\r\n            point : point,\r\n            data : data\r\n        });\r\n    }\r\n\r\n    FindPointDirectly (point)\r\n    {\r\n        for (let i = 0; i < this.pointItems.length; i++) {\r\n            let pointItem = this.pointItems[i];\r\n            if (CoordIsEqual3D (point, pointItem.point)) {\r\n                return pointItem.data;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    FindNodeForPoint (point)\r\n    {\r\n        if (!this.IsPointInBounds (point)) {\r\n            return null;\r\n        }\r\n\r\n        if (this.childNodes.length === 0) {\r\n            return this;\r\n        }\r\n\r\n        for (let i = 0; i < this.childNodes.length; i++) {\r\n            let childNode = this.childNodes[i];\r\n            let foundNode = childNode.FindNodeForPoint (point);\r\n            if (foundNode !== null) {\r\n                return foundNode;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    CreateChildNodes ()\r\n    {\r\n        function AddChildNode (node, minX, minY, minZ, sizeX, sizeY, sizeZ)\r\n        {\r\n            let box = new Box3D (\r\n                new Coord3D (minX, minY, minZ),\r\n                new Coord3D (minX + sizeX, minY + sizeY, minZ + sizeZ)\r\n            );\r\n            node.childNodes.push (new OctreeNode (box, node.level + 1));\r\n        }\r\n\r\n        let min = this.boundingBox.min;\r\n        let center = this.boundingBox.GetCenter ();\r\n        let sizeX = (this.boundingBox.max.x - this.boundingBox.min.x) / 2.0;\r\n        let sizeY = (this.boundingBox.max.y - this.boundingBox.min.y) / 2.0;\r\n        let sizeZ = (this.boundingBox.max.z - this.boundingBox.min.z) / 2.0;\r\n\r\n        AddChildNode (this, min.x, min.y, min.z, sizeX, sizeY, sizeZ);\r\n        AddChildNode (this, center.x, min.y, min.z, sizeX, sizeY, sizeZ);\r\n        AddChildNode (this, min.x, center.y, min.z, sizeX, sizeY, sizeZ);\r\n        AddChildNode (this, center.x, center.y, min.z, sizeX, sizeY, sizeZ);\r\n        AddChildNode (this, min.x, min.y, center.z, sizeX, sizeY, sizeZ);\r\n        AddChildNode (this, center.x, min.y, center.z, sizeX, sizeY, sizeZ);\r\n        AddChildNode (this, min.x, center.y, center.z, sizeX, sizeY, sizeZ);\r\n        AddChildNode (this, center.x, center.y, center.z, sizeX, sizeY, sizeZ);\r\n    }\r\n\r\n    IsPointInBounds (point)\r\n    {\r\n        let isEqual =\r\n            IsGreaterOrEqual (point.x, this.boundingBox.min.x) &&\r\n            IsGreaterOrEqual (point.y, this.boundingBox.min.y) &&\r\n            IsGreaterOrEqual (point.z, this.boundingBox.min.z) &&\r\n            IsLowerOrEqual (point.x, this.boundingBox.max.x) &&\r\n            IsLowerOrEqual (point.y, this.boundingBox.max.y) &&\r\n            IsLowerOrEqual (point.z, this.boundingBox.max.z);\r\n        return isEqual;\r\n    }\r\n}\r\n\r\nexport class Octree\r\n{\r\n    constructor (boundingBox, options)\r\n    {\r\n        this.options = {\r\n            maxPointsPerNode : 10,\r\n            maxTreeDepth : 10\r\n        };\r\n        if (options !== undefined) {\r\n            if (options.maxPointsPerNode !== undefined) {\r\n                this.options.maxPointsPerNode = options.maxPointsPerNode;\r\n            }\r\n            if (options.maxTreeDepth !== undefined) {\r\n                this.options.maxTreeDepth = options.maxTreeDepth;\r\n            }\r\n        }\r\n        this.rootNode = new OctreeNode (boundingBox, 0);\r\n    }\r\n\r\n    AddPoint (point, data)\r\n    {\r\n        return this.rootNode.AddPoint (point, data, this.options);\r\n    }\r\n\r\n    FindPoint (point)\r\n    {\r\n        return this.rootNode.FindPoint (point);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}