{"ast":null,"code":"import { RGBColor } from '../model/color.js';\nimport { ConvertColorToThreeColor } from '../threejs/threeutils.js';\nimport * as THREE from 'three';\nexport function SetThreeMeshPolygonOffset(mesh, offset) {\n  function SetMaterialsPolygonOffset(materials, offset) {\n    for (let material of materials) {\n      material.polygonOffset = offset;\n      material.polygonOffsetUnit = 1;\n      material.polygonOffsetFactor = 1;\n    }\n  }\n\n  SetMaterialsPolygonOffset(mesh.material, offset);\n\n  if (mesh.userData.threeMaterials) {\n    SetMaterialsPolygonOffset(mesh.userData.threeMaterials, offset);\n  }\n}\nexport class ViewerGeometry {\n  constructor(scene) {\n    this.scene = scene;\n    this.mainObject = null;\n    this.mainEdgeObject = null;\n    this.edgeSettings = {\n      showEdges: false,\n      edgeColor: new RGBColor(0, 0, 0),\n      edgeThreshold: 1\n    };\n  }\n\n  SetMainObject(mainObject) {\n    this.mainObject = mainObject;\n    this.scene.add(this.mainObject);\n\n    if (this.edgeSettings.showEdges) {\n      this.GenerateMainEdgeObject();\n    }\n  }\n\n  UpdateWorldMatrix() {\n    if (this.mainObject !== null) {\n      this.mainObject.updateWorldMatrix(true, true);\n    }\n  }\n\n  SetEdgeSettings(show, color, threshold) {\n    let needToGenerate = false;\n\n    if (show && (!this.edgeSettings.showEdges || this.edgeSettings.edgeThreshold !== threshold)) {\n      needToGenerate = true;\n    }\n\n    this.edgeSettings.showEdges = show;\n    this.edgeSettings.edgeThreshold = threshold;\n    this.edgeSettings.edgeColor = color;\n\n    if (this.mainObject === null) {\n      return;\n    }\n\n    if (this.edgeSettings.showEdges) {\n      if (needToGenerate) {\n        this.ClearMainEdgeObject();\n        this.GenerateMainEdgeObject();\n      } else {\n        let edgeColor = ConvertColorToThreeColor(this.edgeSettings.edgeColor);\n        this.EnumerateEdges(edge => {\n          edge.material.color = edgeColor;\n        });\n      }\n    } else {\n      this.ClearMainEdgeObject();\n    }\n  }\n\n  GenerateMainEdgeObject() {\n    let edgeColor = ConvertColorToThreeColor(this.edgeSettings.edgeColor);\n    this.mainEdgeObject = new THREE.Object3D();\n    this.UpdateWorldMatrix();\n    this.EnumerateMeshes(mesh => {\n      SetThreeMeshPolygonOffset(mesh, true);\n      let edges = new THREE.EdgesGeometry(mesh.geometry, this.edgeSettings.edgeThreshold);\n      let line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({\n        color: edgeColor\n      }));\n      line.applyMatrix4(mesh.matrixWorld);\n      line.userData = mesh.userData;\n      line.visible = mesh.visible;\n      this.mainEdgeObject.add(line);\n    });\n    this.scene.add(this.mainEdgeObject);\n  }\n\n  GetBoundingBox(needToProcess) {\n    let hasMesh = false;\n    let boundingBox = new THREE.Box3();\n    this.EnumerateMeshes(mesh => {\n      if (needToProcess(mesh.userData)) {\n        boundingBox.union(new THREE.Box3().setFromObject(mesh));\n        hasMesh = true;\n      }\n    });\n\n    if (!hasMesh) {\n      return null;\n    }\n\n    return boundingBox;\n  }\n\n  GetBoundingSphere(needToProcess) {\n    let boundingBox = this.GetBoundingBox(needToProcess);\n\n    if (boundingBox === null) {\n      return null;\n    }\n\n    let boundingSphere = new THREE.Sphere();\n    boundingBox.getBoundingSphere(boundingSphere);\n    return boundingSphere;\n  }\n\n  Clear() {\n    this.ClearMainObject();\n    this.ClearMainEdgeObject();\n  }\n\n  ClearMainObject() {\n    if (this.mainObject === null) {\n      return;\n    }\n\n    this.EnumerateMeshes(mesh => {\n      mesh.geometry.dispose();\n    });\n    this.scene.remove(this.mainObject);\n    this.mainObject = null;\n  }\n\n  ClearMainEdgeObject() {\n    if (this.mainEdgeObject === null) {\n      return;\n    }\n\n    this.EnumerateMeshes(mesh => {\n      SetThreeMeshPolygonOffset(mesh, false);\n    });\n    this.EnumerateEdges(edge => {\n      edge.geometry.dispose();\n    });\n    this.scene.remove(this.mainEdgeObject);\n    this.mainEdgeObject = null;\n  }\n\n  EnumerateMeshes(enumerator) {\n    if (this.mainObject === null) {\n      return;\n    }\n\n    this.mainObject.traverse(obj => {\n      if (obj.isMesh) {\n        enumerator(obj);\n      }\n    });\n  }\n\n  EnumerateEdges(enumerator) {\n    if (this.mainEdgeObject === null) {\n      return;\n    }\n\n    this.mainEdgeObject.traverse(obj => {\n      if (obj.isLineSegments) {\n        enumerator(obj);\n      }\n    });\n  }\n\n  GetMeshIntersectionUnderMouse(mouseCoords, camera, width, height) {\n    if (this.mainObject === null) {\n      return null;\n    }\n\n    if (mouseCoords.x < 0.0 || mouseCoords.x > width || mouseCoords.y < 0.0 || mouseCoords.y > height) {\n      return null;\n    }\n\n    let raycaster = new THREE.Raycaster();\n    let mousePos = new THREE.Vector2();\n    mousePos.x = mouseCoords.x / width * 2 - 1;\n    mousePos.y = -(mouseCoords.y / height) * 2 + 1;\n    raycaster.setFromCamera(mousePos, camera);\n    let iSectObjects = raycaster.intersectObject(this.mainObject, true);\n\n    for (let i = 0; i < iSectObjects.length; i++) {\n      let iSectObject = iSectObjects[i];\n\n      if (iSectObject.object.type === 'Mesh' && iSectObject.object.visible) {\n        return iSectObject;\n      }\n    }\n\n    return null;\n  }\n\n}\nexport class ViewerExtraGeometry {\n  constructor(scene) {\n    this.scene = scene;\n    this.mainObject = null;\n  }\n\n  AddObject(object) {\n    if (this.mainObject === null) {\n      this.mainObject = new THREE.Object3D();\n      this.scene.add(this.mainObject);\n    }\n\n    this.mainObject.add(object);\n  }\n\n  Clear() {\n    if (this.mainObject === null) {\n      return;\n    }\n\n    this.mainObject.traverse(obj => {\n      if (obj.isMesh || obj.isLineSegments) {\n        obj.geometry.dispose();\n      }\n    });\n    this.scene.remove(this.mainObject);\n    this.mainObject = null;\n  }\n\n}","map":{"version":3,"names":["RGBColor","ConvertColorToThreeColor","THREE","SetThreeMeshPolygonOffset","mesh","offset","SetMaterialsPolygonOffset","materials","material","polygonOffset","polygonOffsetUnit","polygonOffsetFactor","userData","threeMaterials","ViewerGeometry","constructor","scene","mainObject","mainEdgeObject","edgeSettings","showEdges","edgeColor","edgeThreshold","SetMainObject","add","GenerateMainEdgeObject","UpdateWorldMatrix","updateWorldMatrix","SetEdgeSettings","show","color","threshold","needToGenerate","ClearMainEdgeObject","EnumerateEdges","edge","Object3D","EnumerateMeshes","edges","EdgesGeometry","geometry","line","LineSegments","LineBasicMaterial","applyMatrix4","matrixWorld","visible","GetBoundingBox","needToProcess","hasMesh","boundingBox","Box3","union","setFromObject","GetBoundingSphere","boundingSphere","Sphere","getBoundingSphere","Clear","ClearMainObject","dispose","remove","enumerator","traverse","obj","isMesh","isLineSegments","GetMeshIntersectionUnderMouse","mouseCoords","camera","width","height","x","y","raycaster","Raycaster","mousePos","Vector2","setFromCamera","iSectObjects","intersectObject","i","length","iSectObject","object","type","ViewerExtraGeometry","AddObject"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/viewer/viewergeometry.js"],"sourcesContent":["import { RGBColor } from '../model/color.js';\r\nimport { ConvertColorToThreeColor } from '../threejs/threeutils.js';\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport function SetThreeMeshPolygonOffset (mesh, offset)\r\n{\r\n    function SetMaterialsPolygonOffset (materials, offset)\r\n    {\r\n        for (let material of materials) {\r\n            material.polygonOffset = offset;\r\n            material.polygonOffsetUnit = 1;\r\n            material.polygonOffsetFactor = 1;\r\n        }\r\n    }\r\n\r\n    SetMaterialsPolygonOffset (mesh.material, offset);\r\n    if (mesh.userData.threeMaterials) {\r\n        SetMaterialsPolygonOffset (mesh.userData.threeMaterials, offset);\r\n    }\r\n}\r\n\r\nexport class ViewerGeometry\r\n{\r\n    constructor (scene)\r\n    {\r\n        this.scene = scene;\r\n\r\n        this.mainObject = null;\r\n        this.mainEdgeObject = null;\r\n\r\n        this.edgeSettings = {\r\n            showEdges : false,\r\n            edgeColor : new RGBColor (0, 0, 0),\r\n            edgeThreshold : 1\r\n        };\r\n    }\r\n\r\n    SetMainObject (mainObject)\r\n    {\r\n        this.mainObject = mainObject;\r\n        this.scene.add (this.mainObject);\r\n        if (this.edgeSettings.showEdges) {\r\n            this.GenerateMainEdgeObject ();\r\n        }\r\n    }\r\n\r\n    UpdateWorldMatrix ()\r\n    {\r\n        if (this.mainObject !== null) {\r\n            this.mainObject.updateWorldMatrix (true, true);\r\n        }\r\n    }\r\n\r\n    SetEdgeSettings (show, color, threshold)\r\n    {\r\n        let needToGenerate = false;\r\n        if (show && (!this.edgeSettings.showEdges || this.edgeSettings.edgeThreshold !== threshold)) {\r\n            needToGenerate = true;\r\n        }\r\n\r\n        this.edgeSettings.showEdges = show;\r\n        this.edgeSettings.edgeThreshold = threshold;\r\n        this.edgeSettings.edgeColor = color;\r\n\r\n        if (this.mainObject === null) {\r\n            return;\r\n        }\r\n\r\n        if (this.edgeSettings.showEdges) {\r\n            if (needToGenerate) {\r\n                this.ClearMainEdgeObject ();\r\n                this.GenerateMainEdgeObject ();\r\n            } else {\r\n\r\n                let edgeColor = ConvertColorToThreeColor (this.edgeSettings.edgeColor);\r\n                this.EnumerateEdges ((edge) => {\r\n                    edge.material.color = edgeColor;\r\n                });\r\n            }\r\n        } else {\r\n            this.ClearMainEdgeObject ();\r\n        }\r\n    }\r\n\r\n    GenerateMainEdgeObject ()\r\n    {\r\n        let edgeColor = ConvertColorToThreeColor (this.edgeSettings.edgeColor);\r\n        this.mainEdgeObject = new THREE.Object3D ();\r\n\r\n        this.UpdateWorldMatrix ();\r\n        this.EnumerateMeshes ((mesh) => {\r\n            SetThreeMeshPolygonOffset (mesh, true);\r\n            let edges = new THREE.EdgesGeometry (mesh.geometry, this.edgeSettings.edgeThreshold);\r\n            let line = new THREE.LineSegments (edges, new THREE.LineBasicMaterial ({\r\n                color: edgeColor\r\n            }));\r\n            line.applyMatrix4 (mesh.matrixWorld);\r\n            line.userData = mesh.userData;\r\n            line.visible = mesh.visible;\r\n            this.mainEdgeObject.add (line);\r\n        });\r\n        this.scene.add (this.mainEdgeObject);\r\n    }\r\n\r\n    GetBoundingBox (needToProcess)\r\n    {\r\n        let hasMesh = false;\r\n        let boundingBox = new THREE.Box3 ();\r\n        this.EnumerateMeshes ((mesh) => {\r\n            if (needToProcess (mesh.userData)) {\r\n                boundingBox.union (new THREE.Box3 ().setFromObject (mesh));\r\n                hasMesh = true;\r\n            }\r\n        });\r\n        if (!hasMesh) {\r\n            return null;\r\n        }\r\n        return boundingBox;\r\n    }\r\n\r\n    GetBoundingSphere (needToProcess)\r\n    {\r\n        let boundingBox = this.GetBoundingBox (needToProcess);\r\n        if (boundingBox === null) {\r\n            return null;\r\n        }\r\n\r\n        let boundingSphere = new THREE.Sphere ();\r\n        boundingBox.getBoundingSphere (boundingSphere);\r\n        return boundingSphere;\r\n    }\r\n\r\n    Clear ()\r\n    {\r\n        this.ClearMainObject ();\r\n        this.ClearMainEdgeObject ();\r\n    }\r\n\r\n    ClearMainObject ()\r\n    {\r\n        if (this.mainObject === null) {\r\n            return;\r\n        }\r\n\r\n        this.EnumerateMeshes ((mesh) => {\r\n            mesh.geometry.dispose ();\r\n        });\r\n        this.scene.remove (this.mainObject);\r\n        this.mainObject = null;\r\n    }\r\n\r\n    ClearMainEdgeObject ()\r\n    {\r\n        if (this.mainEdgeObject === null) {\r\n            return;\r\n        }\r\n\r\n        this.EnumerateMeshes ((mesh) => {\r\n            SetThreeMeshPolygonOffset (mesh, false);\r\n        });\r\n        this.EnumerateEdges ((edge) => {\r\n            edge.geometry.dispose ();\r\n        });\r\n        this.scene.remove (this.mainEdgeObject);\r\n        this.mainEdgeObject = null;\r\n    }\r\n\r\n    EnumerateMeshes (enumerator)\r\n    {\r\n        if (this.mainObject === null) {\r\n            return;\r\n        }\r\n        this.mainObject.traverse ((obj) => {\r\n            if (obj.isMesh) {\r\n                enumerator (obj);\r\n            }\r\n        });\r\n    }\r\n\r\n    EnumerateEdges (enumerator)\r\n    {\r\n        if (this.mainEdgeObject === null) {\r\n            return;\r\n        }\r\n        this.mainEdgeObject.traverse ((obj) => {\r\n            if (obj.isLineSegments) {\r\n                enumerator (obj);\r\n            }\r\n        });\r\n    }\r\n\r\n    GetMeshIntersectionUnderMouse (mouseCoords, camera, width, height)\r\n    {\r\n        if (this.mainObject === null) {\r\n            return null;\r\n        }\r\n\r\n        if (mouseCoords.x < 0.0 || mouseCoords.x > width || mouseCoords.y < 0.0 || mouseCoords.y > height) {\r\n            return null;\r\n        }\r\n\r\n        let raycaster = new THREE.Raycaster ();\r\n        let mousePos = new THREE.Vector2 ();\r\n        mousePos.x = (mouseCoords.x / width) * 2 - 1;\r\n        mousePos.y = -(mouseCoords.y / height) * 2 + 1;\r\n        raycaster.setFromCamera (mousePos, camera);\r\n        let iSectObjects = raycaster.intersectObject (this.mainObject, true);\r\n        for (let i = 0; i < iSectObjects.length; i++) {\r\n            let iSectObject = iSectObjects[i];\r\n            if (iSectObject.object.type === 'Mesh' && iSectObject.object.visible) {\r\n                return iSectObject;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n\r\nexport class ViewerExtraGeometry\r\n{\r\n    constructor (scene)\r\n    {\r\n        this.scene = scene;\r\n        this.mainObject = null;\r\n    }\r\n\r\n    AddObject (object)\r\n    {\r\n        if (this.mainObject === null) {\r\n            this.mainObject = new THREE.Object3D ();\r\n            this.scene.add (this.mainObject);\r\n        }\r\n        this.mainObject.add (object);\r\n    }\r\n\r\n    Clear ()\r\n    {\r\n        if (this.mainObject === null) {\r\n            return;\r\n        }\r\n        this.mainObject.traverse ((obj) => {\r\n            if (obj.isMesh || obj.isLineSegments) {\r\n                obj.geometry.dispose ();\r\n            }\r\n        });\r\n        this.scene.remove (this.mainObject);\r\n        this.mainObject = null;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}