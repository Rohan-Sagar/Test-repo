{"ast":null,"code":"import { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { LoadExternalLibrary } from '../io/externallibs.js';\nimport { RGBColorFromFloatComponents } from '../model/color.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { ColorToMaterialConverter } from './importerutils.js';\nexport class ImporterIfc extends ImporterBase {\n  constructor() {\n    super();\n    this.ifc = null;\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'ifc';\n  }\n\n  GetUpDirection() {\n    return Direction.Y;\n  }\n\n  ClearContent() {\n    this.expressIDToMesh = null;\n    this.colorToMaterial = null;\n  }\n\n  ResetContent() {\n    this.expressIDToMesh = new Map();\n    this.colorToMaterial = new ColorToMaterialConverter(this.model);\n  }\n\n  ImportContent(fileContent, onFinish) {\n    if (this.ifc === null) {\n      LoadExternalLibrary('loaders/web-ifc-api-browser.js').then(() => {\n        this.ifc = new WebIFC.IfcAPI();\n        this.ifc.Init().then(() => {\n          this.ImportIfcContent(fileContent);\n          onFinish();\n        });\n      }).catch(() => {\n        this.SetError('Failed to load web-ifc.');\n        onFinish();\n      });\n    } else {\n      this.ImportIfcContent(fileContent);\n      onFinish();\n    }\n  }\n\n  ImportIfcContent(fileContent) {\n    const fileBuffer = new Uint8Array(fileContent);\n    const modelID = this.ifc.OpenModel(fileBuffer, {\n      COORDINATE_TO_ORIGIN: true\n    });\n    const ifcMeshes = this.ifc.LoadAllGeometry(modelID);\n\n    for (let meshIndex = 0; meshIndex < ifcMeshes.size(); meshIndex++) {\n      const ifcMesh = ifcMeshes.get(meshIndex);\n\n      if (ifcMesh.geometries.size() > 0) {\n        this.ImportIfcMesh(modelID, ifcMesh);\n      }\n    }\n\n    this.ImportProperties(modelID);\n    this.ifc.CloseModel(modelID);\n  }\n\n  ImportIfcMesh(modelID, ifcMesh) {\n    let mesh = new Mesh();\n    mesh.SetName('Mesh ' + ifcMesh.expressID.toString());\n    let vertexOffset = 0;\n    const ifcGeometries = ifcMesh.geometries;\n\n    for (let geometryIndex = 0; geometryIndex < ifcGeometries.size(); geometryIndex++) {\n      const ifcGeometry = ifcGeometries.get(geometryIndex);\n      const ifcGeometryData = this.ifc.GetGeometry(modelID, ifcGeometry.geometryExpressID);\n      const ifcVertices = this.ifc.GetVertexArray(ifcGeometryData.GetVertexData(), ifcGeometryData.GetVertexDataSize());\n      const ifcIndices = this.ifc.GetIndexArray(ifcGeometryData.GetIndexData(), ifcGeometryData.GetIndexDataSize());\n      const materialIndex = this.GetMaterialIndexByColor(ifcGeometry.color);\n      const matrix = new Matrix(ifcGeometry.flatTransformation);\n      const transformation = new Transformation(matrix);\n\n      for (let i = 0; i < ifcVertices.length; i += 6) {\n        const x = ifcVertices[i];\n        const y = ifcVertices[i + 1];\n        const z = ifcVertices[i + 2];\n        const coord = new Coord3D(x, y, z);\n        const transformed = transformation.TransformCoord3D(coord);\n        mesh.AddVertex(transformed);\n      } // TODO: normals\n\n\n      for (let i = 0; i < ifcIndices.length; i += 3) {\n        const v0 = ifcIndices[i];\n        const v1 = ifcIndices[i + 1];\n        const v2 = ifcIndices[i + 2];\n        const triangle = new Triangle(vertexOffset + v0, vertexOffset + v1, vertexOffset + v2);\n        triangle.SetMaterial(materialIndex);\n        mesh.AddTriangle(triangle);\n      }\n\n      vertexOffset += ifcVertices.length / 6;\n    }\n\n    this.expressIDToMesh.set(ifcMesh.expressID, mesh);\n    this.model.AddMeshToRootNode(mesh);\n  }\n\n  ImportProperties(modelID) {\n    const lines = this.ifc.GetLineIDsWithType(modelID, WebIFC.IFCRELDEFINESBYPROPERTIES);\n\n    for (let i = 0; i < lines.size(); i++) {\n      const relID = lines.get(i);\n      const rel = this.ifc.GetLine(modelID, relID);\n\n      if (Array.isArray(rel.RelatingPropertyDefinition)) {\n        continue;\n      }\n\n      rel.RelatedObjects.forEach(objectRelID => {\n        let element = null;\n\n        if (this.expressIDToMesh.has(objectRelID.value)) {\n          element = this.expressIDToMesh.get(objectRelID.value);\n        } else {\n          let propSetOwner = this.ifc.GetLine(modelID, objectRelID.value, true);\n\n          if (propSetOwner.type === WebIFC.IFCBUILDING) {\n            element = this.model;\n          }\n        }\n\n        if (element === null) {\n          return;\n        }\n\n        let propSetDef = rel.RelatingPropertyDefinition;\n        let propSet = this.ifc.GetLine(modelID, propSetDef.value, true);\n\n        if (!propSet || !propSet.HasProperties) {\n          return;\n        }\n\n        let propertyGroup = new PropertyGroup(propSet.Name.value);\n        propSet.HasProperties.forEach(property => {\n          if (!property || !property.Name || !property.NominalValue) {\n            return;\n          }\n\n          let elemProperty = null;\n          let propertyName = this.GetIFCString(property.Name.value);\n          let strValue = null;\n\n          switch (property.NominalValue.label) {\n            case 'IFCTEXT':\n            case 'IFCLABEL':\n            case 'IFCIDENTIFIER':\n              elemProperty = new Property(PropertyType.Text, propertyName, this.GetIFCString(property.NominalValue.value));\n              break;\n\n            case 'IFCBOOLEAN':\n            case 'IFCLOGICAL':\n              strValue = 'Unknown';\n\n              if (property.NominalValue.value === 'T') {\n                strValue = 'True';\n              } else if (property.NominalValue.value === 'F') {\n                strValue = 'False';\n              }\n\n              elemProperty = new Property(PropertyType.Text, propertyName, strValue);\n              break;\n\n            case 'IFCINTEGER':\n            case 'IFCCOUNTMEASURE':\n              elemProperty = new Property(PropertyType.Integer, propertyName, property.NominalValue.value);\n              break;\n\n            case 'IFCREAL':\n            case 'IFCLENGTHMEASURE':\n            case 'IFCPOSITIVELENGTHMEASURE':\n            case 'IFCAREAMEASURE':\n            case 'IFCVOLUMEMEASURE':\n            case 'IFCRATIOMEASURE':\n            case 'IFCPOSITIVERATIOMEASURE':\n            case 'IFCMASSMEASURE':\n            case 'IFCMASSPERLENGTHMEASURE':\n            case 'IFCPLANEANGLEMEASURE':\n            case 'IFCTHERMALTRANSMITTANCEMEASURE':\n              elemProperty = new Property(PropertyType.Number, propertyName, property.NominalValue.value);\n              break;\n\n            default:\n              // TODO\n              console.log(property.NominalValue.label);\n              console.log(property.NominalValue.value);\n              break;\n          }\n\n          if (elemProperty !== null) {\n            propertyGroup.AddProperty(elemProperty);\n          }\n        });\n\n        if (propertyGroup.PropertyCount() > 0) {\n          element.AddPropertyGroup(propertyGroup);\n        }\n      });\n    }\n  }\n\n  GetMaterialIndexByColor(ifcColor) {\n    const color = RGBColorFromFloatComponents(ifcColor.x, ifcColor.y, ifcColor.z);\n    const alpha = parseInt(ifcColor.w * 255.0, 10);\n    return this.colorToMaterial.GetMaterialIndex(color.r, color.g, color.b, alpha);\n  }\n\n  GetIFCString(ifcString) {\n    let decoded = this.DecodeIFCString(ifcString);\n\n    if (decoded.length === 0) {\n      decoded = '-';\n    }\n\n    return decoded;\n  }\n\n  DecodeIFCString(ifcString) {\n    // TODO: https://github.com/tomvandig/web-ifc/issues/58\n    const ifcUnicodeRegEx = /\\\\X2\\\\(.*?)\\\\X0\\\\/uig;\n    let resultString = ifcString;\n    let match = ifcUnicodeRegEx.exec(ifcString);\n\n    while (match) {\n      const unicodeChar = String.fromCharCode(parseInt(match[1], 16));\n      resultString = resultString.replace(match[0], unicodeChar);\n      match = ifcUnicodeRegEx.exec(ifcString);\n    }\n\n    return resultString;\n  }\n\n}","map":{"version":3,"names":["Coord3D","Direction","Matrix","Transformation","LoadExternalLibrary","RGBColorFromFloatComponents","Mesh","Property","PropertyGroup","PropertyType","Triangle","ImporterBase","ColorToMaterialConverter","ImporterIfc","constructor","ifc","CanImportExtension","extension","GetUpDirection","Y","ClearContent","expressIDToMesh","colorToMaterial","ResetContent","Map","model","ImportContent","fileContent","onFinish","then","WebIFC","IfcAPI","Init","ImportIfcContent","catch","SetError","fileBuffer","Uint8Array","modelID","OpenModel","COORDINATE_TO_ORIGIN","ifcMeshes","LoadAllGeometry","meshIndex","size","ifcMesh","get","geometries","ImportIfcMesh","ImportProperties","CloseModel","mesh","SetName","expressID","toString","vertexOffset","ifcGeometries","geometryIndex","ifcGeometry","ifcGeometryData","GetGeometry","geometryExpressID","ifcVertices","GetVertexArray","GetVertexData","GetVertexDataSize","ifcIndices","GetIndexArray","GetIndexData","GetIndexDataSize","materialIndex","GetMaterialIndexByColor","color","matrix","flatTransformation","transformation","i","length","x","y","z","coord","transformed","TransformCoord3D","AddVertex","v0","v1","v2","triangle","SetMaterial","AddTriangle","set","AddMeshToRootNode","lines","GetLineIDsWithType","IFCRELDEFINESBYPROPERTIES","relID","rel","GetLine","Array","isArray","RelatingPropertyDefinition","RelatedObjects","forEach","objectRelID","element","has","value","propSetOwner","type","IFCBUILDING","propSetDef","propSet","HasProperties","propertyGroup","Name","property","NominalValue","elemProperty","propertyName","GetIFCString","strValue","label","Text","Integer","Number","console","log","AddProperty","PropertyCount","AddPropertyGroup","ifcColor","alpha","parseInt","w","GetMaterialIndex","r","g","b","ifcString","decoded","DecodeIFCString","ifcUnicodeRegEx","resultString","match","exec","unicodeChar","String","fromCharCode","replace"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importerifc.js"],"sourcesContent":["import { Coord3D } from '../geometry/coord3d.js';\r\nimport { Direction } from '../geometry/geometry.js';\r\nimport { Matrix } from '../geometry/matrix.js';\r\nimport { Transformation } from '../geometry/transformation.js';\r\nimport { LoadExternalLibrary } from '../io/externallibs.js';\r\nimport { RGBColorFromFloatComponents } from '../model/color.js';\r\nimport { Mesh } from '../model/mesh.js';\r\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\r\nimport { Triangle } from '../model/triangle.js';\r\nimport { ImporterBase } from './importerbase.js';\r\nimport { ColorToMaterialConverter } from './importerutils.js';\r\n\r\nexport class ImporterIfc extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n        this.ifc = null;\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'ifc';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Y;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n        this.expressIDToMesh = null;\r\n        this.colorToMaterial = null;\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n        this.expressIDToMesh = new Map ();\r\n        this.colorToMaterial = new ColorToMaterialConverter (this.model);\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        if (this.ifc === null) {\r\n            LoadExternalLibrary ('loaders/web-ifc-api-browser.js').then (() => {\r\n                this.ifc = new WebIFC.IfcAPI ();\r\n                this.ifc.Init ().then (() => {\r\n                    this.ImportIfcContent (fileContent);\r\n                    onFinish ();\r\n                });\r\n            }).catch (() => {\r\n                this.SetError ('Failed to load web-ifc.');\r\n                onFinish ();\r\n            });\r\n        } else {\r\n            this.ImportIfcContent (fileContent);\r\n            onFinish ();\r\n        }\r\n    }\r\n\r\n    ImportIfcContent (fileContent)\r\n    {\r\n        const fileBuffer = new Uint8Array (fileContent);\r\n        const modelID = this.ifc.OpenModel (fileBuffer, {\r\n            COORDINATE_TO_ORIGIN : true\r\n        });\r\n        const ifcMeshes = this.ifc.LoadAllGeometry (modelID);\r\n        for (let meshIndex = 0; meshIndex < ifcMeshes.size (); meshIndex++) {\r\n            const ifcMesh = ifcMeshes.get (meshIndex);\r\n            if (ifcMesh.geometries.size () > 0) {\r\n                this.ImportIfcMesh (modelID, ifcMesh);\r\n            }\r\n        }\r\n        this.ImportProperties (modelID);\r\n        this.ifc.CloseModel (modelID);\r\n    }\r\n\r\n    ImportIfcMesh (modelID, ifcMesh)\r\n    {\r\n        let mesh = new Mesh ();\r\n        mesh.SetName ('Mesh ' + ifcMesh.expressID.toString ());\r\n\r\n        let vertexOffset = 0;\r\n        const ifcGeometries = ifcMesh.geometries;\r\n        for (let geometryIndex = 0; geometryIndex < ifcGeometries.size (); geometryIndex++) {\r\n            const ifcGeometry = ifcGeometries.get (geometryIndex);\r\n            const ifcGeometryData = this.ifc.GetGeometry (modelID, ifcGeometry.geometryExpressID);\r\n            const ifcVertices = this.ifc.GetVertexArray (ifcGeometryData.GetVertexData (), ifcGeometryData.GetVertexDataSize ());\r\n            const ifcIndices = this.ifc.GetIndexArray (ifcGeometryData.GetIndexData (), ifcGeometryData.GetIndexDataSize ());\r\n            const materialIndex = this.GetMaterialIndexByColor (ifcGeometry.color);\r\n            const matrix = new Matrix (ifcGeometry.flatTransformation);\r\n            const transformation = new Transformation (matrix);\r\n\r\n            for (let i = 0; i < ifcVertices.length; i += 6) {\r\n                const x = ifcVertices[i];\r\n                const y = ifcVertices[i + 1];\r\n                const z = ifcVertices[i + 2];\r\n                const coord = new Coord3D (x, y, z);\r\n                const transformed = transformation.TransformCoord3D (coord);\r\n                mesh.AddVertex (transformed);\r\n            }\r\n            // TODO: normals\r\n            for (let i = 0; i < ifcIndices.length; i += 3) {\r\n                const v0 = ifcIndices[i];\r\n                const v1 = ifcIndices[i + 1];\r\n                const v2 = ifcIndices[i + 2];\r\n                const triangle = new Triangle (\r\n                    vertexOffset + v0,\r\n                    vertexOffset + v1,\r\n                    vertexOffset + v2\r\n                );\r\n                triangle.SetMaterial (materialIndex);\r\n                mesh.AddTriangle (triangle);\r\n            }\r\n            vertexOffset += ifcVertices.length / 6;\r\n        }\r\n\r\n        this.expressIDToMesh.set (ifcMesh.expressID, mesh);\r\n        this.model.AddMeshToRootNode (mesh);\r\n    }\r\n\r\n    ImportProperties (modelID)\r\n    {\r\n        const lines = this.ifc.GetLineIDsWithType (modelID, WebIFC.IFCRELDEFINESBYPROPERTIES);\r\n        for (let i = 0; i < lines.size (); i++) {\r\n            const relID = lines.get (i);\r\n            const rel = this.ifc.GetLine (modelID, relID);\r\n            if (Array.isArray (rel.RelatingPropertyDefinition)) {\r\n                continue;\r\n            }\r\n            rel.RelatedObjects.forEach ((objectRelID) => {\r\n                let element = null;\r\n                if (this.expressIDToMesh.has (objectRelID.value)) {\r\n                    element = this.expressIDToMesh.get (objectRelID.value);\r\n                } else {\r\n                    let propSetOwner = this.ifc.GetLine (modelID, objectRelID.value, true);\r\n                    if (propSetOwner.type === WebIFC.IFCBUILDING) {\r\n                        element = this.model;\r\n                    }\r\n                }\r\n                if (element === null) {\r\n                    return;\r\n                }\r\n                let propSetDef = rel.RelatingPropertyDefinition;\r\n                let propSet = this.ifc.GetLine (modelID, propSetDef.value, true);\r\n                if (!propSet || !propSet.HasProperties) {\r\n                    return;\r\n                }\r\n                let propertyGroup = new PropertyGroup (propSet.Name.value);\r\n                propSet.HasProperties.forEach ((property) => {\r\n                    if (!property || !property.Name || !property.NominalValue) {\r\n                        return;\r\n                    }\r\n                    let elemProperty = null;\r\n                    let propertyName = this.GetIFCString (property.Name.value);\r\n                    let strValue = null;\r\n                    switch (property.NominalValue.label) {\r\n                        case 'IFCTEXT':\r\n                        case 'IFCLABEL':\r\n                        case 'IFCIDENTIFIER':\r\n                            elemProperty = new Property (PropertyType.Text, propertyName, this.GetIFCString (property.NominalValue.value));\r\n                            break;\r\n                        case 'IFCBOOLEAN':\r\n                        case 'IFCLOGICAL':\r\n                            strValue = 'Unknown';\r\n                            if (property.NominalValue.value === 'T') {\r\n                                strValue = 'True';\r\n                            } else if (property.NominalValue.value === 'F') {\r\n                                strValue = 'False';\r\n                            }\r\n                            elemProperty = new Property (PropertyType.Text, propertyName, strValue);\r\n                            break;\r\n                        case 'IFCINTEGER':\r\n                        case 'IFCCOUNTMEASURE':\r\n                            elemProperty = new Property (PropertyType.Integer, propertyName, property.NominalValue.value);\r\n                            break;\r\n                        case 'IFCREAL':\r\n                        case 'IFCLENGTHMEASURE':\r\n                        case 'IFCPOSITIVELENGTHMEASURE':\r\n                        case 'IFCAREAMEASURE':\r\n                        case 'IFCVOLUMEMEASURE':\r\n                        case 'IFCRATIOMEASURE':\r\n                        case 'IFCPOSITIVERATIOMEASURE':\r\n                        case 'IFCMASSMEASURE':\r\n                        case 'IFCMASSPERLENGTHMEASURE':\r\n                        case 'IFCPLANEANGLEMEASURE':\r\n                        case 'IFCTHERMALTRANSMITTANCEMEASURE':\r\n                            elemProperty = new Property (PropertyType.Number, propertyName, property.NominalValue.value);\r\n                            break;\r\n                        default:\r\n                            // TODO\r\n                            console.log (property.NominalValue.label);\r\n                            console.log (property.NominalValue.value);\r\n                            break;\r\n                    }\r\n                    if (elemProperty !== null) {\r\n                        propertyGroup.AddProperty (elemProperty);\r\n                    }\r\n                });\r\n                if (propertyGroup.PropertyCount () > 0) {\r\n                    element.AddPropertyGroup (propertyGroup);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    GetMaterialIndexByColor (ifcColor)\r\n    {\r\n        const color = RGBColorFromFloatComponents (ifcColor.x, ifcColor.y, ifcColor.z);\r\n        const alpha = parseInt (ifcColor.w * 255.0, 10);\r\n        return this.colorToMaterial.GetMaterialIndex (color.r, color.g, color.b, alpha);\r\n    }\r\n\r\n    GetIFCString (ifcString)\r\n    {\r\n        let decoded = this.DecodeIFCString (ifcString);\r\n        if (decoded.length === 0) {\r\n            decoded = '-';\r\n        }\r\n        return decoded;\r\n    }\r\n\r\n    DecodeIFCString (ifcString)\r\n    {\r\n        // TODO: https://github.com/tomvandig/web-ifc/issues/58\r\n        const ifcUnicodeRegEx = /\\\\X2\\\\(.*?)\\\\X0\\\\/uig;\r\n        let resultString = ifcString;\r\n        let match = ifcUnicodeRegEx.exec (ifcString);\r\n        while (match) {\r\n            const unicodeChar = String.fromCharCode (parseInt (match[1], 16));\r\n            resultString = resultString.replace (match[0], unicodeChar);\r\n            match = ifcUnicodeRegEx.exec (ifcString);\r\n        }\r\n        return resultString;\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,2BAAT,QAA4C,mBAA5C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,YAAlC,QAAsD,sBAAtD;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,wBAAT,QAAyC,oBAAzC;AAEA,OAAO,MAAMC,WAAN,SAA0BF,YAA1B,CACP;EACIG,WAAW,GACX;IACI;IACA,KAAKC,GAAL,GAAW,IAAX;EACH;;EAEDC,kBAAkB,CAAEC,SAAF,EAClB;IACI,OAAOA,SAAS,KAAK,KAArB;EACH;;EAEDC,cAAc,GACd;IACI,OAAOjB,SAAS,CAACkB,CAAjB;EACH;;EAEDC,YAAY,GACZ;IACI,KAAKC,eAAL,GAAuB,IAAvB;IACA,KAAKC,eAAL,GAAuB,IAAvB;EACH;;EAEDC,YAAY,GACZ;IACI,KAAKF,eAAL,GAAuB,IAAIG,GAAJ,EAAvB;IACA,KAAKF,eAAL,GAAuB,IAAIV,wBAAJ,CAA8B,KAAKa,KAAnC,CAAvB;EACH;;EAEDC,aAAa,CAAEC,WAAF,EAAeC,QAAf,EACb;IACI,IAAI,KAAKb,GAAL,KAAa,IAAjB,EAAuB;MACnBX,mBAAmB,CAAE,gCAAF,CAAnB,CAAuDyB,IAAvD,CAA6D,MAAM;QAC/D,KAAKd,GAAL,GAAW,IAAIe,MAAM,CAACC,MAAX,EAAX;QACA,KAAKhB,GAAL,CAASiB,IAAT,GAAiBH,IAAjB,CAAuB,MAAM;UACzB,KAAKI,gBAAL,CAAuBN,WAAvB;UACAC,QAAQ;QACX,CAHD;MAIH,CAND,EAMGM,KANH,CAMU,MAAM;QACZ,KAAKC,QAAL,CAAe,yBAAf;QACAP,QAAQ;MACX,CATD;IAUH,CAXD,MAWO;MACH,KAAKK,gBAAL,CAAuBN,WAAvB;MACAC,QAAQ;IACX;EACJ;;EAEDK,gBAAgB,CAAEN,WAAF,EAChB;IACI,MAAMS,UAAU,GAAG,IAAIC,UAAJ,CAAgBV,WAAhB,CAAnB;IACA,MAAMW,OAAO,GAAG,KAAKvB,GAAL,CAASwB,SAAT,CAAoBH,UAApB,EAAgC;MAC5CI,oBAAoB,EAAG;IADqB,CAAhC,CAAhB;IAGA,MAAMC,SAAS,GAAG,KAAK1B,GAAL,CAAS2B,eAAT,CAA0BJ,OAA1B,CAAlB;;IACA,KAAK,IAAIK,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAGF,SAAS,CAACG,IAAV,EAApC,EAAuDD,SAAS,EAAhE,EAAoE;MAChE,MAAME,OAAO,GAAGJ,SAAS,CAACK,GAAV,CAAeH,SAAf,CAAhB;;MACA,IAAIE,OAAO,CAACE,UAAR,CAAmBH,IAAnB,KAA6B,CAAjC,EAAoC;QAChC,KAAKI,aAAL,CAAoBV,OAApB,EAA6BO,OAA7B;MACH;IACJ;;IACD,KAAKI,gBAAL,CAAuBX,OAAvB;IACA,KAAKvB,GAAL,CAASmC,UAAT,CAAqBZ,OAArB;EACH;;EAEDU,aAAa,CAAEV,OAAF,EAAWO,OAAX,EACb;IACI,IAAIM,IAAI,GAAG,IAAI7C,IAAJ,EAAX;IACA6C,IAAI,CAACC,OAAL,CAAc,UAAUP,OAAO,CAACQ,SAAR,CAAkBC,QAAlB,EAAxB;IAEA,IAAIC,YAAY,GAAG,CAAnB;IACA,MAAMC,aAAa,GAAGX,OAAO,CAACE,UAA9B;;IACA,KAAK,IAAIU,aAAa,GAAG,CAAzB,EAA4BA,aAAa,GAAGD,aAAa,CAACZ,IAAd,EAA5C,EAAmEa,aAAa,EAAhF,EAAoF;MAChF,MAAMC,WAAW,GAAGF,aAAa,CAACV,GAAd,CAAmBW,aAAnB,CAApB;MACA,MAAME,eAAe,GAAG,KAAK5C,GAAL,CAAS6C,WAAT,CAAsBtB,OAAtB,EAA+BoB,WAAW,CAACG,iBAA3C,CAAxB;MACA,MAAMC,WAAW,GAAG,KAAK/C,GAAL,CAASgD,cAAT,CAAyBJ,eAAe,CAACK,aAAhB,EAAzB,EAA2DL,eAAe,CAACM,iBAAhB,EAA3D,CAApB;MACA,MAAMC,UAAU,GAAG,KAAKnD,GAAL,CAASoD,aAAT,CAAwBR,eAAe,CAACS,YAAhB,EAAxB,EAAyDT,eAAe,CAACU,gBAAhB,EAAzD,CAAnB;MACA,MAAMC,aAAa,GAAG,KAAKC,uBAAL,CAA8Bb,WAAW,CAACc,KAA1C,CAAtB;MACA,MAAMC,MAAM,GAAG,IAAIvE,MAAJ,CAAYwD,WAAW,CAACgB,kBAAxB,CAAf;MACA,MAAMC,cAAc,GAAG,IAAIxE,cAAJ,CAAoBsE,MAApB,CAAvB;;MAEA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,WAAW,CAACe,MAAhC,EAAwCD,CAAC,IAAI,CAA7C,EAAgD;QAC5C,MAAME,CAAC,GAAGhB,WAAW,CAACc,CAAD,CAArB;QACA,MAAMG,CAAC,GAAGjB,WAAW,CAACc,CAAC,GAAG,CAAL,CAArB;QACA,MAAMI,CAAC,GAAGlB,WAAW,CAACc,CAAC,GAAG,CAAL,CAArB;QACA,MAAMK,KAAK,GAAG,IAAIjF,OAAJ,CAAa8E,CAAb,EAAgBC,CAAhB,EAAmBC,CAAnB,CAAd;QACA,MAAME,WAAW,GAAGP,cAAc,CAACQ,gBAAf,CAAiCF,KAAjC,CAApB;QACA9B,IAAI,CAACiC,SAAL,CAAgBF,WAAhB;MACH,CAhB+E,CAiBhF;;;MACA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAAU,CAACW,MAA/B,EAAuCD,CAAC,IAAI,CAA5C,EAA+C;QAC3C,MAAMS,EAAE,GAAGnB,UAAU,CAACU,CAAD,CAArB;QACA,MAAMU,EAAE,GAAGpB,UAAU,CAACU,CAAC,GAAG,CAAL,CAArB;QACA,MAAMW,EAAE,GAAGrB,UAAU,CAACU,CAAC,GAAG,CAAL,CAArB;QACA,MAAMY,QAAQ,GAAG,IAAI9E,QAAJ,CACb6C,YAAY,GAAG8B,EADF,EAEb9B,YAAY,GAAG+B,EAFF,EAGb/B,YAAY,GAAGgC,EAHF,CAAjB;QAKAC,QAAQ,CAACC,WAAT,CAAsBnB,aAAtB;QACAnB,IAAI,CAACuC,WAAL,CAAkBF,QAAlB;MACH;;MACDjC,YAAY,IAAIO,WAAW,CAACe,MAAZ,GAAqB,CAArC;IACH;;IAED,KAAKxD,eAAL,CAAqBsE,GAArB,CAA0B9C,OAAO,CAACQ,SAAlC,EAA6CF,IAA7C;IACA,KAAK1B,KAAL,CAAWmE,iBAAX,CAA8BzC,IAA9B;EACH;;EAEDF,gBAAgB,CAAEX,OAAF,EAChB;IACI,MAAMuD,KAAK,GAAG,KAAK9E,GAAL,CAAS+E,kBAAT,CAA6BxD,OAA7B,EAAsCR,MAAM,CAACiE,yBAA7C,CAAd;;IACA,KAAK,IAAInB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiB,KAAK,CAACjD,IAAN,EAApB,EAAmCgC,CAAC,EAApC,EAAwC;MACpC,MAAMoB,KAAK,GAAGH,KAAK,CAAC/C,GAAN,CAAW8B,CAAX,CAAd;MACA,MAAMqB,GAAG,GAAG,KAAKlF,GAAL,CAASmF,OAAT,CAAkB5D,OAAlB,EAA2B0D,KAA3B,CAAZ;;MACA,IAAIG,KAAK,CAACC,OAAN,CAAeH,GAAG,CAACI,0BAAnB,CAAJ,EAAoD;QAChD;MACH;;MACDJ,GAAG,CAACK,cAAJ,CAAmBC,OAAnB,CAA6BC,WAAD,IAAiB;QACzC,IAAIC,OAAO,GAAG,IAAd;;QACA,IAAI,KAAKpF,eAAL,CAAqBqF,GAArB,CAA0BF,WAAW,CAACG,KAAtC,CAAJ,EAAkD;UAC9CF,OAAO,GAAG,KAAKpF,eAAL,CAAqByB,GAArB,CAA0B0D,WAAW,CAACG,KAAtC,CAAV;QACH,CAFD,MAEO;UACH,IAAIC,YAAY,GAAG,KAAK7F,GAAL,CAASmF,OAAT,CAAkB5D,OAAlB,EAA2BkE,WAAW,CAACG,KAAvC,EAA8C,IAA9C,CAAnB;;UACA,IAAIC,YAAY,CAACC,IAAb,KAAsB/E,MAAM,CAACgF,WAAjC,EAA8C;YAC1CL,OAAO,GAAG,KAAKhF,KAAf;UACH;QACJ;;QACD,IAAIgF,OAAO,KAAK,IAAhB,EAAsB;UAClB;QACH;;QACD,IAAIM,UAAU,GAAGd,GAAG,CAACI,0BAArB;QACA,IAAIW,OAAO,GAAG,KAAKjG,GAAL,CAASmF,OAAT,CAAkB5D,OAAlB,EAA2ByE,UAAU,CAACJ,KAAtC,EAA6C,IAA7C,CAAd;;QACA,IAAI,CAACK,OAAD,IAAY,CAACA,OAAO,CAACC,aAAzB,EAAwC;UACpC;QACH;;QACD,IAAIC,aAAa,GAAG,IAAI1G,aAAJ,CAAmBwG,OAAO,CAACG,IAAR,CAAaR,KAAhC,CAApB;QACAK,OAAO,CAACC,aAAR,CAAsBV,OAAtB,CAAgCa,QAAD,IAAc;UACzC,IAAI,CAACA,QAAD,IAAa,CAACA,QAAQ,CAACD,IAAvB,IAA+B,CAACC,QAAQ,CAACC,YAA7C,EAA2D;YACvD;UACH;;UACD,IAAIC,YAAY,GAAG,IAAnB;UACA,IAAIC,YAAY,GAAG,KAAKC,YAAL,CAAmBJ,QAAQ,CAACD,IAAT,CAAcR,KAAjC,CAAnB;UACA,IAAIc,QAAQ,GAAG,IAAf;;UACA,QAAQL,QAAQ,CAACC,YAAT,CAAsBK,KAA9B;YACI,KAAK,SAAL;YACA,KAAK,UAAL;YACA,KAAK,eAAL;cACIJ,YAAY,GAAG,IAAI/G,QAAJ,CAAcE,YAAY,CAACkH,IAA3B,EAAiCJ,YAAjC,EAA+C,KAAKC,YAAL,CAAmBJ,QAAQ,CAACC,YAAT,CAAsBV,KAAzC,CAA/C,CAAf;cACA;;YACJ,KAAK,YAAL;YACA,KAAK,YAAL;cACIc,QAAQ,GAAG,SAAX;;cACA,IAAIL,QAAQ,CAACC,YAAT,CAAsBV,KAAtB,KAAgC,GAApC,EAAyC;gBACrCc,QAAQ,GAAG,MAAX;cACH,CAFD,MAEO,IAAIL,QAAQ,CAACC,YAAT,CAAsBV,KAAtB,KAAgC,GAApC,EAAyC;gBAC5Cc,QAAQ,GAAG,OAAX;cACH;;cACDH,YAAY,GAAG,IAAI/G,QAAJ,CAAcE,YAAY,CAACkH,IAA3B,EAAiCJ,YAAjC,EAA+CE,QAA/C,CAAf;cACA;;YACJ,KAAK,YAAL;YACA,KAAK,iBAAL;cACIH,YAAY,GAAG,IAAI/G,QAAJ,CAAcE,YAAY,CAACmH,OAA3B,EAAoCL,YAApC,EAAkDH,QAAQ,CAACC,YAAT,CAAsBV,KAAxE,CAAf;cACA;;YACJ,KAAK,SAAL;YACA,KAAK,kBAAL;YACA,KAAK,0BAAL;YACA,KAAK,gBAAL;YACA,KAAK,kBAAL;YACA,KAAK,iBAAL;YACA,KAAK,yBAAL;YACA,KAAK,gBAAL;YACA,KAAK,yBAAL;YACA,KAAK,sBAAL;YACA,KAAK,gCAAL;cACIW,YAAY,GAAG,IAAI/G,QAAJ,CAAcE,YAAY,CAACoH,MAA3B,EAAmCN,YAAnC,EAAiDH,QAAQ,CAACC,YAAT,CAAsBV,KAAvE,CAAf;cACA;;YACJ;cACI;cACAmB,OAAO,CAACC,GAAR,CAAaX,QAAQ,CAACC,YAAT,CAAsBK,KAAnC;cACAI,OAAO,CAACC,GAAR,CAAaX,QAAQ,CAACC,YAAT,CAAsBV,KAAnC;cACA;UArCR;;UAuCA,IAAIW,YAAY,KAAK,IAArB,EAA2B;YACvBJ,aAAa,CAACc,WAAd,CAA2BV,YAA3B;UACH;QACJ,CAjDD;;QAkDA,IAAIJ,aAAa,CAACe,aAAd,KAAiC,CAArC,EAAwC;UACpCxB,OAAO,CAACyB,gBAAR,CAA0BhB,aAA1B;QACH;MACJ,CAxED;IAyEH;EACJ;;EAED3C,uBAAuB,CAAE4D,QAAF,EACvB;IACI,MAAM3D,KAAK,GAAGnE,2BAA2B,CAAE8H,QAAQ,CAACrD,CAAX,EAAcqD,QAAQ,CAACpD,CAAvB,EAA0BoD,QAAQ,CAACnD,CAAnC,CAAzC;IACA,MAAMoD,KAAK,GAAGC,QAAQ,CAAEF,QAAQ,CAACG,CAAT,GAAa,KAAf,EAAsB,EAAtB,CAAtB;IACA,OAAO,KAAKhH,eAAL,CAAqBiH,gBAArB,CAAuC/D,KAAK,CAACgE,CAA7C,EAAgDhE,KAAK,CAACiE,CAAtD,EAAyDjE,KAAK,CAACkE,CAA/D,EAAkEN,KAAlE,CAAP;EACH;;EAEDZ,YAAY,CAAEmB,SAAF,EACZ;IACI,IAAIC,OAAO,GAAG,KAAKC,eAAL,CAAsBF,SAAtB,CAAd;;IACA,IAAIC,OAAO,CAAC/D,MAAR,KAAmB,CAAvB,EAA0B;MACtB+D,OAAO,GAAG,GAAV;IACH;;IACD,OAAOA,OAAP;EACH;;EAEDC,eAAe,CAAEF,SAAF,EACf;IACI;IACA,MAAMG,eAAe,GAAG,sBAAxB;IACA,IAAIC,YAAY,GAAGJ,SAAnB;IACA,IAAIK,KAAK,GAAGF,eAAe,CAACG,IAAhB,CAAsBN,SAAtB,CAAZ;;IACA,OAAOK,KAAP,EAAc;MACV,MAAME,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAqBf,QAAQ,CAAEW,KAAK,CAAC,CAAD,CAAP,EAAY,EAAZ,CAA7B,CAApB;MACAD,YAAY,GAAGA,YAAY,CAACM,OAAb,CAAsBL,KAAK,CAAC,CAAD,CAA3B,EAAgCE,WAAhC,CAAf;MACAF,KAAK,GAAGF,eAAe,CAACG,IAAhB,CAAsBN,SAAtB,CAAR;IACH;;IACD,OAAOI,YAAP;EACH;;AA9NL"},"metadata":{},"sourceType":"module"}