{"ast":null,"code":"export class BinaryReader {\n  constructor(arrayBuffer, isLittleEndian) {\n    this.arrayBuffer = arrayBuffer;\n    this.dataView = new DataView(arrayBuffer);\n    this.isLittleEndian = isLittleEndian;\n    this.position = 0;\n  }\n\n  GetPosition() {\n    return this.position;\n  }\n\n  SetPosition(position) {\n    this.position = position;\n  }\n\n  GetByteLength() {\n    return this.arrayBuffer.byteLength;\n  }\n\n  Skip(bytes) {\n    this.position = this.position + bytes;\n  }\n\n  End() {\n    return this.position >= this.arrayBuffer.byteLength;\n  }\n\n  ReadArrayBuffer(byteLength) {\n    let originalBufferView = new Uint8Array(this.arrayBuffer);\n    let arrayBuffer = new ArrayBuffer(byteLength);\n    let bufferView = new Uint8Array(arrayBuffer);\n    let subArray = originalBufferView.subarray(this.position, this.position + byteLength);\n    bufferView.set(subArray, 0);\n    this.position += byteLength;\n    return arrayBuffer;\n  }\n\n  ReadBoolean8() {\n    let result = this.dataView.getInt8(this.position);\n    this.position = this.position + 1;\n    return result ? true : false;\n  }\n\n  ReadCharacter8() {\n    let result = this.dataView.getInt8(this.position);\n    this.position = this.position + 1;\n    return result;\n  }\n\n  ReadUnsignedCharacter8() {\n    let result = this.dataView.getUint8(this.position);\n    this.position = this.position + 1;\n    return result;\n  }\n\n  ReadInteger16() {\n    let result = this.dataView.getInt16(this.position, this.isLittleEndian);\n    this.position = this.position + 2;\n    return result;\n  }\n\n  ReadUnsignedInteger16() {\n    let result = this.dataView.getUint16(this.position, this.isLittleEndian);\n    this.position = this.position + 2;\n    return result;\n  }\n\n  ReadInteger32() {\n    let result = this.dataView.getInt32(this.position, this.isLittleEndian);\n    this.position = this.position + 4;\n    return result;\n  }\n\n  ReadUnsignedInteger32() {\n    let result = this.dataView.getUint32(this.position, this.isLittleEndian);\n    this.position = this.position + 4;\n    return result;\n  }\n\n  ReadFloat32() {\n    let result = this.dataView.getFloat32(this.position, this.isLittleEndian);\n    this.position = this.position + 4;\n    return result;\n  }\n\n  ReadDouble64() {\n    let result = this.dataView.getFloat64(this.position, this.isLittleEndian);\n    this.position = this.position + 8;\n    return result;\n  }\n\n}","map":{"version":3,"names":["BinaryReader","constructor","arrayBuffer","isLittleEndian","dataView","DataView","position","GetPosition","SetPosition","GetByteLength","byteLength","Skip","bytes","End","ReadArrayBuffer","originalBufferView","Uint8Array","ArrayBuffer","bufferView","subArray","subarray","set","ReadBoolean8","result","getInt8","ReadCharacter8","ReadUnsignedCharacter8","getUint8","ReadInteger16","getInt16","ReadUnsignedInteger16","getUint16","ReadInteger32","getInt32","ReadUnsignedInteger32","getUint32","ReadFloat32","getFloat32","ReadDouble64","getFloat64"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/io/binaryreader.js"],"sourcesContent":["export class BinaryReader\r\n{\r\n    constructor (arrayBuffer, isLittleEndian)\r\n    {\r\n        this.arrayBuffer = arrayBuffer;\r\n        this.dataView = new DataView (arrayBuffer);\r\n        this.isLittleEndian = isLittleEndian;\r\n        this.position = 0;\r\n    }\r\n\r\n    GetPosition ()\r\n    {\r\n        return this.position;\r\n    }\r\n\r\n    SetPosition (position)\r\n    {\r\n        this.position = position;\r\n    }\r\n\r\n    GetByteLength ()\r\n    {\r\n        return this.arrayBuffer.byteLength;\r\n    }\r\n\r\n    Skip (bytes)\r\n    {\r\n        this.position = this.position + bytes;\r\n    }\r\n\r\n    End ()\r\n    {\r\n        return this.position >= this.arrayBuffer.byteLength;\r\n    }\r\n\r\n    ReadArrayBuffer (byteLength)\r\n    {\r\n        let originalBufferView = new Uint8Array (this.arrayBuffer);\r\n        let arrayBuffer = new ArrayBuffer (byteLength);\r\n        let bufferView = new Uint8Array (arrayBuffer);\r\n        let subArray = originalBufferView.subarray (this.position, this.position + byteLength);\r\n        bufferView.set (subArray, 0);\r\n        this.position += byteLength;\r\n        return arrayBuffer;\r\n    }\r\n\r\n    ReadBoolean8 ()\r\n    {\r\n        let result = this.dataView.getInt8 (this.position);\r\n        this.position = this.position + 1;\r\n        return result ? true : false;\r\n    }\r\n\r\n    ReadCharacter8 ()\r\n    {\r\n        let result = this.dataView.getInt8 (this.position);\r\n        this.position = this.position + 1;\r\n        return result;\r\n    }\r\n\r\n    ReadUnsignedCharacter8 ()\r\n    {\r\n        let result = this.dataView.getUint8 (this.position);\r\n        this.position = this.position + 1;\r\n        return result;\r\n    }\r\n\r\n    ReadInteger16 ()\r\n    {\r\n        let result = this.dataView.getInt16 (this.position, this.isLittleEndian);\r\n        this.position = this.position + 2;\r\n        return result;\r\n    }\r\n\r\n    ReadUnsignedInteger16 ()\r\n    {\r\n        let result = this.dataView.getUint16 (this.position, this.isLittleEndian);\r\n        this.position = this.position + 2;\r\n        return result;\r\n    }\r\n\r\n    ReadInteger32 ()\r\n    {\r\n        let result = this.dataView.getInt32 (this.position, this.isLittleEndian);\r\n        this.position = this.position + 4;\r\n        return result;\r\n    }\r\n\r\n    ReadUnsignedInteger32 ()\r\n    {\r\n        let result = this.dataView.getUint32 (this.position, this.isLittleEndian);\r\n        this.position = this.position + 4;\r\n        return result;\r\n    }\r\n\r\n    ReadFloat32 ()\r\n    {\r\n        let result = this.dataView.getFloat32 (this.position, this.isLittleEndian);\r\n        this.position = this.position + 4;\r\n        return result;\r\n    }\r\n\r\n    ReadDouble64 ()\r\n    {\r\n        let result = this.dataView.getFloat64 (this.position, this.isLittleEndian);\r\n        this.position = this.position + 8;\r\n        return result;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}