{"ast":null,"code":"import { Coord2D, CoordIsEqual2D } from '../geometry/coord2d.js';\nimport { IsEqual } from '../geometry/geometry.js';\nimport { RGBColor, RGBColorIsEqual } from './color.js';\nexport class TextureMap {\n  constructor() {\n    this.name = null;\n    this.mimeType = null;\n    this.buffer = null;\n    this.offset = new Coord2D(0.0, 0.0);\n    this.scale = new Coord2D(1.0, 1.0);\n    this.rotation = 0.0; // radians\n  }\n\n  IsValid() {\n    return this.name !== null && this.buffer !== null;\n  }\n\n  HasTransformation() {\n    if (!CoordIsEqual2D(this.offset, new Coord2D(0.0, 0.0))) {\n      return true;\n    }\n\n    if (!CoordIsEqual2D(this.scale, new Coord2D(1.0, 1.0))) {\n      return true;\n    }\n\n    if (!IsEqual(this.rotation, 0.0)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  IsEqual(rhs) {\n    if (this.name !== rhs.name) {\n      return false;\n    }\n\n    if (this.mimeType !== rhs.mimeType) {\n      return false;\n    }\n\n    if (!CoordIsEqual2D(this.offset, rhs.offset)) {\n      return false;\n    }\n\n    if (!CoordIsEqual2D(this.scale, rhs.scale)) {\n      return false;\n    }\n\n    if (!IsEqual(this.rotation, rhs.rotation)) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\nexport function TextureMapIsEqual(aTex, bTex) {\n  if (aTex === null && bTex === null) {\n    return true;\n  } else if (aTex === null || bTex === null) {\n    return false;\n  }\n\n  return aTex.IsEqual(bTex);\n}\nexport const MaterialType = {\n  Phong: 1,\n  Physical: 2\n};\nexport class MaterialBase {\n  constructor(type) {\n    this.type = type;\n    this.isDefault = false;\n    this.name = '';\n    this.color = new RGBColor(0, 0, 0);\n    this.vertexColors = false;\n  }\n\n  IsEqual(rhs) {\n    if (this.type !== rhs.type) {\n      return false;\n    }\n\n    if (this.isDefault !== rhs.isDefault) {\n      return false;\n    }\n\n    if (this.name !== rhs.name) {\n      return false;\n    }\n\n    if (!RGBColorIsEqual(this.color, rhs.color)) {\n      return false;\n    }\n\n    if (this.vertexColors !== rhs.vertexColors) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\nexport class FaceMaterial extends MaterialBase {\n  constructor(type) {\n    super(type);\n    this.emissive = new RGBColor(0, 0, 0);\n    this.opacity = 1.0; // 0.0 .. 1.0\n\n    this.transparent = false;\n    this.diffuseMap = null;\n    this.bumpMap = null;\n    this.normalMap = null;\n    this.emissiveMap = null;\n    this.alphaTest = 0.0; // 0.0 .. 1.0\n\n    this.multiplyDiffuseMap = false;\n  }\n\n  IsEqual(rhs) {\n    if (!super.IsEqual(rhs)) {\n      return false;\n    }\n\n    if (!RGBColorIsEqual(this.emissive, rhs.emissive)) {\n      return false;\n    }\n\n    if (!IsEqual(this.opacity, rhs.opacity)) {\n      return false;\n    }\n\n    if (this.transparent !== rhs.transparent) {\n      return false;\n    }\n\n    if (!TextureMapIsEqual(this.diffuseMap, rhs.diffuseMap)) {\n      return false;\n    }\n\n    if (!TextureMapIsEqual(this.bumpMap, rhs.bumpMap)) {\n      return false;\n    }\n\n    if (!TextureMapIsEqual(this.normalMap, rhs.normalMap)) {\n      return false;\n    }\n\n    if (!TextureMapIsEqual(this.emissiveMap, rhs.emissiveMap)) {\n      return false;\n    }\n\n    if (!IsEqual(this.alphaTest, rhs.alphaTest)) {\n      return false;\n    }\n\n    if (this.multiplyDiffuseMap !== rhs.multiplyDiffuseMap) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\nexport class PhongMaterial extends FaceMaterial {\n  constructor() {\n    super(MaterialType.Phong);\n    this.ambient = new RGBColor(0, 0, 0);\n    this.specular = new RGBColor(0, 0, 0);\n    this.shininess = 0.0; // 0.0 .. 1.0\n\n    this.specularMap = null;\n  }\n\n  IsEqual(rhs) {\n    if (!super.IsEqual(rhs)) {\n      return false;\n    }\n\n    if (!RGBColorIsEqual(this.ambient, rhs.ambient)) {\n      return false;\n    }\n\n    if (!RGBColorIsEqual(this.specular, rhs.specular)) {\n      return false;\n    }\n\n    if (!IsEqual(this.shininess, rhs.shininess)) {\n      return false;\n    }\n\n    if (!TextureMapIsEqual(this.specularMap, rhs.specularMap)) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\nexport class PhysicalMaterial extends FaceMaterial {\n  constructor() {\n    super(MaterialType.Physical);\n    this.metalness = 0.0; // 0.0 .. 1.0\n\n    this.roughness = 1.0; // 0.0 .. 1.0\n\n    this.metalnessMap = null;\n  }\n\n  IsEqual(rhs) {\n    if (!super.IsEqual(rhs)) {\n      return false;\n    }\n\n    if (!IsEqual(this.metalness, rhs.metalness)) {\n      return false;\n    }\n\n    if (!IsEqual(this.roughness, rhs.roughness)) {\n      return false;\n    }\n\n    if (!TextureMapIsEqual(this.metalnessMap, rhs.metalnessMap)) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\nexport function TextureIsEqual(a, b) {\n  if (a.name !== b.name) {\n    return false;\n  }\n\n  if (a.mimeType !== b.mimeType) {\n    return false;\n  }\n\n  if (!CoordIsEqual2D(a.offset, b.offset)) {\n    return false;\n  }\n\n  if (!CoordIsEqual2D(a.scale, b.scale)) {\n    return false;\n  }\n\n  if (!IsEqual(a.rotation, b.rotation)) {\n    return false;\n  }\n\n  return true;\n}","map":{"version":3,"names":["Coord2D","CoordIsEqual2D","IsEqual","RGBColor","RGBColorIsEqual","TextureMap","constructor","name","mimeType","buffer","offset","scale","rotation","IsValid","HasTransformation","rhs","TextureMapIsEqual","aTex","bTex","MaterialType","Phong","Physical","MaterialBase","type","isDefault","color","vertexColors","FaceMaterial","emissive","opacity","transparent","diffuseMap","bumpMap","normalMap","emissiveMap","alphaTest","multiplyDiffuseMap","PhongMaterial","ambient","specular","shininess","specularMap","PhysicalMaterial","metalness","roughness","metalnessMap","TextureIsEqual","a","b"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/material.js"],"sourcesContent":["import { Coord2D, CoordIsEqual2D } from '../geometry/coord2d.js';\r\nimport { IsEqual } from '../geometry/geometry.js';\r\nimport { RGBColor, RGBColorIsEqual } from './color.js';\r\n\r\nexport class TextureMap\r\n{\r\n    constructor ()\r\n    {\r\n        this.name = null;\r\n        this.mimeType = null;\r\n        this.buffer = null;\r\n        this.offset = new Coord2D (0.0, 0.0);\r\n        this.scale = new Coord2D (1.0, 1.0);\r\n        this.rotation = 0.0; // radians\r\n    }\r\n\r\n    IsValid ()\r\n    {\r\n        return this.name !== null && this.buffer !== null;\r\n    }\r\n\r\n    HasTransformation ()\r\n    {\r\n        if (!CoordIsEqual2D (this.offset, new Coord2D (0.0, 0.0))) {\r\n            return true;\r\n        }\r\n        if (!CoordIsEqual2D (this.scale, new Coord2D (1.0, 1.0))) {\r\n            return true;\r\n        }\r\n        if (!IsEqual (this.rotation, 0.0)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    IsEqual (rhs)\r\n    {\r\n        if (this.name !== rhs.name) {\r\n            return false;\r\n        }\r\n        if (this.mimeType !== rhs.mimeType) {\r\n            return false;\r\n        }\r\n        if (!CoordIsEqual2D (this.offset, rhs.offset)) {\r\n            return false;\r\n        }\r\n        if (!CoordIsEqual2D (this.scale, rhs.scale)) {\r\n            return false;\r\n        }\r\n        if (!IsEqual (this.rotation, rhs.rotation)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function TextureMapIsEqual (aTex, bTex)\r\n{\r\n    if (aTex === null && bTex === null) {\r\n        return true;\r\n    } else if (aTex === null || bTex === null) {\r\n        return false;\r\n    }\r\n    return aTex.IsEqual (bTex);\r\n}\r\n\r\nexport const MaterialType =\r\n{\r\n    Phong : 1,\r\n    Physical : 2\r\n};\r\n\r\nexport class MaterialBase\r\n{\r\n    constructor (type)\r\n    {\r\n        this.type = type;\r\n        this.isDefault = false;\r\n\r\n        this.name = '';\r\n        this.color = new RGBColor (0, 0, 0);\r\n\r\n        this.vertexColors = false;\r\n    }\r\n\r\n    IsEqual (rhs)\r\n    {\r\n        if (this.type !== rhs.type) {\r\n            return false;\r\n        }\r\n        if (this.isDefault !== rhs.isDefault) {\r\n            return false;\r\n        }\r\n        if (this.name !== rhs.name) {\r\n            return false;\r\n        }\r\n        if (!RGBColorIsEqual (this.color, rhs.color)) {\r\n            return false;\r\n        }\r\n        if (this.vertexColors !== rhs.vertexColors) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class FaceMaterial extends MaterialBase\r\n{\r\n    constructor (type)\r\n    {\r\n        super (type);\r\n\r\n        this.emissive = new RGBColor (0, 0, 0);\r\n\r\n        this.opacity = 1.0; // 0.0 .. 1.0\r\n        this.transparent = false;\r\n\r\n        this.diffuseMap = null;\r\n        this.bumpMap = null;\r\n        this.normalMap = null;\r\n        this.emissiveMap = null;\r\n\r\n        this.alphaTest = 0.0; // 0.0 .. 1.0\r\n        this.multiplyDiffuseMap = false;\r\n    }\r\n\r\n    IsEqual (rhs)\r\n    {\r\n        if (!super.IsEqual (rhs)) {\r\n            return false;\r\n        }\r\n        if (!RGBColorIsEqual (this.emissive, rhs.emissive)) {\r\n            return false;\r\n        }\r\n        if (!IsEqual (this.opacity, rhs.opacity)) {\r\n            return false;\r\n        }\r\n        if (this.transparent !== rhs.transparent) {\r\n            return false;\r\n        }\r\n        if (!TextureMapIsEqual (this.diffuseMap, rhs.diffuseMap)) {\r\n            return false;\r\n        }\r\n        if (!TextureMapIsEqual (this.bumpMap, rhs.bumpMap)) {\r\n            return false;\r\n        }\r\n        if (!TextureMapIsEqual (this.normalMap, rhs.normalMap)) {\r\n            return false;\r\n        }\r\n        if (!TextureMapIsEqual (this.emissiveMap, rhs.emissiveMap)) {\r\n            return false;\r\n        }\r\n        if (!IsEqual (this.alphaTest, rhs.alphaTest)) {\r\n            return false;\r\n        }\r\n        if (this.multiplyDiffuseMap !== rhs.multiplyDiffuseMap) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class PhongMaterial extends FaceMaterial\r\n{\r\n    constructor ()\r\n    {\r\n        super (MaterialType.Phong);\r\n\r\n        this.ambient = new RGBColor (0, 0, 0);\r\n        this.specular = new RGBColor (0, 0, 0);\r\n        this.shininess = 0.0; // 0.0 .. 1.0\r\n        this.specularMap = null;\r\n    }\r\n\r\n    IsEqual (rhs)\r\n    {\r\n        if (!super.IsEqual (rhs)) {\r\n            return false;\r\n        }\r\n        if (!RGBColorIsEqual (this.ambient, rhs.ambient)) {\r\n            return false;\r\n        }\r\n        if (!RGBColorIsEqual (this.specular, rhs.specular)) {\r\n            return false;\r\n        }\r\n        if (!IsEqual (this.shininess, rhs.shininess)) {\r\n            return false;\r\n        }\r\n        if (!TextureMapIsEqual (this.specularMap, rhs.specularMap)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class PhysicalMaterial extends FaceMaterial\r\n{\r\n    constructor ()\r\n    {\r\n        super (MaterialType.Physical);\r\n\r\n        this.metalness = 0.0; // 0.0 .. 1.0\r\n        this.roughness = 1.0; // 0.0 .. 1.0\r\n        this.metalnessMap = null;\r\n    }\r\n\r\n    IsEqual (rhs)\r\n    {\r\n        if (!super.IsEqual (rhs)) {\r\n            return false;\r\n        }\r\n        if (!IsEqual (this.metalness, rhs.metalness)) {\r\n            return false;\r\n        }\r\n        if (!IsEqual (this.roughness, rhs.roughness)) {\r\n            return false;\r\n        }\r\n        if (!TextureMapIsEqual (this.metalnessMap, rhs.metalnessMap)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function TextureIsEqual (a, b)\r\n{\r\n    if (a.name !== b.name) {\r\n        return false;\r\n    }\r\n    if (a.mimeType !== b.mimeType) {\r\n        return false;\r\n    }\r\n    if (!CoordIsEqual2D (a.offset, b.offset)) {\r\n        return false;\r\n    }\r\n    if (!CoordIsEqual2D (a.scale, b.scale)) {\r\n        return false;\r\n    }\r\n    if (!IsEqual (a.rotation, b.rotation)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}