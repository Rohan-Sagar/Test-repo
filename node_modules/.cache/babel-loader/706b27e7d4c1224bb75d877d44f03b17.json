{"ast":null,"code":"import { CopyObjectAttributes } from '../core/core.js';\nimport { AddCoord3D, Coord3D, CoordIsEqual3D } from '../geometry/coord3d.js';\nimport { RGBColor } from './color.js';\nimport { PhongMaterial } from './material.js';\nimport { CalculateTriangleNormal, GetMeshType, MeshType } from './meshutils.js';\n\nclass ModelFinalizer {\n  constructor(params) {\n    this.params = {\n      getDefaultMaterialColor: () => {\n        return new RGBColor(0, 0, 0);\n      }\n    };\n    CopyObjectAttributes(params, this.params);\n    this.defaultMaterialIndex = null;\n  }\n\n  Finalize(model) {\n    this.Reset();\n    this.FinalizeMeshes(model);\n    this.FinalizeMaterials(model);\n    this.FinalizeNodes(model);\n  }\n\n  FinalizeMaterials(model) {\n    if (model.VertexColorCount() === 0) {\n      return;\n    }\n\n    let materialHasVertexColors = new Map();\n\n    for (let meshIndex = 0; meshIndex < model.MeshCount(); meshIndex++) {\n      let mesh = model.GetMesh(meshIndex);\n\n      for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount(); triangleIndex++) {\n        let triangle = mesh.GetTriangle(triangleIndex);\n        let hasVertexColors = triangle.HasVertexColors();\n\n        if (!materialHasVertexColors.has(triangle.mat)) {\n          materialHasVertexColors.set(triangle.mat, hasVertexColors);\n        } else if (!hasVertexColors) {\n          materialHasVertexColors.set(triangle.mat, false);\n        }\n      }\n    }\n\n    for (let [materialIndex, hasVertexColors] of materialHasVertexColors) {\n      let material = model.GetMaterial(materialIndex);\n      material.vertexColors = hasVertexColors;\n    }\n  }\n\n  FinalizeMeshes(model) {\n    for (let meshIndex = 0; meshIndex < model.MeshCount(); meshIndex++) {\n      let mesh = model.GetMesh(meshIndex);\n      let type = GetMeshType(mesh);\n\n      if (type === MeshType.Empty) {\n        model.RemoveMesh(meshIndex);\n        meshIndex = meshIndex - 1;\n        continue;\n      }\n\n      this.FinalizeMesh(model, mesh);\n    }\n  }\n\n  FinalizeMesh(model, mesh) {\n    function CalculateCurveNormals(mesh) {\n      function AddAverageNormal(mesh, triangle, vertexIndex, triangleNormals, vertexToTriangles) {\n        function IsNormalInArray(array, normal) {\n          for (let i = 0; i < array.length; i++) {\n            let current = array[i];\n\n            if (CoordIsEqual3D(current, normal)) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        let averageNormals = [];\n        let neigTriangles = vertexToTriangles.get(vertexIndex);\n\n        for (let i = 0; i < neigTriangles.length; i++) {\n          let neigIndex = neigTriangles[i];\n          let neigTriangle = mesh.GetTriangle(neigIndex);\n\n          if (triangle.curve === neigTriangle.curve) {\n            let triangleNormal = triangleNormals[neigIndex];\n\n            if (!IsNormalInArray(averageNormals, triangleNormal)) {\n              averageNormals.push(triangleNormal);\n            }\n          }\n        }\n\n        let averageNormal = new Coord3D(0.0, 0.0, 0.0);\n\n        for (let i = 0; i < averageNormals.length; i++) {\n          averageNormal = AddCoord3D(averageNormal, averageNormals[i]);\n        }\n\n        averageNormal.MultiplyScalar(1.0 / averageNormals.length);\n        averageNormal.Normalize();\n        return mesh.AddNormal(averageNormal);\n      }\n\n      let triangleNormals = [];\n      let vertexToTriangles = new Map();\n\n      for (let vertexIndex = 0; vertexIndex < mesh.VertexCount(); vertexIndex++) {\n        vertexToTriangles.set(vertexIndex, []);\n      }\n\n      for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount(); triangleIndex++) {\n        let triangle = mesh.GetTriangle(triangleIndex);\n        let v0 = mesh.GetVertex(triangle.v0);\n        let v1 = mesh.GetVertex(triangle.v1);\n        let v2 = mesh.GetVertex(triangle.v2);\n        let normal = CalculateTriangleNormal(v0, v1, v2);\n        triangleNormals.push(normal);\n        vertexToTriangles.get(triangle.v0).push(triangleIndex);\n        vertexToTriangles.get(triangle.v1).push(triangleIndex);\n        vertexToTriangles.get(triangle.v2).push(triangleIndex);\n      }\n\n      for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount(); triangleIndex++) {\n        let triangle = mesh.GetTriangle(triangleIndex);\n\n        if (!triangle.HasNormals()) {\n          let n0 = AddAverageNormal(mesh, triangle, triangle.v0, triangleNormals, vertexToTriangles);\n          let n1 = AddAverageNormal(mesh, triangle, triangle.v1, triangleNormals, vertexToTriangles);\n          let n2 = AddAverageNormal(mesh, triangle, triangle.v2, triangleNormals, vertexToTriangles);\n          triangle.SetNormals(n0, n1, n2);\n        }\n      }\n    }\n\n    let meshStatus = {\n      calculateCurveNormals: false\n    };\n\n    for (let i = 0; i < mesh.TriangleCount(); i++) {\n      let triangle = mesh.GetTriangle(i);\n      this.FinalizeTriangle(mesh, triangle, meshStatus);\n\n      if (triangle.mat === null) {\n        triangle.mat = this.GetDefaultMaterialIndex(model);\n      }\n    }\n\n    if (meshStatus.calculateCurveNormals) {\n      CalculateCurveNormals(mesh);\n    }\n  }\n\n  FinalizeTriangle(mesh, triangle, meshStatus) {\n    if (!triangle.HasNormals()) {\n      if (triangle.curve === null || triangle.curve === 0) {\n        let v0 = mesh.GetVertex(triangle.v0);\n        let v1 = mesh.GetVertex(triangle.v1);\n        let v2 = mesh.GetVertex(triangle.v2);\n        let normal = CalculateTriangleNormal(v0, v1, v2);\n        let normalIndex = mesh.AddNormal(normal);\n        triangle.SetNormals(normalIndex, normalIndex, normalIndex);\n      } else {\n        meshStatus.calculateCurveNormals = true;\n      }\n    }\n\n    if (triangle.curve === null) {\n      triangle.curve = 0;\n    }\n  }\n\n  FinalizeNodes(model) {\n    let rootNode = model.GetRootNode();\n    let emptyNodes = [];\n    rootNode.EnumerateChildren(node => {\n      if (node.IsEmpty()) {\n        emptyNodes.push(node);\n      }\n    });\n\n    for (let nodeIndex = 0; nodeIndex < emptyNodes.length; nodeIndex++) {\n      let node = emptyNodes[nodeIndex];\n      let parentNode = node.GetParent();\n\n      if (parentNode === null) {\n        continue;\n      }\n\n      parentNode.RemoveChildNode(node);\n\n      if (parentNode.IsEmpty()) {\n        emptyNodes.push(parentNode);\n      }\n    }\n  }\n\n  GetDefaultMaterialIndex(model) {\n    if (this.defaultMaterialIndex === null) {\n      let defaultMaterialColor = this.params.getDefaultMaterialColor();\n      let defaultMaterial = new PhongMaterial();\n      defaultMaterial.color = defaultMaterialColor;\n      defaultMaterial.isDefault = true;\n      this.defaultMaterialIndex = model.AddMaterial(defaultMaterial);\n    }\n\n    return this.defaultMaterialIndex;\n  }\n\n  Reset() {\n    this.defaultMaterialIndex = null;\n  }\n\n}\n\nexport function FinalizeModel(model, params) {\n  let finalizer = new ModelFinalizer(params);\n  finalizer.Finalize(model);\n}\nexport function CheckModel(model) {\n  function IsCorrectValue(val) {\n    if (val === undefined || val === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function IsCorrectNumber(val) {\n    if (!IsCorrectValue(val)) {\n      return false;\n    }\n\n    if (isNaN(val)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function IsCorrectIndex(val, count) {\n    if (!IsCorrectNumber(val)) {\n      return false;\n    }\n\n    if (val < 0 || val >= count) {\n      return false;\n    }\n\n    return true;\n  }\n\n  function CheckMesh(model, mesh) {\n    function CheckTriangle(model, mesh, triangle) {\n      if (!IsCorrectIndex(triangle.v0, mesh.VertexCount())) {\n        return false;\n      }\n\n      if (!IsCorrectIndex(triangle.v1, mesh.VertexCount())) {\n        return false;\n      }\n\n      if (!IsCorrectIndex(triangle.v2, mesh.VertexCount())) {\n        return false;\n      }\n\n      if (triangle.HasVertexColors()) {\n        if (!IsCorrectIndex(triangle.c0, mesh.VertexColorCount())) {\n          return false;\n        }\n\n        if (!IsCorrectIndex(triangle.c1, mesh.VertexColorCount())) {\n          return false;\n        }\n\n        if (!IsCorrectIndex(triangle.c2, mesh.VertexColorCount())) {\n          return false;\n        }\n      }\n\n      if (!IsCorrectIndex(triangle.n0, mesh.NormalCount())) {\n        return false;\n      }\n\n      if (!IsCorrectIndex(triangle.n1, mesh.NormalCount())) {\n        return false;\n      }\n\n      if (!IsCorrectIndex(triangle.n2, mesh.NormalCount())) {\n        return false;\n      }\n\n      if (triangle.HasTextureUVs()) {\n        if (!IsCorrectIndex(triangle.u0, mesh.TextureUVCount())) {\n          return false;\n        }\n\n        if (!IsCorrectIndex(triangle.u1, mesh.TextureUVCount())) {\n          return false;\n        }\n\n        if (!IsCorrectIndex(triangle.u2, mesh.TextureUVCount())) {\n          return false;\n        }\n      }\n\n      if (!IsCorrectIndex(triangle.mat, model.MaterialCount())) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(triangle.curve)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    for (let i = 0; i < mesh.VertexCount(); i++) {\n      let vertex = mesh.GetVertex(i);\n\n      if (!IsCorrectNumber(vertex.x)) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(vertex.y)) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(vertex.z)) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < mesh.VertexColorCount(); i++) {\n      let color = mesh.GetVertexColor(i);\n\n      if (!IsCorrectNumber(color.r)) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(color.g)) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(color.b)) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < mesh.NormalCount(); i++) {\n      let normal = mesh.GetNormal(i);\n\n      if (!IsCorrectNumber(normal.x)) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(normal.y)) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(normal.z)) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < mesh.TextureUVCount(); i++) {\n      let uv = mesh.GetTextureUV(i);\n\n      if (!IsCorrectNumber(uv.x)) {\n        return false;\n      }\n\n      if (!IsCorrectNumber(uv.y)) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < mesh.TriangleCount(); i++) {\n      let triangle = mesh.GetTriangle(i);\n\n      if (!CheckTriangle(model, mesh, triangle)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  for (let i = 0; i < model.MeshCount(); i++) {\n    let mesh = model.GetMesh(i);\n\n    if (!CheckMesh(model, mesh)) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"names":["CopyObjectAttributes","AddCoord3D","Coord3D","CoordIsEqual3D","RGBColor","PhongMaterial","CalculateTriangleNormal","GetMeshType","MeshType","ModelFinalizer","constructor","params","getDefaultMaterialColor","defaultMaterialIndex","Finalize","model","Reset","FinalizeMeshes","FinalizeMaterials","FinalizeNodes","VertexColorCount","materialHasVertexColors","Map","meshIndex","MeshCount","mesh","GetMesh","triangleIndex","TriangleCount","triangle","GetTriangle","hasVertexColors","HasVertexColors","has","mat","set","materialIndex","material","GetMaterial","vertexColors","type","Empty","RemoveMesh","FinalizeMesh","CalculateCurveNormals","AddAverageNormal","vertexIndex","triangleNormals","vertexToTriangles","IsNormalInArray","array","normal","i","length","current","averageNormals","neigTriangles","get","neigIndex","neigTriangle","curve","triangleNormal","push","averageNormal","MultiplyScalar","Normalize","AddNormal","VertexCount","v0","GetVertex","v1","v2","HasNormals","n0","n1","n2","SetNormals","meshStatus","calculateCurveNormals","FinalizeTriangle","GetDefaultMaterialIndex","normalIndex","rootNode","GetRootNode","emptyNodes","EnumerateChildren","node","IsEmpty","nodeIndex","parentNode","GetParent","RemoveChildNode","defaultMaterialColor","defaultMaterial","color","isDefault","AddMaterial","FinalizeModel","finalizer","CheckModel","IsCorrectValue","val","undefined","IsCorrectNumber","isNaN","IsCorrectIndex","count","CheckMesh","CheckTriangle","c0","c1","c2","NormalCount","HasTextureUVs","u0","TextureUVCount","u1","u2","MaterialCount","vertex","x","y","z","GetVertexColor","r","g","b","GetNormal","uv","GetTextureUV"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/modelfinalization.js"],"sourcesContent":["import { CopyObjectAttributes } from '../core/core.js';\r\nimport { AddCoord3D, Coord3D, CoordIsEqual3D } from '../geometry/coord3d.js';\r\nimport { RGBColor } from './color.js';\r\nimport { PhongMaterial } from './material.js';\r\nimport { CalculateTriangleNormal, GetMeshType, MeshType } from './meshutils.js';\r\n\r\nclass ModelFinalizer\r\n{\r\n    constructor (params)\r\n    {\r\n        this.params = {\r\n            getDefaultMaterialColor : () => {\r\n                return new RGBColor (0, 0, 0);\r\n            }\r\n        };\r\n        CopyObjectAttributes (params, this.params);\r\n        this.defaultMaterialIndex = null;\r\n    }\r\n\r\n    Finalize (model)\r\n    {\r\n        this.Reset ();\r\n\r\n        this.FinalizeMeshes (model);\r\n        this.FinalizeMaterials (model);\r\n        this.FinalizeNodes (model);\r\n    }\r\n\r\n    FinalizeMaterials (model)\r\n    {\r\n        if (model.VertexColorCount () === 0) {\r\n            return;\r\n        }\r\n\r\n        let materialHasVertexColors = new Map ();\r\n        for (let meshIndex = 0; meshIndex < model.MeshCount (); meshIndex++) {\r\n            let mesh = model.GetMesh (meshIndex);\r\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\r\n                let triangle = mesh.GetTriangle (triangleIndex);\r\n                let hasVertexColors = triangle.HasVertexColors ();\r\n                if (!materialHasVertexColors.has (triangle.mat)) {\r\n                    materialHasVertexColors.set (triangle.mat, hasVertexColors);\r\n                } else if (!hasVertexColors) {\r\n                    materialHasVertexColors.set (triangle.mat, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let [materialIndex, hasVertexColors] of materialHasVertexColors) {\r\n            let material = model.GetMaterial (materialIndex);\r\n            material.vertexColors = hasVertexColors;\r\n        }\r\n    }\r\n\r\n    FinalizeMeshes (model)\r\n    {\r\n        for (let meshIndex = 0; meshIndex < model.MeshCount (); meshIndex++) {\r\n            let mesh = model.GetMesh (meshIndex);\r\n            let type = GetMeshType (mesh);\r\n            if (type === MeshType.Empty) {\r\n                model.RemoveMesh (meshIndex);\r\n                meshIndex = meshIndex - 1;\r\n                continue;\r\n            }\r\n            this.FinalizeMesh (model, mesh);\r\n        }\r\n    }\r\n\r\n    FinalizeMesh (model, mesh)\r\n    {\r\n        function CalculateCurveNormals (mesh)\r\n        {\r\n            function AddAverageNormal (mesh, triangle, vertexIndex, triangleNormals, vertexToTriangles)\r\n            {\r\n                function IsNormalInArray (array, normal)\r\n                {\r\n                    for (let i = 0; i < array.length; i++) {\r\n                        let current = array[i];\r\n                        if (CoordIsEqual3D (current, normal)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                let averageNormals = [];\r\n                let neigTriangles = vertexToTriangles.get (vertexIndex);\r\n                for (let i = 0; i < neigTriangles.length; i++) {\r\n                    let neigIndex = neigTriangles[i];\r\n                    let neigTriangle = mesh.GetTriangle (neigIndex);\r\n                    if (triangle.curve === neigTriangle.curve) {\r\n                        let triangleNormal = triangleNormals[neigIndex];\r\n                        if (!IsNormalInArray (averageNormals, triangleNormal)) {\r\n                            averageNormals.push (triangleNormal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                let averageNormal = new Coord3D (0.0, 0.0, 0.0);\r\n                for (let i = 0; i < averageNormals.length; i++) {\r\n                    averageNormal = AddCoord3D (averageNormal, averageNormals[i]);\r\n                }\r\n                averageNormal.MultiplyScalar (1.0 / averageNormals.length);\r\n                averageNormal.Normalize ();\r\n                return mesh.AddNormal (averageNormal);\r\n            }\r\n\r\n            let triangleNormals = [];\r\n            let vertexToTriangles = new Map ();\r\n\r\n            for (let vertexIndex = 0; vertexIndex < mesh.VertexCount (); vertexIndex++) {\r\n                vertexToTriangles.set (vertexIndex, []);\r\n            }\r\n\r\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\r\n                let triangle = mesh.GetTriangle (triangleIndex);\r\n                let v0 = mesh.GetVertex (triangle.v0);\r\n                let v1 = mesh.GetVertex (triangle.v1);\r\n                let v2 = mesh.GetVertex (triangle.v2);\r\n                let normal = CalculateTriangleNormal (v0, v1, v2);\r\n                triangleNormals.push (normal);\r\n                vertexToTriangles.get (triangle.v0).push (triangleIndex);\r\n                vertexToTriangles.get (triangle.v1).push (triangleIndex);\r\n                vertexToTriangles.get (triangle.v2).push (triangleIndex);\r\n            }\r\n\r\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\r\n                let triangle = mesh.GetTriangle (triangleIndex);\r\n                if (!triangle.HasNormals ()) {\r\n                    let n0 = AddAverageNormal (mesh, triangle, triangle.v0, triangleNormals, vertexToTriangles);\r\n                    let n1 = AddAverageNormal (mesh, triangle, triangle.v1, triangleNormals, vertexToTriangles);\r\n                    let n2 = AddAverageNormal (mesh, triangle, triangle.v2, triangleNormals, vertexToTriangles);\r\n                    triangle.SetNormals (n0, n1, n2);\r\n                }\r\n            }\r\n        }\r\n\r\n        let meshStatus = {\r\n            calculateCurveNormals : false\r\n        };\r\n\r\n        for (let i = 0; i < mesh.TriangleCount (); i++) {\r\n            let triangle = mesh.GetTriangle (i);\r\n            this.FinalizeTriangle (mesh, triangle, meshStatus);\r\n\r\n            if (triangle.mat === null) {\r\n                triangle.mat = this.GetDefaultMaterialIndex (model);\r\n            }\r\n        }\r\n\r\n        if (meshStatus.calculateCurveNormals) {\r\n            CalculateCurveNormals (mesh);\r\n        }\r\n    }\r\n\r\n    FinalizeTriangle (mesh, triangle, meshStatus)\r\n    {\r\n        if (!triangle.HasNormals ()) {\r\n            if (triangle.curve === null || triangle.curve === 0) {\r\n                let v0 = mesh.GetVertex (triangle.v0);\r\n                let v1 = mesh.GetVertex (triangle.v1);\r\n                let v2 = mesh.GetVertex (triangle.v2);\r\n                let normal = CalculateTriangleNormal (v0, v1, v2);\r\n                let normalIndex = mesh.AddNormal (normal);\r\n                triangle.SetNormals (normalIndex, normalIndex, normalIndex);\r\n            } else {\r\n                meshStatus.calculateCurveNormals = true;\r\n            }\r\n        }\r\n\r\n        if (triangle.curve === null) {\r\n            triangle.curve = 0;\r\n        }\r\n    }\r\n\r\n    FinalizeNodes (model)\r\n    {\r\n        let rootNode = model.GetRootNode ();\r\n\r\n        let emptyNodes = [];\r\n        rootNode.EnumerateChildren ((node) => {\r\n            if (node.IsEmpty ()) {\r\n                emptyNodes.push (node);\r\n            }\r\n        });\r\n\r\n        for (let nodeIndex = 0; nodeIndex < emptyNodes.length; nodeIndex++) {\r\n            let node = emptyNodes[nodeIndex];\r\n            let parentNode = node.GetParent ();\r\n            if (parentNode === null) {\r\n                continue;\r\n            }\r\n            parentNode.RemoveChildNode (node);\r\n            if (parentNode.IsEmpty ()) {\r\n                emptyNodes.push (parentNode);\r\n            }\r\n        }\r\n    }\r\n\r\n    GetDefaultMaterialIndex (model)\r\n    {\r\n        if (this.defaultMaterialIndex === null) {\r\n            let defaultMaterialColor = this.params.getDefaultMaterialColor ();\r\n            let defaultMaterial = new PhongMaterial ();\r\n            defaultMaterial.color = defaultMaterialColor;\r\n            defaultMaterial.isDefault = true;\r\n            this.defaultMaterialIndex = model.AddMaterial (defaultMaterial);\r\n        }\r\n        return this.defaultMaterialIndex;\r\n    }\r\n\r\n    Reset ()\r\n    {\r\n        this.defaultMaterialIndex = null;\r\n    }\r\n}\r\n\r\nexport function FinalizeModel (model, params)\r\n{\r\n    let finalizer = new ModelFinalizer (params);\r\n    finalizer.Finalize (model);\r\n}\r\n\r\nexport function CheckModel (model)\r\n{\r\n    function IsCorrectValue (val)\r\n    {\r\n        if (val === undefined || val === null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function IsCorrectNumber (val)\r\n    {\r\n        if (!IsCorrectValue (val)) {\r\n            return false;\r\n        }\r\n        if (isNaN (val)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function IsCorrectIndex (val, count)\r\n    {\r\n        if (!IsCorrectNumber (val)) {\r\n            return false;\r\n        }\r\n        if (val < 0 || val >= count) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function CheckMesh (model, mesh)\r\n    {\r\n        function CheckTriangle (model, mesh, triangle)\r\n        {\r\n            if (!IsCorrectIndex (triangle.v0, mesh.VertexCount ())) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectIndex (triangle.v1, mesh.VertexCount ())) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectIndex (triangle.v2, mesh.VertexCount ())) {\r\n                return false;\r\n            }\r\n            if (triangle.HasVertexColors ()) {\r\n                if (!IsCorrectIndex (triangle.c0, mesh.VertexColorCount ())) {\r\n                    return false;\r\n                }\r\n                if (!IsCorrectIndex (triangle.c1, mesh.VertexColorCount ())) {\r\n                    return false;\r\n                }\r\n                if (!IsCorrectIndex (triangle.c2, mesh.VertexColorCount ())) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!IsCorrectIndex (triangle.n0, mesh.NormalCount ())) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectIndex (triangle.n1, mesh.NormalCount ())) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectIndex (triangle.n2, mesh.NormalCount ())) {\r\n                return false;\r\n            }\r\n            if (triangle.HasTextureUVs ()) {\r\n                if (!IsCorrectIndex (triangle.u0, mesh.TextureUVCount ())) {\r\n                    return false;\r\n                }\r\n                    if (!IsCorrectIndex (triangle.u1, mesh.TextureUVCount ())) {\r\n                    return false;\r\n                }\r\n                if (!IsCorrectIndex (triangle.u2, mesh.TextureUVCount ())) {\r\n                    return false;\r\n                }\r\n            }\r\n            if (!IsCorrectIndex (triangle.mat, model.MaterialCount ())) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (triangle.curve)) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        for (let i = 0; i < mesh.VertexCount (); i++) {\r\n            let vertex = mesh.GetVertex (i);\r\n            if (!IsCorrectNumber (vertex.x)) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (vertex.y)) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (vertex.z)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < mesh.VertexColorCount (); i++) {\r\n            let color = mesh.GetVertexColor (i);\r\n            if (!IsCorrectNumber (color.r)) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (color.g)) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (color.b)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < mesh.NormalCount (); i++) {\r\n            let normal = mesh.GetNormal (i);\r\n            if (!IsCorrectNumber (normal.x)) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (normal.y)) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (normal.z)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < mesh.TextureUVCount (); i++) {\r\n            let uv = mesh.GetTextureUV (i);\r\n            if (!IsCorrectNumber (uv.x)) {\r\n                return false;\r\n            }\r\n            if (!IsCorrectNumber (uv.y)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < mesh.TriangleCount (); i++) {\r\n            let triangle = mesh.GetTriangle (i);\r\n            if (!CheckTriangle (model, mesh, triangle)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    for (let i = 0; i < model.MeshCount (); i++) {\r\n        let mesh = model.GetMesh (i);\r\n        if (!CheckMesh (model, mesh)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}