{"ast":null,"code":"import { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { LoadExternalLibrary } from '../io/externallibs.js';\nimport { GetFileName } from '../io/fileutils.js';\nimport { PhongMaterial, PhysicalMaterial } from '../model/material.js';\nimport { TransformMesh } from '../model/meshutils.js';\nimport { IsModelEmpty } from '../model/modelutils.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nimport { ConvertThreeGeometryToMesh } from '../threejs/threeutils.js';\nimport { ImporterBase } from './importerbase.js';\nimport { UpdateMaterialTransparency } from './importerutils.js';\nimport { TextureMap } from '../model/material.js';\nexport class Importer3dm extends ImporterBase {\n  constructor() {\n    super();\n    this.rhino = null;\n  }\n\n  CanImportExtension(extension) {\n    return extension === '3dm';\n  }\n\n  GetUpDirection() {\n    return Direction.Z;\n  }\n\n  ClearContent() {\n    this.instanceIdToObject = null;\n    this.instanceIdToDefinition = null;\n  }\n\n  ResetContent() {\n    this.instanceIdToObject = new Map();\n    this.instanceIdToDefinition = new Map();\n  }\n\n  ImportContent(fileContent, onFinish) {\n    if (this.rhino === null) {\n      LoadExternalLibrary('loaders/rhino3dm.min.js').then(() => {\n        rhino3dm().then(rhino => {\n          this.rhino = rhino;\n          this.ImportRhinoContent(fileContent);\n          onFinish();\n        });\n      }).catch(() => {\n        this.SetError('Failed to load rhino3dm.');\n        onFinish();\n      });\n    } else {\n      this.ImportRhinoContent(fileContent);\n      onFinish();\n    }\n  }\n\n  ImportRhinoContent(fileContent) {\n    let rhinoDoc = this.rhino.File3dm.fromByteArray(fileContent);\n\n    if (rhinoDoc === null) {\n      this.SetError('Failed to read Rhino file.');\n      return;\n    }\n\n    this.ImportRhinoDocument(rhinoDoc);\n\n    if (IsModelEmpty(this.model)) {\n      this.SetError('The model doesn\\'t contain any 3D meshes. Try to save the model while you are in shaded view in Rhino.');\n    }\n  }\n\n  ImportRhinoDocument(rhinoDoc) {\n    this.InitRhinoInstances(rhinoDoc);\n    this.ImportRhinoUserStrings(rhinoDoc);\n    this.ImportRhinoGeometry(rhinoDoc);\n  }\n\n  InitRhinoInstances(rhinoDoc) {\n    let rhinoObjects = rhinoDoc.objects();\n\n    for (let i = 0; i < rhinoObjects.count; i++) {\n      let rhinoObject = rhinoObjects.get(i);\n      let rhinoAttributes = rhinoObject.attributes();\n\n      if (rhinoAttributes.isInstanceDefinitionObject) {\n        this.instanceIdToObject.set(rhinoAttributes.id, rhinoObject);\n      }\n    }\n\n    let rhinoInstanceDefinitions = rhinoDoc.instanceDefinitions();\n\n    for (let i = 0; i < rhinoInstanceDefinitions.count(); i++) {\n      let rhinoInstanceDefinition = rhinoInstanceDefinitions.get(i);\n      this.instanceIdToDefinition.set(rhinoInstanceDefinition.id, rhinoInstanceDefinition);\n    }\n  }\n\n  ImportRhinoUserStrings(rhinoDoc) {\n    let docStrings = rhinoDoc.strings();\n\n    if (docStrings.count() > 0) {\n      let propertyGroup = new PropertyGroup('Document user texts');\n\n      for (let i = 0; i < docStrings.count(); i++) {\n        let docString = docStrings.get(i);\n        propertyGroup.AddProperty(new Property(PropertyType.Text, docString[0], docString[1]));\n      }\n\n      this.model.AddPropertyGroup(propertyGroup);\n    }\n  }\n\n  ImportRhinoGeometry(rhinoDoc) {\n    let rhinoObjects = rhinoDoc.objects();\n\n    for (let i = 0; i < rhinoObjects.count; i++) {\n      let rhinoObject = rhinoObjects.get(i);\n      this.ImportRhinoGeometryObject(rhinoDoc, rhinoObject, []);\n    }\n  }\n\n  ImportRhinoGeometryObject(rhinoDoc, rhinoObject, rhinoInstanceReferences) {\n    let rhinoGeometry = rhinoObject.geometry();\n    let rhinoAttributes = rhinoObject.attributes();\n    let objectType = rhinoGeometry.objectType;\n\n    if (rhinoAttributes.isInstanceDefinitionObject && rhinoInstanceReferences.length === 0) {\n      return;\n    }\n\n    let rhinoMesh = null;\n    let deleteMesh = false;\n\n    if (objectType === this.rhino.ObjectType.Mesh) {\n      rhinoMesh = rhinoGeometry;\n      deleteMesh = false;\n    } else if (objectType === this.rhino.ObjectType.Extrusion) {\n      rhinoMesh = rhinoGeometry.getMesh(this.rhino.MeshType.Any);\n      deleteMesh = true;\n    } else if (objectType === this.rhino.ObjectType.Brep) {\n      rhinoMesh = new this.rhino.Mesh();\n      let faces = rhinoGeometry.faces();\n\n      for (let i = 0; i < faces.count; i++) {\n        let face = faces.get(i);\n        let mesh = face.getMesh(this.rhino.MeshType.Any);\n\n        if (mesh) {\n          rhinoMesh.append(mesh);\n          mesh.delete();\n        }\n\n        face.delete();\n      }\n\n      faces.delete();\n      rhinoMesh.compact();\n      deleteMesh = true;\n    } else if (objectType === this.rhino.ObjectType.SubD) {\n      rhinoGeometry.subdivide(3);\n      rhinoMesh = this.rhino.Mesh.createFromSubDControlNet(rhinoGeometry);\n      deleteMesh = true;\n    } else if (objectType === this.rhino.ObjectType.InstanceReference) {\n      let parentDefinitionId = rhinoGeometry.parentIdefId;\n\n      if (this.instanceIdToDefinition.has(parentDefinitionId)) {\n        let instanceDefinition = this.instanceIdToDefinition.get(parentDefinitionId);\n        let instanceObjectIds = instanceDefinition.getObjectIds();\n\n        for (let i = 0; i < instanceObjectIds.length; i++) {\n          let instanceObjectId = instanceObjectIds[i];\n\n          if (this.instanceIdToObject.has(instanceObjectId)) {\n            let instanceObject = this.instanceIdToObject.get(instanceObjectId);\n            rhinoInstanceReferences.push(rhinoObject);\n            this.ImportRhinoGeometryObject(rhinoDoc, instanceObject, rhinoInstanceReferences);\n            rhinoInstanceReferences.pop();\n          }\n        }\n      }\n    }\n\n    if (rhinoMesh !== null) {\n      this.ImportRhinoMesh(rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences);\n\n      if (deleteMesh) {\n        rhinoMesh.delete();\n      }\n    }\n  }\n\n  ImportRhinoMesh(rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences) {\n    let rhinoAttributes = rhinoObject.attributes();\n    let materialIndex = this.GetMaterialIndex(rhinoDoc, rhinoObject, rhinoInstanceReferences);\n    let threeJson = rhinoMesh.toThreejsJSON();\n    let mesh = ConvertThreeGeometryToMesh(threeJson.data, materialIndex);\n    mesh.SetName(rhinoAttributes.name);\n    let userStrings = rhinoAttributes.getUserStrings();\n\n    if (userStrings.length > 0) {\n      let propertyGroup = new PropertyGroup('User texts');\n\n      for (let i = 0; i < userStrings.length; i++) {\n        let userString = userStrings[i];\n        propertyGroup.AddProperty(new Property(PropertyType.Text, userString[0], userString[1]));\n      }\n\n      mesh.AddPropertyGroup(propertyGroup);\n    }\n\n    if (rhinoInstanceReferences.length !== 0) {\n      let matrix = new Matrix().CreateIdentity();\n\n      for (let i = rhinoInstanceReferences.length - 1; i >= 0; i--) {\n        let rhinoInstanceReference = rhinoInstanceReferences[i];\n        let rhinoInstanceReferenceGeometry = rhinoInstanceReference.geometry();\n        let rhinoInstanceReferenceMatrix = rhinoInstanceReferenceGeometry.xform.toFloatArray(false);\n        let transformationMatrix = new Matrix(rhinoInstanceReferenceMatrix);\n        matrix = matrix.MultiplyMatrix(transformationMatrix);\n      }\n\n      let transformation = new Transformation(matrix);\n      TransformMesh(mesh, transformation);\n    }\n\n    this.model.AddMeshToRootNode(mesh);\n  }\n\n  GetMaterialIndex(rhinoDoc, rhinoObject, rhinoInstanceReferences) {\n    function GetRhinoMaterial(rhino, rhinoObject, rhinoInstanceReferences) {\n      let rhinoAttributes = rhinoObject.attributes();\n\n      if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromObject) {\n        let materialIndex = rhinoAttributes.materialIndex;\n\n        if (materialIndex > -1) {\n          return rhinoDoc.materials().get(materialIndex);\n        }\n      } else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromLayer) {\n        let layerIndex = rhinoAttributes.layerIndex;\n\n        if (layerIndex > -1) {\n          let layer = rhinoDoc.layers().get(layerIndex);\n          let layerMaterialIndex = layer.renderMaterialIndex;\n\n          if (layerMaterialIndex > -1) {\n            return rhinoDoc.materials().get(layerMaterialIndex);\n          }\n        }\n      } else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromParent) {\n        if (rhinoInstanceReferences.length !== 0) {\n          return GetRhinoMaterial(rhino, rhinoInstanceReferences[0], []);\n        }\n      }\n\n      return null;\n    }\n\n    function ConvertRhinoMaterial(rhinoMaterial, callbacks) {\n      function SetColor(color, rhinoColor) {\n        color.Set(rhinoColor.r, rhinoColor.g, rhinoColor.b);\n      }\n\n      function IsBlack(rhinoColor) {\n        return rhinoColor.r === 0 && rhinoColor.g === 0 && rhinoColor.b === 0;\n      }\n\n      function IsWhite(rhinoColor) {\n        return rhinoColor.r === 255 && rhinoColor.g === 255 && rhinoColor.b === 255;\n      }\n\n      let material = null;\n      let physicallyBased = rhinoMaterial.physicallyBased();\n\n      if (physicallyBased.supported) {\n        material = new PhysicalMaterial();\n        material.metalness = physicallyBased.metallic ? 1.0 : 0.0;\n        material.roughness = physicallyBased.roughness;\n      } else {\n        material = new PhongMaterial();\n        SetColor(material.ambient, rhinoMaterial.ambientColor);\n        SetColor(material.specular, rhinoMaterial.specularColor);\n      }\n\n      material.name = rhinoMaterial.name;\n      SetColor(material.color, rhinoMaterial.diffuseColor);\n      material.opacity = 1.0 - rhinoMaterial.transparency;\n      UpdateMaterialTransparency(material);\n\n      if (IsBlack(material.color) && !IsWhite(rhinoMaterial.reflectionColor)) {\n        SetColor(material.color, rhinoMaterial.reflectionColor);\n      }\n\n      if (IsBlack(material.color) && !IsWhite(rhinoMaterial.transparentColor)) {\n        SetColor(material.color, rhinoMaterial.transparentColor);\n      }\n\n      let rhinoTexture = rhinoMaterial.getBitmapTexture();\n\n      if (rhinoTexture) {\n        let texture = new TextureMap();\n        let textureName = GetFileName(rhinoTexture.fileName);\n        let textureBuffer = callbacks.getFileBuffer(textureName);\n        texture.name = textureName;\n        texture.buffer = textureBuffer;\n        material.diffuseMap = texture;\n      }\n\n      return material;\n    }\n\n    function FindMatchingMaterial(model, rhinoMaterial, callbacks) {\n      let material = ConvertRhinoMaterial(rhinoMaterial, callbacks);\n\n      for (let i = 0; i < model.MaterialCount(); i++) {\n        let current = model.GetMaterial(i);\n\n        if (current.IsEqual(material)) {\n          return i;\n        }\n      }\n\n      return model.AddMaterial(material);\n    }\n\n    let rhinoMaterial = GetRhinoMaterial(this.rhino, rhinoObject, rhinoInstanceReferences);\n\n    if (rhinoMaterial === null) {\n      return null;\n    }\n\n    return FindMatchingMaterial(this.model, rhinoMaterial, this.callbacks);\n  }\n\n}","map":{"version":3,"names":["Direction","Matrix","Transformation","LoadExternalLibrary","GetFileName","PhongMaterial","PhysicalMaterial","TransformMesh","IsModelEmpty","Property","PropertyGroup","PropertyType","ConvertThreeGeometryToMesh","ImporterBase","UpdateMaterialTransparency","TextureMap","Importer3dm","constructor","rhino","CanImportExtension","extension","GetUpDirection","Z","ClearContent","instanceIdToObject","instanceIdToDefinition","ResetContent","Map","ImportContent","fileContent","onFinish","then","rhino3dm","ImportRhinoContent","catch","SetError","rhinoDoc","File3dm","fromByteArray","ImportRhinoDocument","model","InitRhinoInstances","ImportRhinoUserStrings","ImportRhinoGeometry","rhinoObjects","objects","i","count","rhinoObject","get","rhinoAttributes","attributes","isInstanceDefinitionObject","set","id","rhinoInstanceDefinitions","instanceDefinitions","rhinoInstanceDefinition","docStrings","strings","propertyGroup","docString","AddProperty","Text","AddPropertyGroup","ImportRhinoGeometryObject","rhinoInstanceReferences","rhinoGeometry","geometry","objectType","length","rhinoMesh","deleteMesh","ObjectType","Mesh","Extrusion","getMesh","MeshType","Any","Brep","faces","face","mesh","append","delete","compact","SubD","subdivide","createFromSubDControlNet","InstanceReference","parentDefinitionId","parentIdefId","has","instanceDefinition","instanceObjectIds","getObjectIds","instanceObjectId","instanceObject","push","pop","ImportRhinoMesh","materialIndex","GetMaterialIndex","threeJson","toThreejsJSON","data","SetName","name","userStrings","getUserStrings","userString","matrix","CreateIdentity","rhinoInstanceReference","rhinoInstanceReferenceGeometry","rhinoInstanceReferenceMatrix","xform","toFloatArray","transformationMatrix","MultiplyMatrix","transformation","AddMeshToRootNode","GetRhinoMaterial","materialSource","ObjectMaterialSource","MaterialFromObject","materials","MaterialFromLayer","layerIndex","layer","layers","layerMaterialIndex","renderMaterialIndex","MaterialFromParent","ConvertRhinoMaterial","rhinoMaterial","callbacks","SetColor","color","rhinoColor","Set","r","g","b","IsBlack","IsWhite","material","physicallyBased","supported","metalness","metallic","roughness","ambient","ambientColor","specular","specularColor","diffuseColor","opacity","transparency","reflectionColor","transparentColor","rhinoTexture","getBitmapTexture","texture","textureName","fileName","textureBuffer","getFileBuffer","buffer","diffuseMap","FindMatchingMaterial","MaterialCount","current","GetMaterial","IsEqual","AddMaterial"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importer3dm.js"],"sourcesContent":["import { Direction } from '../geometry/geometry.js';\r\nimport { Matrix } from '../geometry/matrix.js';\r\nimport { Transformation } from '../geometry/transformation.js';\r\nimport { LoadExternalLibrary } from '../io/externallibs.js';\r\nimport { GetFileName } from '../io/fileutils.js';\r\nimport { PhongMaterial, PhysicalMaterial } from '../model/material.js';\r\nimport { TransformMesh } from '../model/meshutils.js';\r\nimport { IsModelEmpty } from '../model/modelutils.js';\r\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\r\nimport { ConvertThreeGeometryToMesh } from '../threejs/threeutils.js';\r\nimport { ImporterBase } from './importerbase.js';\r\nimport { UpdateMaterialTransparency } from './importerutils.js';\r\nimport { TextureMap } from '../model/material.js';\r\n\r\nexport class Importer3dm extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n        this.rhino = null;\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === '3dm';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Z;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n        this.instanceIdToObject = null;\r\n        this.instanceIdToDefinition = null;\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n        this.instanceIdToObject = new Map ();\r\n        this.instanceIdToDefinition = new Map ();\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        if (this.rhino === null) {\r\n            LoadExternalLibrary ('loaders/rhino3dm.min.js').then (() => {\r\n                rhino3dm ().then ((rhino) => {\r\n                    this.rhino = rhino;\r\n                    this.ImportRhinoContent (fileContent);\r\n                    onFinish ();\r\n                });\r\n            }).catch (() => {\r\n                this.SetError ('Failed to load rhino3dm.');\r\n                onFinish ();\r\n            });\r\n        } else {\r\n            this.ImportRhinoContent (fileContent);\r\n            onFinish ();\r\n        }\r\n    }\r\n\r\n    ImportRhinoContent (fileContent)\r\n    {\r\n        let rhinoDoc = this.rhino.File3dm.fromByteArray (fileContent);\r\n        if (rhinoDoc === null) {\r\n            this.SetError ('Failed to read Rhino file.');\r\n            return;\r\n        }\r\n        this.ImportRhinoDocument (rhinoDoc);\r\n        if (IsModelEmpty (this.model)) {\r\n            this.SetError ('The model doesn\\'t contain any 3D meshes. Try to save the model while you are in shaded view in Rhino.');\r\n        }\r\n    }\r\n\r\n    ImportRhinoDocument (rhinoDoc)\r\n    {\r\n        this.InitRhinoInstances (rhinoDoc);\r\n        this.ImportRhinoUserStrings (rhinoDoc);\r\n        this.ImportRhinoGeometry (rhinoDoc);\r\n    }\r\n\r\n    InitRhinoInstances (rhinoDoc)\r\n    {\r\n        let rhinoObjects = rhinoDoc.objects ();\r\n        for (let i = 0; i < rhinoObjects.count; i++) {\r\n            let rhinoObject = rhinoObjects.get (i);\r\n            let rhinoAttributes = rhinoObject.attributes ();\r\n            if (rhinoAttributes.isInstanceDefinitionObject) {\r\n                this.instanceIdToObject.set (rhinoAttributes.id, rhinoObject);\r\n            }\r\n        }\r\n        let rhinoInstanceDefinitions = rhinoDoc.instanceDefinitions ();\r\n        for (let i = 0; i < rhinoInstanceDefinitions.count (); i++) {\r\n            let rhinoInstanceDefinition = rhinoInstanceDefinitions.get (i);\r\n            this.instanceIdToDefinition.set (rhinoInstanceDefinition.id, rhinoInstanceDefinition);\r\n        }\r\n    }\r\n\r\n    ImportRhinoUserStrings (rhinoDoc)\r\n    {\r\n        let docStrings = rhinoDoc.strings ();\r\n        if (docStrings.count () > 0) {\r\n            let propertyGroup = new PropertyGroup ('Document user texts');\r\n            for (let i = 0; i < docStrings.count (); i++) {\r\n                let docString = docStrings.get (i);\r\n                propertyGroup.AddProperty (new Property (PropertyType.Text, docString[0], docString[1]));\r\n            }\r\n            this.model.AddPropertyGroup (propertyGroup);\r\n        }\r\n    }\r\n\r\n    ImportRhinoGeometry (rhinoDoc)\r\n    {\r\n        let rhinoObjects = rhinoDoc.objects ();\r\n        for (let i = 0; i < rhinoObjects.count; i++) {\r\n            let rhinoObject = rhinoObjects.get (i);\r\n            this.ImportRhinoGeometryObject (rhinoDoc, rhinoObject, []);\r\n        }\r\n    }\r\n\r\n    ImportRhinoGeometryObject (rhinoDoc, rhinoObject, rhinoInstanceReferences)\r\n    {\r\n        let rhinoGeometry = rhinoObject.geometry ();\r\n        let rhinoAttributes = rhinoObject.attributes ();\r\n\r\n        let objectType = rhinoGeometry.objectType;\r\n        if (rhinoAttributes.isInstanceDefinitionObject && rhinoInstanceReferences.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let rhinoMesh = null;\r\n        let deleteMesh = false;\r\n\r\n        if (objectType === this.rhino.ObjectType.Mesh) {\r\n            rhinoMesh = rhinoGeometry;\r\n            deleteMesh = false;\r\n        } else if (objectType === this.rhino.ObjectType.Extrusion) {\r\n            rhinoMesh = rhinoGeometry.getMesh (this.rhino.MeshType.Any);\r\n            deleteMesh = true;\r\n        } else if (objectType === this.rhino.ObjectType.Brep) {\r\n            rhinoMesh = new this.rhino.Mesh ();\r\n            let faces = rhinoGeometry.faces ();\r\n            for (let i = 0; i < faces.count; i++) {\r\n                let face = faces.get (i);\r\n                let mesh = face.getMesh (this.rhino.MeshType.Any);\r\n                if (mesh) {\r\n                    rhinoMesh.append (mesh);\r\n                    mesh.delete ();\r\n                }\r\n                face.delete ();\r\n            }\r\n            faces.delete ();\r\n            rhinoMesh.compact ();\r\n            deleteMesh = true;\r\n        } else if (objectType === this.rhino.ObjectType.SubD) {\r\n            rhinoGeometry.subdivide (3);\r\n            rhinoMesh = this.rhino.Mesh.createFromSubDControlNet (rhinoGeometry);\r\n            deleteMesh = true;\r\n        } else if (objectType === this.rhino.ObjectType.InstanceReference) {\r\n            let parentDefinitionId = rhinoGeometry.parentIdefId;\r\n            if (this.instanceIdToDefinition.has (parentDefinitionId)) {\r\n                let instanceDefinition = this.instanceIdToDefinition.get (parentDefinitionId);\r\n                let instanceObjectIds = instanceDefinition.getObjectIds ();\r\n                for (let i = 0; i < instanceObjectIds.length; i++) {\r\n                    let instanceObjectId = instanceObjectIds[i];\r\n                    if (this.instanceIdToObject.has (instanceObjectId)) {\r\n                        let instanceObject = this.instanceIdToObject.get (instanceObjectId);\r\n                        rhinoInstanceReferences.push (rhinoObject);\r\n                        this.ImportRhinoGeometryObject (rhinoDoc, instanceObject, rhinoInstanceReferences);\r\n                        rhinoInstanceReferences.pop ();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rhinoMesh !== null) {\r\n            this.ImportRhinoMesh (rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences);\r\n            if (deleteMesh) {\r\n                rhinoMesh.delete ();\r\n            }\r\n        }\r\n    }\r\n\r\n    ImportRhinoMesh (rhinoDoc, rhinoMesh, rhinoObject, rhinoInstanceReferences)\r\n    {\r\n        let rhinoAttributes = rhinoObject.attributes ();\r\n\r\n        let materialIndex = this.GetMaterialIndex (rhinoDoc, rhinoObject, rhinoInstanceReferences);\r\n        let threeJson = rhinoMesh.toThreejsJSON ();\r\n        let mesh = ConvertThreeGeometryToMesh (threeJson.data, materialIndex);\r\n        mesh.SetName (rhinoAttributes.name);\r\n\r\n        let userStrings = rhinoAttributes.getUserStrings ();\r\n        if (userStrings.length > 0) {\r\n            let propertyGroup = new PropertyGroup ('User texts');\r\n            for (let i = 0; i < userStrings.length; i++) {\r\n                let userString = userStrings[i];\r\n                propertyGroup.AddProperty (new Property (PropertyType.Text, userString[0], userString[1]));\r\n            }\r\n            mesh.AddPropertyGroup (propertyGroup);\r\n        }\r\n\r\n        if (rhinoInstanceReferences.length !== 0) {\r\n            let matrix = new Matrix ().CreateIdentity ();\r\n            for (let i = rhinoInstanceReferences.length - 1; i >= 0; i--) {\r\n                let rhinoInstanceReference = rhinoInstanceReferences[i];\r\n                let rhinoInstanceReferenceGeometry = rhinoInstanceReference.geometry ();\r\n                let rhinoInstanceReferenceMatrix = rhinoInstanceReferenceGeometry.xform.toFloatArray (false);\r\n                let transformationMatrix = new Matrix (rhinoInstanceReferenceMatrix);\r\n                matrix = matrix.MultiplyMatrix (transformationMatrix);\r\n            }\r\n            let transformation = new Transformation (matrix);\r\n            TransformMesh (mesh, transformation);\r\n        }\r\n        this.model.AddMeshToRootNode (mesh);\r\n    }\r\n\r\n    GetMaterialIndex (rhinoDoc, rhinoObject, rhinoInstanceReferences)\r\n    {\r\n        function GetRhinoMaterial (rhino, rhinoObject, rhinoInstanceReferences)\r\n        {\r\n            let rhinoAttributes = rhinoObject.attributes ();\r\n            if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromObject) {\r\n                let materialIndex = rhinoAttributes.materialIndex;\r\n                if (materialIndex > -1) {\r\n                    return rhinoDoc.materials ().get (materialIndex);\r\n                }\r\n            } else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromLayer) {\r\n                let layerIndex = rhinoAttributes.layerIndex;\r\n                if (layerIndex > -1) {\r\n                    let layer = rhinoDoc.layers ().get (layerIndex);\r\n                    let layerMaterialIndex = layer.renderMaterialIndex;\r\n                    if (layerMaterialIndex > -1) {\r\n                        return rhinoDoc.materials ().get (layerMaterialIndex);\r\n                    }\r\n                }\r\n            } else if (rhinoAttributes.materialSource === rhino.ObjectMaterialSource.MaterialFromParent) {\r\n                if (rhinoInstanceReferences.length !== 0) {\r\n                    return GetRhinoMaterial (rhino, rhinoInstanceReferences[0], []);\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function ConvertRhinoMaterial (rhinoMaterial, callbacks)\r\n        {\r\n            function SetColor (color, rhinoColor)\r\n            {\r\n                color.Set (rhinoColor.r, rhinoColor.g, rhinoColor.b);\r\n            }\r\n\r\n            function IsBlack (rhinoColor)\r\n            {\r\n                return rhinoColor.r === 0 && rhinoColor.g === 0 && rhinoColor.b === 0;\r\n            }\r\n\r\n            function IsWhite (rhinoColor)\r\n            {\r\n                return rhinoColor.r === 255 && rhinoColor.g === 255 && rhinoColor.b === 255;\r\n            }\r\n\r\n            let material = null;\r\n            let physicallyBased = rhinoMaterial.physicallyBased ();\r\n            if (physicallyBased.supported) {\r\n                material = new PhysicalMaterial ();\r\n                material.metalness = physicallyBased.metallic ? 1.0 : 0.0;\r\n                material.roughness = physicallyBased.roughness;\r\n            } else {\r\n                material = new PhongMaterial ();\r\n                SetColor (material.ambient, rhinoMaterial.ambientColor);\r\n                SetColor (material.specular, rhinoMaterial.specularColor);\r\n            }\r\n\r\n            material.name = rhinoMaterial.name;\r\n\r\n            SetColor (material.color, rhinoMaterial.diffuseColor);\r\n            material.opacity = 1.0 - rhinoMaterial.transparency;\r\n            UpdateMaterialTransparency (material);\r\n\r\n            if (IsBlack (material.color) && !IsWhite (rhinoMaterial.reflectionColor)) {\r\n                SetColor (material.color, rhinoMaterial.reflectionColor);\r\n            }\r\n            if (IsBlack (material.color) && !IsWhite (rhinoMaterial.transparentColor)) {\r\n                SetColor (material.color, rhinoMaterial.transparentColor);\r\n            }\r\n\r\n            let rhinoTexture = rhinoMaterial.getBitmapTexture ();\r\n            if (rhinoTexture) {\r\n                let texture = new TextureMap ();\r\n                let textureName = GetFileName (rhinoTexture.fileName);\r\n                let textureBuffer = callbacks.getFileBuffer (textureName);\r\n                texture.name = textureName;\r\n                texture.buffer = textureBuffer;\r\n                material.diffuseMap = texture;\r\n            }\r\n\r\n            return material;\r\n        }\r\n\r\n        function FindMatchingMaterial (model, rhinoMaterial, callbacks)\r\n        {\r\n            let material = ConvertRhinoMaterial (rhinoMaterial, callbacks);\r\n            for (let i = 0; i < model.MaterialCount (); i++) {\r\n                let current = model.GetMaterial (i);\r\n                if (current.IsEqual (material)) {\r\n                    return i;\r\n                }\r\n            }\r\n            return model.AddMaterial (material);\r\n        }\r\n\r\n        let rhinoMaterial = GetRhinoMaterial (this.rhino, rhinoObject, rhinoInstanceReferences);\r\n        if (rhinoMaterial === null) {\r\n            return null;\r\n        }\r\n        return FindMatchingMaterial (this.model, rhinoMaterial, this.callbacks);\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}