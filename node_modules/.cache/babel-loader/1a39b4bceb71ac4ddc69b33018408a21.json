{"ast":null,"code":"import { FileFormat, GetFileName } from '../io/fileutils.js';\nimport { TextWriter } from '../io/textwriter.js';\nimport { MaterialType } from '../model/material.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\nexport class ExporterObj extends ExporterBase {\n  constructor() {\n    super();\n  }\n\n  CanExport(format, extension) {\n    return format === FileFormat.Text && extension === 'obj';\n  }\n\n  ExportContent(exporterModel, format, files, onFinish) {\n    function WriteTexture(mtlWriter, keyword, texture, files) {\n      if (texture === null || !texture.IsValid()) {\n        return;\n      }\n\n      let fileName = GetFileName(texture.name);\n      mtlWriter.WriteArrayLine([keyword, fileName]);\n      let fileIndex = files.findIndex(file => {\n        return file.GetName() === fileName;\n      });\n\n      if (fileIndex === -1) {\n        let textureFile = new ExportedFile(fileName);\n        textureFile.SetBufferContent(texture.buffer);\n        files.push(textureFile);\n      }\n    }\n\n    let mtlFile = new ExportedFile('model.mtl');\n    let objFile = new ExportedFile('model.obj');\n    files.push(mtlFile);\n    files.push(objFile);\n    let mtlWriter = new TextWriter();\n    mtlWriter.WriteLine(this.GetHeaderText());\n\n    for (let materialIndex = 0; materialIndex < exporterModel.MaterialCount(); materialIndex++) {\n      let material = exporterModel.GetMaterial(materialIndex);\n      mtlWriter.WriteArrayLine(['newmtl', this.GetExportedMaterialName(material.name)]);\n      mtlWriter.WriteArrayLine(['Kd', material.color.r / 255.0, material.color.g / 255.0, material.color.b / 255.0]);\n      mtlWriter.WriteArrayLine(['d', material.opacity]);\n\n      if (material.type === MaterialType.Phong) {\n        mtlWriter.WriteArrayLine(['Ka', material.ambient.r / 255.0, material.ambient.g / 255.0, material.ambient.b / 255.0]);\n        mtlWriter.WriteArrayLine(['Ks', material.specular.r / 255.0, material.specular.g / 255.0, material.specular.b / 255.0]);\n        mtlWriter.WriteArrayLine(['Ns', material.shininess * 1000.0]);\n      }\n\n      WriteTexture(mtlWriter, 'map_Kd', material.diffuseMap, files);\n\n      if (material.type === MaterialType.Phong) {\n        WriteTexture(mtlWriter, 'map_Ks', material.specularMap, files);\n      }\n\n      WriteTexture(mtlWriter, 'bump', material.bumpMap, files);\n    }\n\n    mtlFile.SetTextContent(mtlWriter.GetText());\n    let objWriter = new TextWriter();\n    objWriter.WriteLine(this.GetHeaderText());\n    objWriter.WriteArrayLine(['mtllib', mtlFile.GetName()]);\n    let vertexOffset = 0;\n    let normalOffset = 0;\n    let uvOffset = 0;\n    let usedMaterialName = null;\n    exporterModel.EnumerateTransformedMeshes(mesh => {\n      objWriter.WriteArrayLine(['g', this.GetExportedMeshName(mesh.GetName())]);\n\n      for (let vertexIndex = 0; vertexIndex < mesh.VertexCount(); vertexIndex++) {\n        let vertex = mesh.GetVertex(vertexIndex);\n        objWriter.WriteArrayLine(['v', vertex.x, vertex.y, vertex.z]);\n      }\n\n      for (let normalIndex = 0; normalIndex < mesh.NormalCount(); normalIndex++) {\n        let normal = mesh.GetNormal(normalIndex);\n        objWriter.WriteArrayLine(['vn', normal.x, normal.y, normal.z]);\n      }\n\n      for (let textureUVIndex = 0; textureUVIndex < mesh.TextureUVCount(); textureUVIndex++) {\n        let uv = mesh.GetTextureUV(textureUVIndex);\n        objWriter.WriteArrayLine(['vt', uv.x, uv.y]);\n      }\n\n      for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount(); triangleIndex++) {\n        let triangle = mesh.GetTriangle(triangleIndex);\n        let v0 = triangle.v0 + vertexOffset + 1;\n        let v1 = triangle.v1 + vertexOffset + 1;\n        let v2 = triangle.v2 + vertexOffset + 1;\n        let n0 = triangle.n0 + normalOffset + 1;\n        let n1 = triangle.n1 + normalOffset + 1;\n        let n2 = triangle.n2 + normalOffset + 1;\n\n        if (triangle.mat !== null) {\n          let material = exporterModel.GetMaterial(triangle.mat);\n          let materialName = this.GetExportedMaterialName(material.name);\n\n          if (materialName !== usedMaterialName) {\n            objWriter.WriteArrayLine(['usemtl', materialName]);\n            usedMaterialName = materialName;\n          }\n        }\n\n        let u0 = '';\n        let u1 = '';\n        let u2 = '';\n\n        if (triangle.HasTextureUVs()) {\n          u0 = triangle.u0 + uvOffset + 1;\n          u1 = triangle.u1 + uvOffset + 1;\n          u2 = triangle.u2 + uvOffset + 1;\n        }\n\n        objWriter.WriteArrayLine(['f', [v0, u0, n0].join('/'), [v1, u1, n1].join('/'), [v2, u2, n2].join('/')]);\n      }\n\n      vertexOffset += mesh.VertexCount();\n      normalOffset += mesh.NormalCount();\n      uvOffset += mesh.TextureUVCount();\n    });\n    objFile.SetTextContent(objWriter.GetText());\n    onFinish();\n  }\n\n  GetHeaderText() {\n    return '# exported by https://3dviewer.net';\n  }\n\n}","map":{"version":3,"names":["FileFormat","GetFileName","TextWriter","MaterialType","ExportedFile","ExporterBase","ExporterObj","constructor","CanExport","format","extension","Text","ExportContent","exporterModel","files","onFinish","WriteTexture","mtlWriter","keyword","texture","IsValid","fileName","name","WriteArrayLine","fileIndex","findIndex","file","GetName","textureFile","SetBufferContent","buffer","push","mtlFile","objFile","WriteLine","GetHeaderText","materialIndex","MaterialCount","material","GetMaterial","GetExportedMaterialName","color","r","g","b","opacity","type","Phong","ambient","specular","shininess","diffuseMap","specularMap","bumpMap","SetTextContent","GetText","objWriter","vertexOffset","normalOffset","uvOffset","usedMaterialName","EnumerateTransformedMeshes","mesh","GetExportedMeshName","vertexIndex","VertexCount","vertex","GetVertex","x","y","z","normalIndex","NormalCount","normal","GetNormal","textureUVIndex","TextureUVCount","uv","GetTextureUV","triangleIndex","TriangleCount","triangle","GetTriangle","v0","v1","v2","n0","n1","n2","mat","materialName","u0","u1","u2","HasTextureUVs","join"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/export/exporterobj.js"],"sourcesContent":["import { FileFormat, GetFileName } from '../io/fileutils.js';\r\nimport { TextWriter } from '../io/textwriter.js';\r\nimport { MaterialType } from '../model/material.js';\r\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\r\n\r\nexport class ExporterObj extends ExporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanExport (format, extension)\r\n    {\r\n        return format === FileFormat.Text && extension === 'obj';\r\n    }\r\n\r\n    ExportContent (exporterModel, format, files, onFinish)\r\n    {\r\n        function WriteTexture (mtlWriter, keyword, texture, files)\r\n        {\r\n            if (texture === null || !texture.IsValid ()) {\r\n                return;\r\n            }\r\n            let fileName = GetFileName (texture.name);\r\n            mtlWriter.WriteArrayLine ([keyword, fileName]);\r\n\r\n            let fileIndex = files.findIndex ((file) => {\r\n                return file.GetName () === fileName;\r\n            });\r\n            if (fileIndex === -1) {\r\n                let textureFile = new ExportedFile (fileName);\r\n                textureFile.SetBufferContent (texture.buffer);\r\n                files.push (textureFile);\r\n            }\r\n        }\r\n\r\n        let mtlFile = new ExportedFile ('model.mtl');\r\n        let objFile = new ExportedFile ('model.obj');\r\n\r\n        files.push (mtlFile);\r\n        files.push (objFile);\r\n\r\n        let mtlWriter = new TextWriter ();\r\n        mtlWriter.WriteLine (this.GetHeaderText ());\r\n        for (let materialIndex = 0; materialIndex < exporterModel.MaterialCount (); materialIndex++) {\r\n            let material = exporterModel.GetMaterial (materialIndex);\r\n            mtlWriter.WriteArrayLine (['newmtl', this.GetExportedMaterialName (material.name)]);\r\n            mtlWriter.WriteArrayLine (['Kd', material.color.r / 255.0, material.color.g / 255.0, material.color.b / 255.0]);\r\n            mtlWriter.WriteArrayLine (['d', material.opacity]);\r\n            if (material.type === MaterialType.Phong) {\r\n                mtlWriter.WriteArrayLine (['Ka', material.ambient.r / 255.0, material.ambient.g / 255.0, material.ambient.b / 255.0]);\r\n                mtlWriter.WriteArrayLine (['Ks', material.specular.r / 255.0, material.specular.g / 255.0, material.specular.b / 255.0]);\r\n                mtlWriter.WriteArrayLine (['Ns', material.shininess * 1000.0]);\r\n            }\r\n            WriteTexture (mtlWriter, 'map_Kd', material.diffuseMap, files);\r\n            if (material.type === MaterialType.Phong) {\r\n                WriteTexture (mtlWriter, 'map_Ks', material.specularMap, files);\r\n            }\r\n            WriteTexture (mtlWriter, 'bump', material.bumpMap, files);\r\n        }\r\n        mtlFile.SetTextContent (mtlWriter.GetText ());\r\n\r\n        let objWriter = new TextWriter ();\r\n        objWriter.WriteLine (this.GetHeaderText ());\r\n        objWriter.WriteArrayLine (['mtllib', mtlFile.GetName ()]);\r\n        let vertexOffset = 0;\r\n        let normalOffset = 0;\r\n        let uvOffset = 0;\r\n        let usedMaterialName = null;\r\n        exporterModel.EnumerateTransformedMeshes ((mesh) => {\r\n            objWriter.WriteArrayLine (['g', this.GetExportedMeshName (mesh.GetName ())]);\r\n            for (let vertexIndex = 0; vertexIndex < mesh.VertexCount (); vertexIndex++) {\r\n                let vertex = mesh.GetVertex (vertexIndex);\r\n                objWriter.WriteArrayLine (['v', vertex.x, vertex.y, vertex.z]);\r\n            }\r\n            for (let normalIndex = 0; normalIndex < mesh.NormalCount (); normalIndex++) {\r\n                let normal = mesh.GetNormal (normalIndex);\r\n                objWriter.WriteArrayLine (['vn', normal.x, normal.y, normal.z]);\r\n            }\r\n            for (let textureUVIndex = 0; textureUVIndex < mesh.TextureUVCount (); textureUVIndex++) {\r\n                let uv = mesh.GetTextureUV (textureUVIndex);\r\n                objWriter.WriteArrayLine (['vt', uv.x, uv.y]);\r\n            }\r\n            for (let triangleIndex = 0; triangleIndex < mesh.TriangleCount (); triangleIndex++) {\r\n                let triangle = mesh.GetTriangle (triangleIndex);\r\n                let v0 = triangle.v0 + vertexOffset + 1;\r\n                let v1 = triangle.v1 + vertexOffset + 1;\r\n                let v2 = triangle.v2 + vertexOffset + 1;\r\n                let n0 = triangle.n0 + normalOffset + 1;\r\n                let n1 = triangle.n1 + normalOffset + 1;\r\n                let n2 = triangle.n2 + normalOffset + 1;\r\n                if (triangle.mat !== null) {\r\n                    let material = exporterModel.GetMaterial (triangle.mat);\r\n                    let materialName = this.GetExportedMaterialName (material.name);\r\n                    if (materialName !== usedMaterialName) {\r\n                        objWriter.WriteArrayLine (['usemtl', materialName]);\r\n                        usedMaterialName = materialName;\r\n                    }\r\n                }\r\n                let u0 = '';\r\n                let u1 = '';\r\n                let u2 = '';\r\n                if (triangle.HasTextureUVs ()) {\r\n                    u0 = triangle.u0 + uvOffset + 1;\r\n                    u1 = triangle.u1 + uvOffset + 1;\r\n                    u2 = triangle.u2 + uvOffset + 1;\r\n                }\r\n                objWriter.WriteArrayLine (['f', [v0, u0, n0].join ('/'), [v1, u1, n1].join ('/'), [v2, u2, n2].join ('/')]);\r\n            }\r\n            vertexOffset += mesh.VertexCount ();\r\n            normalOffset += mesh.NormalCount ();\r\n            uvOffset += mesh.TextureUVCount ();\r\n        });\r\n\r\n        objFile.SetTextContent (objWriter.GetText ());\r\n        onFinish ();\r\n    }\r\n\r\n    GetHeaderText ()\r\n    {\r\n        return '# exported by https://3dviewer.net';\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}