{"ast":null,"code":"import { LoadExternalLibrary } from '../io/externallibs.js';\nimport { FileFormat } from '../io/fileutils.js';\nimport { MaterialType } from '../model/material.js';\nimport { ConvertMeshToMeshBuffer } from '../model/meshbuffer.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\nexport class Exporter3dm extends ExporterBase {\n  constructor() {\n    super();\n    this.rhino = null;\n  }\n\n  CanExport(format, extension) {\n    return format === FileFormat.Binary && extension === '3dm';\n  }\n\n  ExportContent(exporterModel, format, files, onFinish) {\n    if (this.rhino === null) {\n      LoadExternalLibrary('loaders/rhino3dm.min.js').then(() => {\n        rhino3dm().then(rhino => {\n          this.rhino = rhino;\n          this.ExportRhinoContent(exporterModel, files, onFinish);\n        });\n      }).catch(() => {\n        onFinish();\n      });\n    } else {\n      this.ExportRhinoContent(exporterModel, files, onFinish);\n    }\n  }\n\n  ExportRhinoContent(exporterModel, files, onFinish) {\n    function ColorToRhinoColor(color) {\n      return {\n        r: color.r,\n        g: color.g,\n        b: color.b,\n        a: 255\n      };\n    }\n\n    let rhinoFile = new ExportedFile('model.3dm');\n    files.push(rhinoFile);\n    let rhinoDoc = new this.rhino.File3dm();\n    exporterModel.EnumerateTransformedMeshes(mesh => {\n      let meshBuffer = ConvertMeshToMeshBuffer(mesh);\n\n      for (let primitiveIndex = 0; primitiveIndex < meshBuffer.PrimitiveCount(); primitiveIndex++) {\n        let primitive = meshBuffer.GetPrimitive(primitiveIndex);\n        let threeJson = {\n          data: {\n            attributes: {\n              position: {\n                itemSize: 3,\n                type: 'Float32Array',\n                array: primitive.vertices\n              },\n              normal: {\n                itemSize: 3,\n                type: 'Float32Array',\n                array: primitive.normals\n              }\n            },\n            index: {\n              type: 'Uint16Array',\n              array: primitive.indices\n            }\n          }\n        };\n        let material = exporterModel.GetMaterial(primitive.material);\n        let rhinoMaterial = new this.rhino.Material();\n        rhinoMaterial.name = this.GetExportedMaterialName(material.name);\n\n        if (material.type === MaterialType.Phong) {\n          rhinoMaterial.ambientColor = ColorToRhinoColor(material.ambient);\n          rhinoMaterial.specularColor = ColorToRhinoColor(material.specular);\n        }\n\n        rhinoMaterial.diffuseColor = ColorToRhinoColor(material.color);\n        rhinoMaterial.transparency = 1.0 - material.opacity;\n        let rhinoMaterialIndex = rhinoDoc.materials().count();\n        rhinoDoc.materials().add(rhinoMaterial);\n        let rhinoMesh = new this.rhino.Mesh.createFromThreejsJSON(threeJson);\n        let rhinoAttributes = new this.rhino.ObjectAttributes();\n        rhinoAttributes.name = this.GetExportedMeshName(mesh.GetName());\n        rhinoAttributes.materialSource = this.rhino.ObjectMaterialSource.MaterialFromObject;\n        rhinoAttributes.materialIndex = rhinoMaterialIndex;\n        rhinoDoc.objects().add(rhinoMesh, rhinoAttributes);\n      }\n    });\n    let writeOptions = new this.rhino.File3dmWriteOptions();\n    writeOptions.version = 6;\n    let rhinoDocBuffer = rhinoDoc.toByteArray(writeOptions);\n    rhinoFile.SetBufferContent(rhinoDocBuffer);\n    onFinish();\n  }\n\n}","map":{"version":3,"names":["LoadExternalLibrary","FileFormat","MaterialType","ConvertMeshToMeshBuffer","ExportedFile","ExporterBase","Exporter3dm","constructor","rhino","CanExport","format","extension","Binary","ExportContent","exporterModel","files","onFinish","then","rhino3dm","ExportRhinoContent","catch","ColorToRhinoColor","color","r","g","b","a","rhinoFile","push","rhinoDoc","File3dm","EnumerateTransformedMeshes","mesh","meshBuffer","primitiveIndex","PrimitiveCount","primitive","GetPrimitive","threeJson","data","attributes","position","itemSize","type","array","vertices","normal","normals","index","indices","material","GetMaterial","rhinoMaterial","Material","name","GetExportedMaterialName","Phong","ambientColor","ambient","specularColor","specular","diffuseColor","transparency","opacity","rhinoMaterialIndex","materials","count","add","rhinoMesh","Mesh","createFromThreejsJSON","rhinoAttributes","ObjectAttributes","GetExportedMeshName","GetName","materialSource","ObjectMaterialSource","MaterialFromObject","materialIndex","objects","writeOptions","File3dmWriteOptions","version","rhinoDocBuffer","toByteArray","SetBufferContent"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/export/exporter3dm.js"],"sourcesContent":["import { LoadExternalLibrary } from '../io/externallibs.js';\r\nimport { FileFormat } from '../io/fileutils.js';\r\nimport { MaterialType } from '../model/material.js';\r\nimport { ConvertMeshToMeshBuffer } from '../model/meshbuffer.js';\r\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\r\n\r\nexport class Exporter3dm extends ExporterBase\r\n{\r\n\tconstructor ()\r\n\t{\r\n\t\tsuper ();\r\n        this.rhino = null;\r\n\t}\r\n\r\n    CanExport (format, extension)\r\n    {\r\n        return format === FileFormat.Binary && extension === '3dm';\r\n    }\r\n\r\n\tExportContent (exporterModel, format, files, onFinish)\r\n\t{\r\n\t\tif (this.rhino === null) {\r\n\t\t\tLoadExternalLibrary ('loaders/rhino3dm.min.js').then (() => {\r\n                rhino3dm ().then ((rhino) => {\r\n                    this.rhino = rhino;\r\n                    this.ExportRhinoContent (exporterModel, files, onFinish);\r\n                });\r\n            }).catch (() => {\r\n                onFinish ();\r\n            });\r\n\t\t} else {\r\n\t\t\tthis.ExportRhinoContent (exporterModel, files, onFinish);\r\n\t\t}\r\n\t}\r\n\r\n    ExportRhinoContent (exporterModel, files, onFinish)\r\n    {\r\n        function ColorToRhinoColor (color)\r\n        {\r\n            return {\r\n                r : color.r,\r\n                g : color.g,\r\n                b : color.b,\r\n                a : 255\r\n            };\r\n        }\r\n\r\n\t\tlet rhinoFile = new ExportedFile ('model.3dm');\r\n\t\tfiles.push (rhinoFile);\r\n\r\n        let rhinoDoc = new this.rhino.File3dm ();\r\n        exporterModel.EnumerateTransformedMeshes ((mesh) => {\r\n            let meshBuffer = ConvertMeshToMeshBuffer (mesh);\r\n            for (let primitiveIndex = 0; primitiveIndex < meshBuffer.PrimitiveCount (); primitiveIndex++) {\r\n                let primitive = meshBuffer.GetPrimitive (primitiveIndex);\r\n                let threeJson = {\r\n                    data : {\r\n                        attributes : {\r\n                            position : {\r\n                                itemSize : 3,\r\n                                type : 'Float32Array',\r\n                                array : primitive.vertices\r\n                            },\r\n                            normal : {\r\n                                itemSize : 3,\r\n                                type : 'Float32Array',\r\n                                array : primitive.normals\r\n                            }\r\n                        },\r\n                        index : {\r\n                            type : 'Uint16Array',\r\n                            array : primitive.indices\r\n                        }\r\n                    }\r\n                };\r\n\r\n                let material = exporterModel.GetMaterial (primitive.material);\r\n                let rhinoMaterial = new this.rhino.Material ();\r\n                rhinoMaterial.name = this.GetExportedMaterialName (material.name);\r\n                if (material.type === MaterialType.Phong) {\r\n                    rhinoMaterial.ambientColor = ColorToRhinoColor (material.ambient);\r\n                    rhinoMaterial.specularColor = ColorToRhinoColor (material.specular);\r\n                }\r\n                rhinoMaterial.diffuseColor = ColorToRhinoColor (material.color);\r\n                rhinoMaterial.transparency = 1.0 - material.opacity;\r\n\r\n                let rhinoMaterialIndex = rhinoDoc.materials ().count ();\r\n                rhinoDoc.materials ().add (rhinoMaterial);\r\n\r\n                let rhinoMesh = new this.rhino.Mesh.createFromThreejsJSON (threeJson);\r\n                let rhinoAttributes = new this.rhino.ObjectAttributes ();\r\n                rhinoAttributes.name = this.GetExportedMeshName (mesh.GetName ());\r\n                rhinoAttributes.materialSource = this.rhino.ObjectMaterialSource.MaterialFromObject;\r\n                rhinoAttributes.materialIndex = rhinoMaterialIndex;\r\n                rhinoDoc.objects ().add (rhinoMesh, rhinoAttributes);\r\n            }\r\n        });\r\n\r\n        let writeOptions = new this.rhino.File3dmWriteOptions ();\r\n        writeOptions.version = 6;\r\n        let rhinoDocBuffer = rhinoDoc.toByteArray (writeOptions);\r\n\r\n        rhinoFile.SetBufferContent (rhinoDocBuffer);\r\n\t\tonFinish ();\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}