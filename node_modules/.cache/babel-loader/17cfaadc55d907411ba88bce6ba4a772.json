{"ast":null,"code":"import { AmbientLight, AnimationClip, Bone, BufferGeometry, ClampToEdgeWrapping, Color, DirectionalLight, DoubleSide, Euler, FileLoader, Float32BufferAttribute, FrontSide, Group, Line, LineBasicMaterial, LineSegments, Loader, LoaderUtils, MathUtils, Matrix4, Mesh, MeshBasicMaterial, MeshLambertMaterial, MeshPhongMaterial, OrthographicCamera, PerspectiveCamera, PointLight, Quaternion, QuaternionKeyframeTrack, RepeatWrapping, Scene, Skeleton, SkinnedMesh, SpotLight, TextureLoader, Vector2, Vector3, VectorKeyframeTrack, sRGBEncoding } from 'three';\nimport { TGALoader } from '../loaders/TGALoader.js';\n\nclass ColladaLoader extends Loader {\n  constructor(manager) {\n    super(manager);\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    const loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  }\n\n  parse(text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      const array = [];\n      const childNodes = xml.childNodes;\n\n      for (let i = 0, l = childNodes.length; i < l; i++) {\n        const child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      const parts = text.trim().split(/\\s+/);\n      const array = new Array(parts.length);\n\n      for (let i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      const library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        const elements = getElementsByTagName(library, nodeName);\n\n        for (let i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (const name in data) {\n        const object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      const data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n      let hasChildren = false;\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          case 'animation':\n            // hierarchy of related animations\n            parseAnimation(child);\n            hasChildren = true;\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasChildren === false) {\n        // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n        library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n      }\n    }\n\n    function parseAnimationSampler(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      const data = {};\n      const target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      let parts = target.split('/');\n      const id = parts.shift();\n      let sid = parts.shift(); // check selection syntax\n\n      const arraySyntax = sid.indexOf('(') !== -1;\n      const memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        const indices = sid.split('(');\n        sid = indices.shift();\n\n        for (let i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      const tracks = [];\n      const channels = data.channels;\n      const samplers = data.samplers;\n      const sources = data.sources;\n\n      for (const target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          const channel = channels[target];\n          const sampler = samplers[channel.sampler];\n          const inputId = sampler.inputs.INPUT;\n          const outputId = sampler.inputs.OUTPUT;\n          const inputSource = sources[inputId];\n          const outputSource = sources[outputId];\n          const animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      const node = library.nodes[channel.id];\n      const object3D = getNode(node.id);\n      const transform = node.transforms[channel.sid];\n      const defaultMatrix = node.matrix.clone().transpose();\n      let time, stride;\n      let i, il, j, jl;\n      const data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              const value = outputSource.array[stride];\n              const index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      const keyframes = prepareAnimationData(data, defaultMatrix);\n      const animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      const keyframes = []; // transfer data into a sortable array\n\n      for (const time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (let i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    const position = new Vector3();\n    const scale = new Vector3();\n    const quaternion = new Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      const keyframes = animation.keyframes;\n      const name = animation.name;\n      const times = [];\n      const positionData = [];\n      const quaternionData = [];\n      const scaleData = [];\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n        const time = keyframe.time;\n        const value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n      if (quaternionData.length > 0) tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      let keyframe;\n      let empty = true;\n      let i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      let prev, next;\n\n      for (let i = 0, l = keyframes.length; i < l; i++) {\n        const keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        const keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      const data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      const tracks = [];\n      const name = data.name;\n      const duration = data.end - data.start || -1;\n      const animations = data.animations;\n\n      for (let i = 0, il = animations.length; i < il; i++) {\n        const animationTracks = getAnimation(animations[i]);\n\n        for (let j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      const data = {\n        sources: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            const id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      const data = {\n        inputs: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const semantic = child.getAttribute('semantic');\n            const id = parseId(child.getAttribute('source'));\n            const offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      const build = {\n        id: data.id\n      };\n      const geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      const BONE_LIMIT = 4;\n      const build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      const sources = data.sources;\n      const vertexWeights = data.vertexWeights;\n      const vcount = vertexWeights.vcount;\n      const v = vertexWeights.v;\n      const jointOffset = vertexWeights.inputs.JOINT.offset;\n      const weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      const jointSource = data.sources[data.joints.inputs.JOINT];\n      const inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      const weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      let stride = 0;\n      let i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        const jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        const vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          const skinIndex = v[stride + jointOffset];\n          const weightId = v[stride + weightOffset];\n          const skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          const d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        const name = jointSource.array[i];\n        const boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      const data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      const data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find image with ID:', id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      const data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      const sid = xml.getAttribute('sid');\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.hasAttribute('opaque') ? child.getAttribute('opaque') : 'A_ONE',\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      const data = {\n        technique: {}\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n\n          case 'bump':\n            data[child.nodeName] = parseEffectExtraTechniqueBump(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n\n          case 'bump':\n            data[child.nodeName] = parseEffectExtraTechniqueBump(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechniqueBump(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              texcoord: child.getAttribute('texcoord'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      let loader;\n      let extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      const effect = getEffect(data.url);\n      const technique = effect.profile.technique;\n      let material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name || '';\n\n      function getTexture(textureObject) {\n        let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        const sampler = effect.profile.samplers[textureObject.id];\n        let image = null; // get image\n\n        if (sampler !== undefined) {\n          const surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          const loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            const texture = loader.load(image);\n            const extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              const technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n\n            if (encoding !== null) {\n              texture.encoding = encoding;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn('THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id);\n          return null;\n        }\n      }\n\n      const parameters = technique.parameters;\n\n      for (const key in parameters) {\n        const parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture, sRGBEncoding);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture, sRGBEncoding);\n            break;\n\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture, sRGBEncoding);\n            break;\n        }\n      }\n\n      material.color.convertSRGBToLinear();\n      if (material.specular) material.specular.convertSRGBToLinear();\n      if (material.emissive) material.emissive.convertSRGBToLinear(); //\n\n      let transparent = parameters['transparent'];\n      let transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          const color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (technique.extra !== undefined && technique.extra.technique !== undefined) {\n        const techniques = technique.extra.technique;\n\n        for (const k in techniques) {\n          const v = techniques[k];\n\n          switch (k) {\n            case 'double_sided':\n              material.side = v === 1 ? DoubleSide : FrontSide;\n              break;\n\n            case 'bump':\n              material.normalMap = getTexture(v.texture);\n              material.normalScale = new Vector2(1, 1);\n              break;\n          }\n        }\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      const data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      let camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          let ymag = data.optics.parameters.ymag;\n          let xmag = data.optics.parameters.xmag;\n          const aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name || '';\n      return camera;\n    }\n\n    function getCamera(id) {\n      const data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find camera with ID:', id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      let data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      const data = {};\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            const array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array).convertSRGBToLinear();\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            const f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      let light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n\n        case 'point':\n          light = new PointLight();\n          break;\n\n        case 'spot':\n          light = new SpotLight();\n          break;\n\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      const data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find light with ID:', id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      const mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (let i = 0; i < mesh.childNodes.length; i++) {\n        const child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        const id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      const data = {\n        array: [],\n        stride: 3\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            const accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      const data = {};\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      const primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (let i = 0, l = xml.childNodes.length; i < l; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            const id = parseId(child.getAttribute('source'));\n            const semantic = child.getAttribute('semantic');\n            const offset = parseInt(child.getAttribute('offset'));\n            const set = parseInt(child.getAttribute('set'));\n            const inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      const build = {};\n\n      for (let i = 0; i < primitives.length; i++) {\n        const primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      let count = 0;\n\n      for (let i = 0, l = primitives.length; i < l; i++) {\n        const primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      const build = {};\n      const sources = data.sources;\n      const vertices = data.vertices;\n      const primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      const groupedPrimitives = groupPrimitives(primitives);\n\n      for (const type in groupedPrimitives) {\n        const primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      const build = {};\n      const position = {\n        array: [],\n        stride: 0\n      };\n      const normal = {\n        array: [],\n        stride: 0\n      };\n      const uv = {\n        array: [],\n        stride: 0\n      };\n      const uv2 = {\n        array: [],\n        stride: 0\n      };\n      const color = {\n        array: [],\n        stride: 0\n      };\n      const skinIndex = {\n        array: [],\n        stride: 4\n      };\n      const skinWeight = {\n        array: [],\n        stride: 4\n      };\n      const geometry = new BufferGeometry();\n      const materialKeys = [];\n      let start = 0;\n\n      for (let p = 0; p < primitives.length; p++) {\n        const primitive = primitives[p];\n        const inputs = primitive.inputs; // groups\n\n        let count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (let g = 0; g < primitive.count; g++) {\n              const vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (const name in inputs) {\n          const input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (const key in vertices) {\n                const id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    const prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      const count = (position.array.length - prevLength) / position.stride;\n\n                      for (let i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array, true);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      if (normal.array.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n      if (skinIndex.array.length > 0) geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      if (skinWeight.array.length > 0) geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      let isColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      const indices = primitive.p;\n      const stride = primitive.stride;\n      const vcount = primitive.vcount;\n\n      function pushVector(i) {\n        let index = indices[i + offset] * sourceStride;\n        const length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n\n        if (isColor) {\n          // convert the vertex colors from srgb to linear if present\n          const startIndex = array.length - sourceStride - 1;\n          tempColor.setRGB(array[startIndex + 0], array[startIndex + 1], array[startIndex + 2]).convertSRGBToLinear();\n          array[startIndex + 0] = tempColor.r;\n          array[startIndex + 1] = tempColor.g;\n          array[startIndex + 2] = tempColor.b;\n        }\n      }\n\n      const sourceArray = source.array;\n      const sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        let index = 0;\n\n        for (let i = 0, l = vcount.length; i < l; i++) {\n          const count = vcount[i];\n\n          if (count === 4) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            const d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            const a = index + stride * 0;\n            const b = index + stride * 1;\n            const c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (let k = 1, kl = count - 2; k <= kl; k++) {\n              const a = index + stride * 0;\n              const b = index + stride * k;\n              const c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (let i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      let data;\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            const array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            const max = child.getElementsByTagName('max')[0];\n            const min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      const data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      const data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      const data = {\n        type: xml.nodeName\n      };\n      const array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = MathUtils.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      const data = {\n        bindJointAxis: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      const data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            const param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            const tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substring(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      const kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      const kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      const visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      const kinematicsModel = getKinematicsModel(kinematicsModelId);\n      const kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      const visualScene = getVisualScene(visualSceneId);\n      const bindJointAxis = kinematicsScene.bindJointAxis;\n      const jointMap = {};\n\n      for (let i = 0, l = bindJointAxis.length; i < l; i++) {\n        const axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        const targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transform element\n          const parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        const visualElementName = visualElement.getAttribute('name');\n        const joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      const m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function (jointIndex) {\n          const jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.');\n          }\n        },\n        setJointValue: function (jointIndex, value) {\n          const jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            const joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              const object = jointData.object;\n              const axis = joint.axis;\n              const transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (let i = 0; i < transforms.length; i++) {\n                const transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      const transforms = [];\n      const xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array, vector;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            const matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            vector = new Vector3().fromArray(array);\n            const angle = MathUtils.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      const elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    const matrix = new Matrix4();\n    const vector = new Vector3();\n\n    function parseNode(xml) {\n      const data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        let array;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            array = parseFloats(child.textContent);\n            const angle = MathUtils.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      const data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (let i = 0; i < xml.childNodes.length; i++) {\n        const child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            const instances = child.getElementsByTagName('instance_material');\n\n            for (let j = 0; j < instances.length; j++) {\n              const instance = instances[j];\n              const symbol = instance.getAttribute('symbol');\n              const target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      const boneData = [];\n      const sortedBoneData = [];\n      let i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        const skeleton = skeletons[i];\n        let root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          const visualScene = library.visualScenes[skeleton];\n          const children = visualScene.children;\n\n          for (let j = 0; j < children.length; j++) {\n            const child = children[j];\n\n            if (child.type === 'JOINT') {\n              const root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      const bones = [];\n      const boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          let boneInverse; // retrieve the boneInverse from the controller data\n\n          for (let i = 0; i < joints.length; i++) {\n            const joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      const objects = [];\n      const matrix = data.matrix;\n      const nodes = data.nodes;\n      const type = data.type;\n      const instanceCameras = data.instanceCameras;\n      const instanceControllers = data.instanceControllers;\n      const instanceLights = data.instanceLights;\n      const instanceGeometries = data.instanceGeometries;\n      const instanceNodes = data.instanceNodes; // nodes\n\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (let i = 0, l = instanceCameras.length; i < l; i++) {\n        const instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (let i = 0, l = instanceControllers.length; i < l; i++) {\n        const instance = instanceControllers[i];\n        const controller = getController(instance.id);\n        const geometries = getGeometry(controller.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n        const skeletons = instance.skeletons;\n        const joints = controller.skin.joints;\n        const skeleton = buildSkeleton(skeletons, joints);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          const object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (let i = 0, l = instanceLights.length; i < l; i++) {\n        const instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (let i = 0, l = instanceGeometries.length; i < l; i++) {\n        const instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        const geometries = getGeometry(instance.id);\n        const newObjects = buildObjects(geometries, instance.materials);\n\n        for (let j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n\n      for (let i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      let object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n\n        for (let i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      object.name = type === 'JOINT' ? data.sid : data.name;\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    const fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      const materials = [];\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      const objects = [];\n\n      for (const type in geometries) {\n        const geometry = geometries[type];\n        const materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        const skinning = geometry.data.attributes.skinIndex !== undefined; // choose between a single or multi materials (material array)\n\n        const material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        let object;\n\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      const data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      const elements = getElementsByTagName(xml, 'node');\n\n      for (let i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      const group = new Group();\n      group.name = data.name;\n      const children = data.children;\n\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      const instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      const clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          const tracks = [];\n\n          for (const id in library.animations) {\n            const animationTracks = getAnimation(id);\n\n            for (let i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (const id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n\n    function parserErrorToText(parserError) {\n      let result = '';\n      const stack = [parserError];\n\n      while (stack.length) {\n        const node = stack.shift();\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n\n      return result.trim();\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n\n    const xml = new DOMParser().parseFromString(text, 'application/xml');\n    const collada = getElementsByTagName(xml, 'COLLADA')[0];\n    const parserError = xml.getElementsByTagName('parsererror')[0];\n\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      const errorElement = getElementsByTagName(parserError, 'div')[0];\n      let errorText;\n\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n\n    const version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    const asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    const textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    let tgaLoader;\n\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    const tempColor = new Color();\n    const animations = [];\n    let kinematics = {};\n    let count = 0; //\n\n    const library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    const scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n    scene.animations = animations;\n\n    if (asset.upAxis === 'Z_UP') {\n      console.warn('THREE.ColladaLoader: You are loading an asset with a Z-UP coordinate system. The loader just rotates the asset to transform it into Y-UP. The vertex data are not converted, see #24289.');\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      get animations() {\n        console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n        return animations;\n      },\n\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n\n}\n\nexport { ColladaLoader };","map":{"version":3,"names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","DirectionalLight","DoubleSide","Euler","FileLoader","Float32BufferAttribute","FrontSide","Group","Line","LineBasicMaterial","LineSegments","Loader","LoaderUtils","MathUtils","Matrix4","Mesh","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","OrthographicCamera","PerspectiveCamera","PointLight","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","Scene","Skeleton","SkinnedMesh","SpotLight","TextureLoader","Vector2","Vector3","VectorKeyframeTrack","sRGBEncoding","TGALoader","ColladaLoader","constructor","manager","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","generateId","count","isEmpty","object","Object","keys","parseAsset","unit","parseAssetUnit","upAxis","parseAssetUpAxis","undefined","hasAttribute","getAttribute","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","data","builder","build","getBuild","parseAnimation","sources","samplers","channels","hasChildren","nodeType","id","parseSource","parseAnimationSampler","parseAnimationChannel","log","animations","generateUUID","inputs","semantic","target","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","animation","buildAnimationChannel","createKeyframeTracks","getAnimation","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","time","stride","il","j","jl","value","index","warn","keyframes","prepareAnimationData","uuid","sort","ascending","transformAnimationData","a","b","position","scale","quaternion","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","property","defaultValue","empty","createMissingKeyframes","prev","next","getPrev","getNext","interpolate","key","parseAnimationClip","start","end","clips","buildAnimationClip","duration","animationTracks","getAnimationClip","parseController","skin","parseSkin","controllers","bindShapeMatrix","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","buildSkin","skinIndices","skinWeights","weights","BONE_LIMIT","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","identity","boneInverse","getController","parseImage","init_from","images","buildImage","getImage","parseEffect","profile","parseEffectProfileCOMMON","effects","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechniqueBump","parseEffectExtraTechnique","texcoord","buildEffect","getEffect","parseMaterial","materials","getTextureLoader","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","buildMaterial","effect","material","getTexture","textureObject","encoding","surface","texture","wrapS","wrapU","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","float","shininess","emissive","emissiveMap","convertSRGBToLinear","transparent","transparency","opacity","techniques","k","side","normalScale","getMaterial","parseCamera","optics","parseCameraOptics","cameras","parseCameraTechnique","parseCameraParameters","buildCamera","camera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","getCamera","parseLight","parseLightTechnique","lights","parseLightParameters","falloffAngle","f","distance","Math","sqrt","buildLight","light","copy","getLight","parseGeometry","vertices","primitives","mesh","parseGeometryVertices","parseGeometryPrimitive","accessor","primitive","hasUV","inputname","max","p","groupPrimitives","checkUVCoordinates","uvsNeedsFix","buildGeometry","groupedPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","setAttribute","isColor","pushVector","sourceStride","sourceArray","startIndex","tempColor","setRGB","r","c","kl","getGeometry","parseKinematicsModel","links","parseKinematicsTechniqueCommon","kinematicsModels","buildKinematicsModel","getKinematicsModel","parseKinematicsJoint","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","degToRad","parsePhysicsModel","rigidBodies","parsePhysicsRigidBody","physicsModels","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsScene","bindJointAxis","parseKinematicsBindJointAxis","kinematicsScenes","param","tmpJointIndex","jointIndex","buildKinematicsScene","getKinematicsScene","setupKinematics","kinematicsModelId","kinematicsSceneId","visualSceneId","visualScenes","kinematicsModel","kinematicsScene","visualScene","getVisualScene","jointMap","targetElement","collada","querySelector","parentVisualElement","parentElement","connect","visualElement","visualElementName","traverse","buildTransformList","m0","kinematics","getJointValue","jointData","setJointValue","multiply","makeRotationAxis","makeTranslation","vector","prepareNodes","element","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","root","buildBoneHierarchy","hasVisualScene","children","bone","processed","bones","boneInverses","isBone","buildNode","objects","instanceCamera","controller","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","skinning","attributes","parseVisualScene","buildVisualScene","group","parseScene","setupAnimations","parserErrorToText","parserError","result","stack","Node","TEXT_NODE","apply","scene","DOMParser","parseFromString","errorElement","errorText","version","asset","resourcePath","setCrossOrigin","crossOrigin","setFromEuler","PI","multiplyScalar"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/three/examples/jsm/loaders/ColladaLoader.js"],"sourcesContent":["import {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDirectionalLight,\n\tDoubleSide,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tFrontSide,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader,\n\tLoaderUtils,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tScene,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTextureLoader,\n\tVector2,\n\tVector3,\n\tVectorKeyframeTrack,\n\tsRGBEncoding\n} from 'three';\nimport { TGALoader } from '../loaders/TGALoader.js';\n\nclass ColladaLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( text, path ) {\n\n\t\tfunction getElementsByTagName( xml, name ) {\n\n\t\t\t// Non recursive xml.getElementsByTagName() ...\n\n\t\t\tconst array = [];\n\t\t\tconst childNodes = xml.childNodes;\n\n\t\t\tfor ( let i = 0, l = childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = childNodes[ i ];\n\n\t\t\t\tif ( child.nodeName === name ) {\n\n\t\t\t\t\tarray.push( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseStrings( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tconst parts = text.trim().split( /\\s+/ );\n\t\t\tconst array = new Array( parts.length );\n\n\t\t\tfor ( let i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parts[ i ];\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseFloats( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tconst parts = text.trim().split( /\\s+/ );\n\t\t\tconst array = new Array( parts.length );\n\n\t\t\tfor ( let i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parseFloat( parts[ i ] );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseInts( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tconst parts = text.trim().split( /\\s+/ );\n\t\t\tconst array = new Array( parts.length );\n\n\t\t\tfor ( let i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parseInt( parts[ i ] );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseId( text ) {\n\n\t\t\treturn text.substring( 1 );\n\n\t\t}\n\n\t\tfunction generateId() {\n\n\t\t\treturn 'three_default_' + ( count ++ );\n\n\t\t}\n\n\t\tfunction isEmpty( object ) {\n\n\t\t\treturn Object.keys( object ).length === 0;\n\n\t\t}\n\n\t\t// asset\n\n\t\tfunction parseAsset( xml ) {\n\n\t\t\treturn {\n\t\t\t\tunit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),\n\t\t\t\tupAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseAssetUnit( xml ) {\n\n\t\t\tif ( ( xml !== undefined ) && ( xml.hasAttribute( 'meter' ) === true ) ) {\n\n\t\t\t\treturn parseFloat( xml.getAttribute( 'meter' ) );\n\n\t\t\t} else {\n\n\t\t\t\treturn 1; // default 1 meter\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAssetUpAxis( xml ) {\n\n\t\t\treturn xml !== undefined ? xml.textContent : 'Y_UP';\n\n\t\t}\n\n\t\t// library\n\n\t\tfunction parseLibrary( xml, libraryName, nodeName, parser ) {\n\n\t\t\tconst library = getElementsByTagName( xml, libraryName )[ 0 ];\n\n\t\t\tif ( library !== undefined ) {\n\n\t\t\t\tconst elements = getElementsByTagName( library, nodeName );\n\n\t\t\t\tfor ( let i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\t\tparser( elements[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildLibrary( data, builder ) {\n\n\t\t\tfor ( const name in data ) {\n\n\t\t\t\tconst object = data[ name ];\n\t\t\t\tobject.build = builder( data[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// get\n\n\t\tfunction getBuild( data, builder ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\tdata.build = builder( data );\n\n\t\t\treturn data.build;\n\n\t\t}\n\n\t\t// animation\n\n\t\tfunction parseAnimation( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tsources: {},\n\t\t\t\tsamplers: {},\n\t\t\t\tchannels: {}\n\t\t\t};\n\n\t\t\tlet hasChildren = false;\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tlet id;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'sampler':\n\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.samplers[ id ] = parseAnimationSampler( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'channel':\n\t\t\t\t\t\tid = child.getAttribute( 'target' );\n\t\t\t\t\t\tdata.channels[ id ] = parseAnimationChannel( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'animation':\n\t\t\t\t\t\t// hierarchy of related animations\n\t\t\t\t\t\tparseAnimation( child );\n\t\t\t\t\t\thasChildren = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasChildren === false ) {\n\n\t\t\t\t// since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n\n\t\t\t\tlibrary.animations[ xml.getAttribute( 'id' ) || MathUtils.generateUUID() ] = data;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimationSampler( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tinputs: {},\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tconst id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tconst semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseAnimationChannel( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tconst target = xml.getAttribute( 'target' );\n\n\t\t\t// parsing SID Addressing Syntax\n\n\t\t\tlet parts = target.split( '/' );\n\n\t\t\tconst id = parts.shift();\n\t\t\tlet sid = parts.shift();\n\n\t\t\t// check selection syntax\n\n\t\t\tconst arraySyntax = ( sid.indexOf( '(' ) !== - 1 );\n\t\t\tconst memberSyntax = ( sid.indexOf( '.' ) !== - 1 );\n\n\t\t\tif ( memberSyntax ) {\n\n\t\t\t\t//  member selection access\n\n\t\t\t\tparts = sid.split( '.' );\n\t\t\t\tsid = parts.shift();\n\t\t\t\tdata.member = parts.shift();\n\n\t\t\t} else if ( arraySyntax ) {\n\n\t\t\t\t// array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n\n\t\t\t\tconst indices = sid.split( '(' );\n\t\t\t\tsid = indices.shift();\n\n\t\t\t\tfor ( let i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\t\tindices[ i ] = parseInt( indices[ i ].replace( /\\)/, '' ) );\n\n\t\t\t\t}\n\n\t\t\t\tdata.indices = indices;\n\n\t\t\t}\n\n\t\t\tdata.id = id;\n\t\t\tdata.sid = sid;\n\n\t\t\tdata.arraySyntax = arraySyntax;\n\t\t\tdata.memberSyntax = memberSyntax;\n\n\t\t\tdata.sampler = parseId( xml.getAttribute( 'source' ) );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildAnimation( data ) {\n\n\t\t\tconst tracks = [];\n\n\t\t\tconst channels = data.channels;\n\t\t\tconst samplers = data.samplers;\n\t\t\tconst sources = data.sources;\n\n\t\t\tfor ( const target in channels ) {\n\n\t\t\t\tif ( channels.hasOwnProperty( target ) ) {\n\n\t\t\t\t\tconst channel = channels[ target ];\n\t\t\t\t\tconst sampler = samplers[ channel.sampler ];\n\n\t\t\t\t\tconst inputId = sampler.inputs.INPUT;\n\t\t\t\t\tconst outputId = sampler.inputs.OUTPUT;\n\n\t\t\t\t\tconst inputSource = sources[ inputId ];\n\t\t\t\t\tconst outputSource = sources[ outputId ];\n\n\t\t\t\t\tconst animation = buildAnimationChannel( channel, inputSource, outputSource );\n\n\t\t\t\t\tcreateKeyframeTracks( animation, tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn tracks;\n\n\t\t}\n\n\t\tfunction getAnimation( id ) {\n\n\t\t\treturn getBuild( library.animations[ id ], buildAnimation );\n\n\t\t}\n\n\t\tfunction buildAnimationChannel( channel, inputSource, outputSource ) {\n\n\t\t\tconst node = library.nodes[ channel.id ];\n\t\t\tconst object3D = getNode( node.id );\n\n\t\t\tconst transform = node.transforms[ channel.sid ];\n\t\t\tconst defaultMatrix = node.matrix.clone().transpose();\n\n\t\t\tlet time, stride;\n\t\t\tlet i, il, j, jl;\n\n\t\t\tconst data = {};\n\n\t\t\t// the collada spec allows the animation of data in various ways.\n\t\t\t// depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n\t\t\tswitch ( transform ) {\n\n\t\t\t\tcase 'matrix':\n\n\t\t\t\t\tfor ( i = 0, il = inputSource.array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\ttime = inputSource.array[ i ];\n\t\t\t\t\t\tstride = i * outputSource.stride;\n\n\t\t\t\t\t\tif ( data[ time ] === undefined ) data[ time ] = {};\n\n\t\t\t\t\t\tif ( channel.arraySyntax === true ) {\n\n\t\t\t\t\t\t\tconst value = outputSource.array[ stride ];\n\t\t\t\t\t\t\tconst index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];\n\n\t\t\t\t\t\t\tdata[ time ][ index ] = value;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tdata[ time ][ j ] = outputSource.array[ stride + j ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'translate':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'scale':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tconst keyframes = prepareAnimationData( data, defaultMatrix );\n\n\t\t\tconst animation = {\n\t\t\t\tname: object3D.uuid,\n\t\t\t\tkeyframes: keyframes\n\t\t\t};\n\n\t\t\treturn animation;\n\n\t\t}\n\n\t\tfunction prepareAnimationData( data, defaultMatrix ) {\n\n\t\t\tconst keyframes = [];\n\n\t\t\t// transfer data into a sortable array\n\n\t\t\tfor ( const time in data ) {\n\n\t\t\t\tkeyframes.push( { time: parseFloat( time ), value: data[ time ] } );\n\n\t\t\t}\n\n\t\t\t// ensure keyframes are sorted by time\n\n\t\t\tkeyframes.sort( ascending );\n\n\t\t\t// now we clean up all animation data, so we can use them for keyframe tracks\n\n\t\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\t\ttransformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );\n\n\t\t\t}\n\n\t\t\treturn keyframes;\n\n\t\t\t// array sort function\n\n\t\t\tfunction ascending( a, b ) {\n\n\t\t\t\treturn a.time - b.time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst position = new Vector3();\n\t\tconst scale = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\n\t\tfunction createKeyframeTracks( animation, tracks ) {\n\n\t\t\tconst keyframes = animation.keyframes;\n\t\t\tconst name = animation.name;\n\n\t\t\tconst times = [];\n\t\t\tconst positionData = [];\n\t\t\tconst quaternionData = [];\n\t\t\tconst scaleData = [];\n\n\t\t\tfor ( let i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tconst keyframe = keyframes[ i ];\n\n\t\t\t\tconst time = keyframe.time;\n\t\t\t\tconst value = keyframe.value;\n\n\t\t\t\tmatrix.fromArray( value ).transpose();\n\t\t\t\tmatrix.decompose( position, quaternion, scale );\n\n\t\t\t\ttimes.push( time );\n\t\t\t\tpositionData.push( position.x, position.y, position.z );\n\t\t\t\tquaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );\n\t\t\t\tscaleData.push( scale.x, scale.y, scale.z );\n\n\t\t\t}\n\n\t\t\tif ( positionData.length > 0 ) tracks.push( new VectorKeyframeTrack( name + '.position', times, positionData ) );\n\t\t\tif ( quaternionData.length > 0 ) tracks.push( new QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );\n\t\t\tif ( scaleData.length > 0 ) tracks.push( new VectorKeyframeTrack( name + '.scale', times, scaleData ) );\n\n\t\t\treturn tracks;\n\n\t\t}\n\n\t\tfunction transformAnimationData( keyframes, property, defaultValue ) {\n\n\t\t\tlet keyframe;\n\n\t\t\tlet empty = true;\n\t\t\tlet i, l;\n\n\t\t\t// check, if values of a property are missing in our keyframes\n\n\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] === undefined ) {\n\n\t\t\t\t\tkeyframe.value[ property ] = null; // mark as missing\n\n\t\t\t\t} else {\n\n\t\t\t\t\tempty = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( empty === true ) {\n\n\t\t\t\t// no values at all, so we set a default value\n\n\t\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\t\tkeyframe.value[ property ] = defaultValue;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// filling gaps\n\n\t\t\t\tcreateMissingKeyframes( keyframes, property );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createMissingKeyframes( keyframes, property ) {\n\n\t\t\tlet prev, next;\n\n\t\t\tfor ( let i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tconst keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] === null ) {\n\n\t\t\t\t\tprev = getPrev( keyframes, i, property );\n\t\t\t\t\tnext = getNext( keyframes, i, property );\n\n\t\t\t\t\tif ( prev === null ) {\n\n\t\t\t\t\t\tkeyframe.value[ property ] = next.value[ property ];\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( next === null ) {\n\n\t\t\t\t\t\tkeyframe.value[ property ] = prev.value[ property ];\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinterpolate( keyframe, prev, next, property );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getPrev( keyframes, i, property ) {\n\n\t\t\twhile ( i >= 0 ) {\n\n\t\t\t\tconst keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\ti --;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction getNext( keyframes, i, property ) {\n\n\t\t\twhile ( i < keyframes.length ) {\n\n\t\t\t\tconst keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction interpolate( key, prev, next, property ) {\n\n\t\t\tif ( ( next.time - prev.time ) === 0 ) {\n\n\t\t\t\tkey.value[ property ] = prev.value[ property ];\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tkey.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];\n\n\t\t}\n\n\t\t// animation clips\n\n\t\tfunction parseAnimationClip( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'id' ) || 'default',\n\t\t\t\tstart: parseFloat( xml.getAttribute( 'start' ) || 0 ),\n\t\t\t\tend: parseFloat( xml.getAttribute( 'end' ) || 0 ),\n\t\t\t\tanimations: []\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'instance_animation':\n\t\t\t\t\t\tdata.animations.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.clips[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildAnimationClip( data ) {\n\n\t\t\tconst tracks = [];\n\n\t\t\tconst name = data.name;\n\t\t\tconst duration = ( data.end - data.start ) || - 1;\n\t\t\tconst animations = data.animations;\n\n\t\t\tfor ( let i = 0, il = animations.length; i < il; i ++ ) {\n\n\t\t\t\tconst animationTracks = getAnimation( animations[ i ] );\n\n\t\t\t\tfor ( let j = 0, jl = animationTracks.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttracks.push( animationTracks[ j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, duration, tracks );\n\n\t\t}\n\n\t\tfunction getAnimationClip( id ) {\n\n\t\t\treturn getBuild( library.clips[ id ], buildAnimationClip );\n\n\t\t}\n\n\t\t// controller\n\n\t\tfunction parseController( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'skin':\n\t\t\t\t\t\t// there is exactly one skin per controller\n\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tdata.skin = parseSkin( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'morph':\n\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.controllers[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseSkin( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tsources: {}\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_shape_matrix':\n\t\t\t\t\t\tdata.bindShapeMatrix = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tconst id = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'joints':\n\t\t\t\t\t\tdata.joints = parseJoints( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertex_weights':\n\t\t\t\t\t\tdata.vertexWeights = parseVertexWeights( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseJoints( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tinputs: {}\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tconst semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tconst id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseVertexWeights( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tinputs: {}\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tconst semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tconst id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tconst offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\tdata.inputs[ semantic ] = { id: id, offset: offset };\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\tdata.vcount = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tdata.v = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildController( data ) {\n\n\t\t\tconst build = {\n\t\t\t\tid: data.id\n\t\t\t};\n\n\t\t\tconst geometry = library.geometries[ build.id ];\n\n\t\t\tif ( data.skin !== undefined ) {\n\n\t\t\t\tbuild.skin = buildSkin( data.skin );\n\n\t\t\t\t// we enhance the 'sources' property of the corresponding geometry with our skin data\n\n\t\t\t\tgeometry.sources.skinIndices = build.skin.indices;\n\t\t\t\tgeometry.sources.skinWeights = build.skin.weights;\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildSkin( data ) {\n\n\t\t\tconst BONE_LIMIT = 4;\n\n\t\t\tconst build = {\n\t\t\t\tjoints: [], // this must be an array to preserve the joint order\n\t\t\t\tindices: {\n\t\t\t\t\tarray: [],\n\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t},\n\t\t\t\tweights: {\n\t\t\t\t\tarray: [],\n\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst sources = data.sources;\n\t\t\tconst vertexWeights = data.vertexWeights;\n\n\t\t\tconst vcount = vertexWeights.vcount;\n\t\t\tconst v = vertexWeights.v;\n\t\t\tconst jointOffset = vertexWeights.inputs.JOINT.offset;\n\t\t\tconst weightOffset = vertexWeights.inputs.WEIGHT.offset;\n\n\t\t\tconst jointSource = data.sources[ data.joints.inputs.JOINT ];\n\t\t\tconst inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];\n\n\t\t\tconst weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;\n\t\t\tlet stride = 0;\n\n\t\t\tlet i, j, l;\n\n\t\t\t// procces skin data for each vertex\n\n\t\t\tfor ( i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\tconst jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex\n\t\t\t\tconst vertexSkinData = [];\n\n\t\t\t\tfor ( j = 0; j < jointCount; j ++ ) {\n\n\t\t\t\t\tconst skinIndex = v[ stride + jointOffset ];\n\t\t\t\t\tconst weightId = v[ stride + weightOffset ];\n\t\t\t\t\tconst skinWeight = weights[ weightId ];\n\n\t\t\t\t\tvertexSkinData.push( { index: skinIndex, weight: skinWeight } );\n\n\t\t\t\t\tstride += 2;\n\n\t\t\t\t}\n\n\t\t\t\t// we sort the joints in descending order based on the weights.\n\t\t\t\t// this ensures, we only procced the most important joints of the vertex\n\n\t\t\t\tvertexSkinData.sort( descending );\n\n\t\t\t\t// now we provide for each vertex a set of four index and weight values.\n\t\t\t\t// the order of the skin data matches the order of vertices\n\n\t\t\t\tfor ( j = 0; j < BONE_LIMIT; j ++ ) {\n\n\t\t\t\t\tconst d = vertexSkinData[ j ];\n\n\t\t\t\t\tif ( d !== undefined ) {\n\n\t\t\t\t\t\tbuild.indices.array.push( d.index );\n\t\t\t\t\t\tbuild.weights.array.push( d.weight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbuild.indices.array.push( 0 );\n\t\t\t\t\t\tbuild.weights.array.push( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// setup bind matrix\n\n\t\t\tif ( data.bindShapeMatrix ) {\n\n\t\t\t\tbuild.bindMatrix = new Matrix4().fromArray( data.bindShapeMatrix ).transpose();\n\n\t\t\t} else {\n\n\t\t\t\tbuild.bindMatrix = new Matrix4().identity();\n\n\t\t\t}\n\n\t\t\t// process bones and inverse bind matrix data\n\n\t\t\tfor ( i = 0, l = jointSource.array.length; i < l; i ++ ) {\n\n\t\t\t\tconst name = jointSource.array[ i ];\n\t\t\t\tconst boneInverse = new Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();\n\n\t\t\t\tbuild.joints.push( { name: name, boneInverse: boneInverse } );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t\t// array sort function\n\n\t\t\tfunction descending( a, b ) {\n\n\t\t\t\treturn b.weight - a.weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getController( id ) {\n\n\t\t\treturn getBuild( library.controllers[ id ], buildController );\n\n\t\t}\n\n\t\t// image\n\n\t\tfunction parseImage( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tinit_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent\n\t\t\t};\n\n\t\t\tlibrary.images[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildImage( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data.init_from;\n\n\t\t}\n\n\t\tfunction getImage( id ) {\n\n\t\t\tconst data = library.images[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildImage );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find image with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// effect\n\n\t\tfunction parseEffect( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'profile_COMMON':\n\t\t\t\t\t\tdata.profile = parseEffectProfileCOMMON( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.effects[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseEffectProfileCOMMON( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tsurfaces: {},\n\t\t\t\tsamplers: {}\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'newparam':\n\t\t\t\t\t\tparseEffectNewparam( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tdata.technique = parseEffectTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tdata.extra = parseEffectExtra( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectNewparam( xml, data ) {\n\n\t\t\tconst sid = xml.getAttribute( 'sid' );\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'surface':\n\t\t\t\t\t\tdata.surfaces[ sid ] = parseEffectSurface( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'sampler2D':\n\t\t\t\t\t\tdata.samplers[ sid ] = parseEffectSampler( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectSurface( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'init_from':\n\t\t\t\t\t\tdata.init_from = child.textContent;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectSampler( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tdata.source = child.textContent;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectTechnique( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'constant':\n\t\t\t\t\tcase 'lambert':\n\t\t\t\t\tcase 'blinn':\n\t\t\t\t\tcase 'phong':\n\t\t\t\t\t\tdata.type = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseEffectParameters( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tdata.extra = parseEffectExtra( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameters( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'emission':\n\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\tcase 'specular':\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\tcase 'ambient':\n\t\t\t\t\tcase 'shininess':\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseEffectParameter( child );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tdata[ child.nodeName ] = {\n\t\t\t\t\t\t\topaque: child.hasAttribute( 'opaque' ) ? child.getAttribute( 'opaque' ) : 'A_ONE',\n\t\t\t\t\t\t\tdata: parseEffectParameter( child )\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameter( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'float':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tdata[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameterTexture( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\ttechnique: {}\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tparseEffectParameterTextureExtra( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameterTextureExtra( xml, data ) {\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tparseEffectParameterTextureExtraTechnique( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectParameterTextureExtraTechnique( xml, data ) {\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'repeatU':\n\t\t\t\t\tcase 'repeatV':\n\t\t\t\t\tcase 'offsetU':\n\t\t\t\t\tcase 'offsetV':\n\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'wrapU':\n\t\t\t\t\tcase 'wrapV':\n\n\t\t\t\t\t\t// some files have values for wrapU/wrapV which become NaN via parseInt\n\n\t\t\t\t\t\tif ( child.textContent.toUpperCase() === 'TRUE' ) {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 1;\n\n\t\t\t\t\t\t} else if ( child.textContent.toUpperCase() === 'FALSE' ) {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 0;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseInt( child.textContent );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseEffectExtraTechniqueBump( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectExtra( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tdata.technique = parseEffectExtraTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectExtraTechnique( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'double_sided':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseInt( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseEffectExtraTechniqueBump( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectExtraTechniqueBump( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tdata[ child.nodeName ] = { id: child.getAttribute( 'texture' ), texcoord: child.getAttribute( 'texcoord' ), extra: parseEffectParameterTexture( child ) };\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildEffect( data ) {\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getEffect( id ) {\n\n\t\t\treturn getBuild( library.effects[ id ], buildEffect );\n\n\t\t}\n\n\t\t// material\n\n\t\tfunction parseMaterial( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'instance_effect':\n\t\t\t\t\t\tdata.url = parseId( child.getAttribute( 'url' ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.materials[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction getTextureLoader( image ) {\n\n\t\t\tlet loader;\n\n\t\t\tlet extension = image.slice( ( image.lastIndexOf( '.' ) - 1 >>> 0 ) + 2 ); // http://www.jstips.co/en/javascript/get-file-extension/\n\t\t\textension = extension.toLowerCase();\n\n\t\t\tswitch ( extension ) {\n\n\t\t\t\tcase 'tga':\n\t\t\t\t\tloader = tgaLoader;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tloader = textureLoader;\n\n\t\t\t}\n\n\t\t\treturn loader;\n\n\t\t}\n\n\t\tfunction buildMaterial( data ) {\n\n\t\t\tconst effect = getEffect( data.url );\n\t\t\tconst technique = effect.profile.technique;\n\n\t\t\tlet material;\n\n\t\t\tswitch ( technique.type ) {\n\n\t\t\t\tcase 'phong':\n\t\t\t\tcase 'blinn':\n\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'lambert':\n\t\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmaterial = new MeshBasicMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tmaterial.name = data.name || '';\n\n\t\t\tfunction getTexture( textureObject, encoding = null ) {\n\n\t\t\t\tconst sampler = effect.profile.samplers[ textureObject.id ];\n\t\t\t\tlet image = null;\n\n\t\t\t\t// get image\n\n\t\t\t\tif ( sampler !== undefined ) {\n\n\t\t\t\t\tconst surface = effect.profile.surfaces[ sampler.source ];\n\t\t\t\t\timage = getImage( surface.init_from );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );\n\t\t\t\t\timage = getImage( textureObject.id );\n\n\t\t\t\t}\n\n\t\t\t\t// create texture if image is avaiable\n\n\t\t\t\tif ( image !== null ) {\n\n\t\t\t\t\tconst loader = getTextureLoader( image );\n\n\t\t\t\t\tif ( loader !== undefined ) {\n\n\t\t\t\t\t\tconst texture = loader.load( image );\n\n\t\t\t\t\t\tconst extra = textureObject.extra;\n\n\t\t\t\t\t\tif ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {\n\n\t\t\t\t\t\t\tconst technique = extra.technique;\n\n\t\t\t\t\t\t\ttexture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n\t\t\t\t\t\t\ttexture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\t\t\t\t\t\ttexture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );\n\t\t\t\t\t\t\ttexture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\t\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( encoding !== null ) {\n\n\t\t\t\t\t\t\ttexture.encoding = encoding;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Loader for texture %s not found.', image );\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id );\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst parameters = technique.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tconst parameter = parameters[ key ];\n\n\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\t\tif ( parameter.color ) material.color.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.map = getTexture( parameter.texture, sRGBEncoding );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specular':\n\t\t\t\t\t\tif ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.specularMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\tif ( parameter.texture ) material.normalMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ambient':\n\t\t\t\t\t\tif ( parameter.texture ) material.lightMap = getTexture( parameter.texture, sRGBEncoding );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shininess':\n\t\t\t\t\t\tif ( parameter.float && material.shininess ) material.shininess = parameter.float;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'emission':\n\t\t\t\t\t\tif ( parameter.color && material.emissive ) material.emissive.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.emissiveMap = getTexture( parameter.texture, sRGBEncoding );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterial.color.convertSRGBToLinear();\n\t\t\tif ( material.specular ) material.specular.convertSRGBToLinear();\n\t\t\tif ( material.emissive ) material.emissive.convertSRGBToLinear();\n\n\t\t\t//\n\n\t\t\tlet transparent = parameters[ 'transparent' ];\n\t\t\tlet transparency = parameters[ 'transparency' ];\n\n\t\t\t// <transparency> does not exist but <transparent>\n\n\t\t\tif ( transparency === undefined && transparent ) {\n\n\t\t\t\ttransparency = {\n\t\t\t\t\tfloat: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// <transparent> does not exist but <transparency>\n\n\t\t\tif ( transparent === undefined && transparency ) {\n\n\t\t\t\ttransparent = {\n\t\t\t\t\topaque: 'A_ONE',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcolor: [ 1, 1, 1, 1 ]\n\t\t\t\t\t} };\n\n\t\t\t}\n\n\t\t\tif ( transparent && transparency ) {\n\n\t\t\t\t// handle case if a texture exists but no color\n\n\t\t\t\tif ( transparent.data.texture ) {\n\n\t\t\t\t\t// we do not set an alpha map (see #13792)\n\n\t\t\t\t\tmaterial.transparent = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst color = transparent.data.color;\n\n\t\t\t\t\tswitch ( transparent.opaque ) {\n\n\t\t\t\t\t\tcase 'A_ONE':\n\t\t\t\t\t\t\tmaterial.opacity = color[ 3 ] * transparency.float;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'RGB_ZERO':\n\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 0 ] * transparency.float );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'A_ZERO':\n\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 3 ] * transparency.float );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'RGB_ONE':\n\t\t\t\t\t\t\tmaterial.opacity = color[ 0 ] * transparency.float;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material.opacity < 1 ) material.transparent = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\n\t\t\tif ( technique.extra !== undefined && technique.extra.technique !== undefined ) {\n\n\t\t\t\tconst techniques = technique.extra.technique;\n\n\t\t\t\tfor ( const k in techniques ) {\n\n\t\t\t\t\tconst v = techniques[ k ];\n\n\t\t\t\t\tswitch ( k ) {\n\n\t\t\t\t\t\tcase 'double_sided':\n\t\t\t\t\t\t\tmaterial.side = ( v === 1 ? DoubleSide : FrontSide );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\t\tmaterial.normalMap = getTexture( v.texture );\n\t\t\t\t\t\t\tmaterial.normalScale = new Vector2( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getMaterial( id ) {\n\n\t\t\treturn getBuild( library.materials[ id ], buildMaterial );\n\n\t\t}\n\n\t\t// camera\n\n\t\tfunction parseCamera( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'optics':\n\t\t\t\t\t\tdata.optics = parseCameraOptics( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.cameras[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseCameraOptics( xml ) {\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\treturn parseCameraTechnique( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {};\n\n\t\t}\n\n\t\tfunction parseCameraTechnique( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'perspective':\n\t\t\t\t\tcase 'orthographic':\n\n\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseCameraParameters( child );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseCameraParameters( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'xfov':\n\t\t\t\t\tcase 'yfov':\n\t\t\t\t\tcase 'xmag':\n\t\t\t\t\tcase 'ymag':\n\t\t\t\t\tcase 'znear':\n\t\t\t\t\tcase 'zfar':\n\t\t\t\t\tcase 'aspect_ratio':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildCamera( data ) {\n\n\t\t\tlet camera;\n\n\t\t\tswitch ( data.optics.technique ) {\n\n\t\t\t\tcase 'perspective':\n\t\t\t\t\tcamera = new PerspectiveCamera(\n\t\t\t\t\t\tdata.optics.parameters.yfov,\n\t\t\t\t\t\tdata.optics.parameters.aspect_ratio,\n\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'orthographic':\n\t\t\t\t\tlet ymag = data.optics.parameters.ymag;\n\t\t\t\t\tlet xmag = data.optics.parameters.xmag;\n\t\t\t\t\tconst aspectRatio = data.optics.parameters.aspect_ratio;\n\n\t\t\t\t\txmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;\n\t\t\t\t\tymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;\n\n\t\t\t\t\txmag *= 0.5;\n\t\t\t\t\tymag *= 0.5;\n\n\t\t\t\t\tcamera = new OrthographicCamera(\n\t\t\t\t\t\t- xmag, xmag, ymag, - ymag, // left, right, top, bottom\n\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcamera.name = data.name || '';\n\n\t\t\treturn camera;\n\n\t\t}\n\n\t\tfunction getCamera( id ) {\n\n\t\t\tconst data = library.cameras[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildCamera );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find camera with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// light\n\n\t\tfunction parseLight( xml ) {\n\n\t\t\tlet data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tdata = parseLightTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.lights[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseLightTechnique( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'directional':\n\t\t\t\t\tcase 'point':\n\t\t\t\t\tcase 'spot':\n\t\t\t\t\tcase 'ambient':\n\n\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseLightParameters( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseLightParameters( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tconst array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.color = new Color().fromArray( array ).convertSRGBToLinear();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'falloff_angle':\n\t\t\t\t\t\tdata.falloffAngle = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'quadratic_attenuation':\n\t\t\t\t\t\tconst f = parseFloat( child.textContent );\n\t\t\t\t\t\tdata.distance = f ? Math.sqrt( 1 / f ) : 0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildLight( data ) {\n\n\t\t\tlet light;\n\n\t\t\tswitch ( data.technique ) {\n\n\t\t\t\tcase 'directional':\n\t\t\t\t\tlight = new DirectionalLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'point':\n\t\t\t\t\tlight = new PointLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'spot':\n\t\t\t\t\tlight = new SpotLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ambient':\n\t\t\t\t\tlight = new AmbientLight();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( data.parameters.color ) light.color.copy( data.parameters.color );\n\t\t\tif ( data.parameters.distance ) light.distance = data.parameters.distance;\n\n\t\t\treturn light;\n\n\t\t}\n\n\t\tfunction getLight( id ) {\n\n\t\t\tconst data = library.lights[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildLight );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find light with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// geometry\n\n\t\tfunction parseGeometry( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\tsources: {},\n\t\t\t\tvertices: {},\n\t\t\t\tprimitives: []\n\t\t\t};\n\n\t\t\tconst mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];\n\n\t\t\t// the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\t\t\tif ( mesh === undefined ) return;\n\n\t\t\tfor ( let i = 0; i < mesh.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = mesh.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tconst id = child.getAttribute( 'id' );\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertices':\n\t\t\t\t\t\t// data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n\t\t\t\t\t\tdata.vertices = parseGeometryVertices( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polygons':\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\tcase 'polylist':\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\tdata.primitives.push( parseGeometryPrimitive( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.geometries[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseSource( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tarray: [],\n\t\t\t\tstride: 3\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'float_array':\n\t\t\t\t\t\tdata.array = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Name_array':\n\t\t\t\t\t\tdata.array = parseStrings( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tconst accessor = getElementsByTagName( child, 'accessor' )[ 0 ];\n\n\t\t\t\t\t\tif ( accessor !== undefined ) {\n\n\t\t\t\t\t\t\tdata.stride = parseInt( accessor.getAttribute( 'stride' ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseGeometryVertices( xml ) {\n\n\t\t\tconst data = {};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tdata[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseGeometryPrimitive( xml ) {\n\n\t\t\tconst primitive = {\n\t\t\t\ttype: xml.nodeName,\n\t\t\t\tmaterial: xml.getAttribute( 'material' ),\n\t\t\t\tcount: parseInt( xml.getAttribute( 'count' ) ),\n\t\t\t\tinputs: {},\n\t\t\t\tstride: 0,\n\t\t\t\thasUV: false\n\t\t\t};\n\n\t\t\tfor ( let i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tconst id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tconst semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tconst offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\tconst set = parseInt( child.getAttribute( 'set' ) );\n\t\t\t\t\t\tconst inputname = ( set > 0 ? semantic + set : semantic );\n\t\t\t\t\t\tprimitive.inputs[ inputname ] = { id: id, offset: offset };\n\t\t\t\t\t\tprimitive.stride = Math.max( primitive.stride, offset + 1 );\n\t\t\t\t\t\tif ( semantic === 'TEXCOORD' ) primitive.hasUV = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\tprimitive.vcount = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'p':\n\t\t\t\t\t\tprimitive.p = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn primitive;\n\n\t\t}\n\n\t\tfunction groupPrimitives( primitives ) {\n\n\t\t\tconst build = {};\n\n\t\t\tfor ( let i = 0; i < primitives.length; i ++ ) {\n\n\t\t\t\tconst primitive = primitives[ i ];\n\n\t\t\t\tif ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];\n\n\t\t\t\tbuild[ primitive.type ].push( primitive );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction checkUVCoordinates( primitives ) {\n\n\t\t\tlet count = 0;\n\n\t\t\tfor ( let i = 0, l = primitives.length; i < l; i ++ ) {\n\n\t\t\t\tconst primitive = primitives[ i ];\n\n\t\t\t\tif ( primitive.hasUV === true ) {\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count > 0 && count < primitives.length ) {\n\n\t\t\t\tprimitives.uvsNeedsFix = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildGeometry( data ) {\n\n\t\t\tconst build = {};\n\n\t\t\tconst sources = data.sources;\n\t\t\tconst vertices = data.vertices;\n\t\t\tconst primitives = data.primitives;\n\n\t\t\tif ( primitives.length === 0 ) return {};\n\n\t\t\t// our goal is to create one buffer geometry for a single type of primitives\n\t\t\t// first, we group all primitives by their type\n\n\t\t\tconst groupedPrimitives = groupPrimitives( primitives );\n\n\t\t\tfor ( const type in groupedPrimitives ) {\n\n\t\t\t\tconst primitiveType = groupedPrimitives[ type ];\n\n\t\t\t\t// second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n\t\t\t\tcheckUVCoordinates( primitiveType );\n\n\t\t\t\t// third, create a buffer geometry for each type of primitives\n\n\t\t\t\tbuild[ type ] = buildGeometryType( primitiveType, sources, vertices );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildGeometryType( primitives, sources, vertices ) {\n\n\t\t\tconst build = {};\n\n\t\t\tconst position = { array: [], stride: 0 };\n\t\t\tconst normal = { array: [], stride: 0 };\n\t\t\tconst uv = { array: [], stride: 0 };\n\t\t\tconst uv2 = { array: [], stride: 0 };\n\t\t\tconst color = { array: [], stride: 0 };\n\n\t\t\tconst skinIndex = { array: [], stride: 4 };\n\t\t\tconst skinWeight = { array: [], stride: 4 };\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tconst materialKeys = [];\n\n\t\t\tlet start = 0;\n\n\t\t\tfor ( let p = 0; p < primitives.length; p ++ ) {\n\n\t\t\t\tconst primitive = primitives[ p ];\n\t\t\t\tconst inputs = primitive.inputs;\n\n\t\t\t\t// groups\n\n\t\t\t\tlet count = 0;\n\n\t\t\t\tswitch ( primitive.type ) {\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\tcount = primitive.count * 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\tcount = primitive.count * 3;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polylist':\n\n\t\t\t\t\t\tfor ( let g = 0; g < primitive.count; g ++ ) {\n\n\t\t\t\t\t\t\tconst vc = primitive.vcount[ g ];\n\n\t\t\t\t\t\t\tswitch ( vc ) {\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tcount += 3; // single triangle\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tcount += 6; // quad, subdivided into two triangles\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tcount += ( vc - 2 ) * 3; // polylist with more than four vertices\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknow primitive type:', primitive.type );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addGroup( start, count, p );\n\t\t\t\tstart += count;\n\n\t\t\t\t// material\n\n\t\t\t\tif ( primitive.material ) {\n\n\t\t\t\t\tmaterialKeys.push( primitive.material );\n\n\t\t\t\t}\n\n\t\t\t\t// geometry data\n\n\t\t\t\tfor ( const name in inputs ) {\n\n\t\t\t\t\tconst input = inputs[ name ];\n\n\t\t\t\t\tswitch ( name )\t{\n\n\t\t\t\t\t\tcase 'VERTEX':\n\t\t\t\t\t\t\tfor ( const key in vertices ) {\n\n\t\t\t\t\t\t\t\tconst id = vertices[ key ];\n\n\t\t\t\t\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t\t\t\t\tcase 'POSITION':\n\t\t\t\t\t\t\t\t\t\tconst prevLength = position.array.length;\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, position.array );\n\t\t\t\t\t\t\t\t\t\tposition.stride = sources[ id ].stride;\n\n\t\t\t\t\t\t\t\t\t\tif ( sources.skinWeights && sources.skinIndices ) {\n\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// see #3803\n\n\t\t\t\t\t\t\t\t\t\tif ( primitive.hasUV === false && primitives.uvsNeedsFix === true ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst count = ( position.array.length - prevLength ) / position.stride;\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// fill missing uv coordinates\n\n\t\t\t\t\t\t\t\t\t\t\t\tuv.array.push( 0, 0 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, normal.array );\n\t\t\t\t\t\t\t\t\t\tnormal.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, color.array );\n\t\t\t\t\t\t\t\t\t\tcolor.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv.array );\n\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv2.array );\n\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );\n\t\t\t\t\t\t\tnormal.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, color.array, true );\n\t\t\t\t\t\t\tcolor.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );\n\t\t\t\t\t\t\tuv.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv2.array );\n\t\t\t\t\t\t\tuv2.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tif ( position.array.length > 0 ) geometry.setAttribute( 'position', new Float32BufferAttribute( position.array, position.stride ) );\n\t\t\tif ( normal.array.length > 0 ) geometry.setAttribute( 'normal', new Float32BufferAttribute( normal.array, normal.stride ) );\n\t\t\tif ( color.array.length > 0 ) geometry.setAttribute( 'color', new Float32BufferAttribute( color.array, color.stride ) );\n\t\t\tif ( uv.array.length > 0 ) geometry.setAttribute( 'uv', new Float32BufferAttribute( uv.array, uv.stride ) );\n\t\t\tif ( uv2.array.length > 0 ) geometry.setAttribute( 'uv2', new Float32BufferAttribute( uv2.array, uv2.stride ) );\n\n\t\t\tif ( skinIndex.array.length > 0 ) geometry.setAttribute( 'skinIndex', new Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );\n\t\t\tif ( skinWeight.array.length > 0 ) geometry.setAttribute( 'skinWeight', new Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );\n\n\t\t\tbuild.data = geometry;\n\t\t\tbuild.type = primitives[ 0 ].type;\n\t\t\tbuild.materialKeys = materialKeys;\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildGeometryData( primitive, source, offset, array, isColor = false ) {\n\n\t\t\tconst indices = primitive.p;\n\t\t\tconst stride = primitive.stride;\n\t\t\tconst vcount = primitive.vcount;\n\n\t\t\tfunction pushVector( i ) {\n\n\t\t\t\tlet index = indices[ i + offset ] * sourceStride;\n\t\t\t\tconst length = index + sourceStride;\n\n\t\t\t\tfor ( ; index < length; index ++ ) {\n\n\t\t\t\t\tarray.push( sourceArray[ index ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isColor ) {\n\n\t\t\t\t\t// convert the vertex colors from srgb to linear if present\n\t\t\t\t\tconst startIndex = array.length - sourceStride - 1;\n\t\t\t\t\ttempColor.setRGB(\n\t\t\t\t\t\tarray[ startIndex + 0 ],\n\t\t\t\t\t\tarray[ startIndex + 1 ],\n\t\t\t\t\t\tarray[ startIndex + 2 ]\n\t\t\t\t\t).convertSRGBToLinear();\n\n\t\t\t\t\tarray[ startIndex + 0 ] = tempColor.r;\n\t\t\t\t\tarray[ startIndex + 1 ] = tempColor.g;\n\t\t\t\t\tarray[ startIndex + 2 ] = tempColor.b;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst sourceArray = source.array;\n\t\t\tconst sourceStride = source.stride;\n\n\t\t\tif ( primitive.vcount !== undefined ) {\n\n\t\t\t\tlet index = 0;\n\n\t\t\t\tfor ( let i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst count = vcount[ i ];\n\n\t\t\t\t\tif ( count === 4 ) {\n\n\t\t\t\t\t\tconst a = index + stride * 0;\n\t\t\t\t\t\tconst b = index + stride * 1;\n\t\t\t\t\t\tconst c = index + stride * 2;\n\t\t\t\t\t\tconst d = index + stride * 3;\n\n\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( d );\n\t\t\t\t\t\tpushVector( b ); pushVector( c ); pushVector( d );\n\n\t\t\t\t\t} else if ( count === 3 ) {\n\n\t\t\t\t\t\tconst a = index + stride * 0;\n\t\t\t\t\t\tconst b = index + stride * 1;\n\t\t\t\t\t\tconst c = index + stride * 2;\n\n\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t} else if ( count > 4 ) {\n\n\t\t\t\t\t\tfor ( let k = 1, kl = ( count - 2 ); k <= kl; k ++ ) {\n\n\t\t\t\t\t\t\tconst a = index + stride * 0;\n\t\t\t\t\t\t\tconst b = index + stride * k;\n\t\t\t\t\t\t\tconst c = index + stride * ( k + 1 );\n\n\t\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex += stride * count;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( let i = 0, l = indices.length; i < l; i += stride ) {\n\n\t\t\t\t\tpushVector( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getGeometry( id ) {\n\n\t\t\treturn getBuild( library.geometries[ id ], buildGeometry );\n\n\t\t}\n\n\t\t// kinematics\n\n\t\tfunction parseKinematicsModel( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\tjoints: {},\n\t\t\t\tlinks: []\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tparseKinematicsTechniqueCommon( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildKinematicsModel( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getKinematicsModel( id ) {\n\n\t\t\treturn getBuild( library.kinematicsModels[ id ], buildKinematicsModel );\n\n\t\t}\n\n\t\tfunction parseKinematicsTechniqueCommon( xml, data ) {\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'joint':\n\t\t\t\t\t\tdata.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'link':\n\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseKinematicsJoint( xml ) {\n\n\t\t\tlet data;\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\tdata = parseKinematicsJointParameter( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsJointParameter( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\taxis: new Vector3(),\n\t\t\t\tlimits: {\n\t\t\t\t\tmin: 0,\n\t\t\t\t\tmax: 0\n\t\t\t\t},\n\t\t\t\ttype: xml.nodeName,\n\t\t\t\tstatic: false,\n\t\t\t\tzeroPosition: 0,\n\t\t\t\tmiddlePosition: 0\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\tconst array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.axis.fromArray( array );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'limits':\n\t\t\t\t\t\tconst max = child.getElementsByTagName( 'max' )[ 0 ];\n\t\t\t\t\t\tconst min = child.getElementsByTagName( 'min' )[ 0 ];\n\n\t\t\t\t\t\tdata.limits.max = parseFloat( max.textContent );\n\t\t\t\t\t\tdata.limits.min = parseFloat( min.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// if min is equal to or greater than max, consider the joint static\n\n\t\t\tif ( data.limits.min >= data.limits.max ) {\n\n\t\t\t\tdata.static = true;\n\n\t\t\t}\n\n\t\t\t// calculate middle position\n\n\t\t\tdata.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsLink( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\tattachments: [],\n\t\t\t\ttransforms: []\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'attachment_full':\n\t\t\t\t\t\tdata.attachments.push( parseKinematicsAttachment( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsAttachment( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tjoint: xml.getAttribute( 'joint' ).split( '/' ).pop(),\n\t\t\t\ttransforms: [],\n\t\t\t\tlinks: []\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'link':\n\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsTransform( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\ttype: xml.nodeName\n\t\t\t};\n\n\t\t\tconst array = parseFloats( xml.textContent );\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'matrix':\n\t\t\t\t\tdata.obj = new Matrix4();\n\t\t\t\t\tdata.obj.fromArray( array ).transpose();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'translate':\n\t\t\t\t\tdata.obj = new Vector3();\n\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tdata.obj = new Vector3();\n\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\tdata.angle = MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// physics\n\n\t\tfunction parsePhysicsModel( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\trigidBodies: {}\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'rigid_body':\n\t\t\t\t\t\tdata.rigidBodies[ child.getAttribute( 'name' ) ] = {};\n\t\t\t\t\t\tparsePhysicsRigidBody( child, data.rigidBodies[ child.getAttribute( 'name' ) ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.physicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parsePhysicsRigidBody( xml, data ) {\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tparsePhysicsTechniqueCommon( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parsePhysicsTechniqueCommon( xml, data ) {\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'inertia':\n\t\t\t\t\t\tdata.inertia = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mass':\n\t\t\t\t\t\tdata.mass = parseFloats( child.textContent )[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// scene\n\n\t\tfunction parseKinematicsScene( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tbindJointAxis: []\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_joint_axis':\n\t\t\t\t\t\tdata.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;\n\n\t\t}\n\n\t\tfunction parseKinematicsBindJointAxis( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\ttarget: xml.getAttribute( 'target' ).split( '/' ).pop()\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\tconst param = child.getElementsByTagName( 'param' )[ 0 ];\n\t\t\t\t\t\tdata.axis = param.textContent;\n\t\t\t\t\t\tconst tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];\n\t\t\t\t\t\tdata.jointIndex = tmpJointIndex.substring( 0, tmpJointIndex.length - 1 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildKinematicsScene( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getKinematicsScene( id ) {\n\n\t\t\treturn getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );\n\n\t\t}\n\n\t\tfunction setupKinematics() {\n\n\t\t\tconst kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];\n\t\t\tconst kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];\n\t\t\tconst visualSceneId = Object.keys( library.visualScenes )[ 0 ];\n\n\t\t\tif ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;\n\n\t\t\tconst kinematicsModel = getKinematicsModel( kinematicsModelId );\n\t\t\tconst kinematicsScene = getKinematicsScene( kinematicsSceneId );\n\t\t\tconst visualScene = getVisualScene( visualSceneId );\n\n\t\t\tconst bindJointAxis = kinematicsScene.bindJointAxis;\n\t\t\tconst jointMap = {};\n\n\t\t\tfor ( let i = 0, l = bindJointAxis.length; i < l; i ++ ) {\n\n\t\t\t\tconst axis = bindJointAxis[ i ];\n\n\t\t\t\t// the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n\t\t\t\tconst targetElement = collada.querySelector( '[sid=\"' + axis.target + '\"]' );\n\n\t\t\t\tif ( targetElement ) {\n\n\t\t\t\t\t// get the parent of the transform element\n\n\t\t\t\t\tconst parentVisualElement = targetElement.parentElement;\n\n\t\t\t\t\t// connect the joint of the kinematics model with the element in the visual scene\n\n\t\t\t\t\tconnect( axis.jointIndex, parentVisualElement );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction connect( jointIndex, visualElement ) {\n\n\t\t\t\tconst visualElementName = visualElement.getAttribute( 'name' );\n\t\t\t\tconst joint = kinematicsModel.joints[ jointIndex ];\n\n\t\t\t\tvisualScene.traverse( function ( object ) {\n\n\t\t\t\t\tif ( object.name === visualElementName ) {\n\n\t\t\t\t\t\tjointMap[ jointIndex ] = {\n\t\t\t\t\t\t\tobject: object,\n\t\t\t\t\t\t\ttransforms: buildTransformList( visualElement ),\n\t\t\t\t\t\t\tjoint: joint,\n\t\t\t\t\t\t\tposition: joint.zeroPosition\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tconst m0 = new Matrix4();\n\n\t\t\tkinematics = {\n\n\t\t\t\tjoints: kinematicsModel && kinematicsModel.joints,\n\n\t\t\t\tgetJointValue: function ( jointIndex ) {\n\n\t\t\t\t\tconst jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\treturn jointData.position;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetJointValue: function ( jointIndex, value ) {\n\n\t\t\t\t\tconst jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\tconst joint = jointData.joint;\n\n\t\t\t\t\t\tif ( value > joint.limits.max || value < joint.limits.min ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );\n\n\t\t\t\t\t\t} else if ( joint.static ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconst object = jointData.object;\n\t\t\t\t\t\t\tconst axis = joint.axis;\n\t\t\t\t\t\t\tconst transforms = jointData.transforms;\n\n\t\t\t\t\t\t\tmatrix.identity();\n\n\t\t\t\t\t\t\t// each update, we have to apply all transforms in the correct order\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < transforms.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tconst transform = transforms[ i ];\n\n\t\t\t\t\t\t\t\t// if there is a connection of the transform node with a joint, apply the joint value\n\n\t\t\t\t\t\t\t\tif ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {\n\n\t\t\t\t\t\t\t\t\tswitch ( joint.type ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( axis, MathUtils.degToRad( value ) ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tswitch ( transform.type ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.scale( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tobject.matrix.copy( matrix );\n\t\t\t\t\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t\t\t\tjointMap[ jointIndex ].position = value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction buildTransformList( node ) {\n\n\t\t\tconst transforms = [];\n\n\t\t\tconst xml = collada.querySelector( '[id=\"' + node.id + '\"]' );\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tlet array, vector;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tarray = parseFloats( child.textContent );\n\t\t\t\t\t\tconst matrix = new Matrix4().fromArray( array ).transpose();\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: matrix\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tarray = parseFloats( child.textContent );\n\t\t\t\t\t\tvector = new Vector3().fromArray( array );\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: vector\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tarray = parseFloats( child.textContent );\n\t\t\t\t\t\tvector = new Vector3().fromArray( array );\n\t\t\t\t\t\tconst angle = MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: vector,\n\t\t\t\t\t\t\tangle: angle\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn transforms;\n\n\t\t}\n\n\t\t// nodes\n\n\t\tfunction prepareNodes( xml ) {\n\n\t\t\tconst elements = xml.getElementsByTagName( 'node' );\n\n\t\t\t// ensure all node elements have id attributes\n\n\t\t\tfor ( let i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\tconst element = elements[ i ];\n\n\t\t\t\tif ( element.hasAttribute( 'id' ) === false ) {\n\n\t\t\t\t\telement.setAttribute( 'id', generateId() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst matrix = new Matrix4();\n\t\tconst vector = new Vector3();\n\n\t\tfunction parseNode( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\ttype: xml.getAttribute( 'type' ),\n\t\t\t\tid: xml.getAttribute( 'id' ),\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tmatrix: new Matrix4(),\n\t\t\t\tnodes: [],\n\t\t\t\tinstanceCameras: [],\n\t\t\t\tinstanceControllers: [],\n\t\t\t\tinstanceLights: [],\n\t\t\t\tinstanceGeometries: [],\n\t\t\t\tinstanceNodes: [],\n\t\t\t\ttransforms: {}\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tlet array;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'node':\n\t\t\t\t\t\tdata.nodes.push( child.getAttribute( 'id' ) );\n\t\t\t\t\t\tparseNode( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_camera':\n\t\t\t\t\t\tdata.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_controller':\n\t\t\t\t\t\tdata.instanceControllers.push( parseNodeInstance( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_light':\n\t\t\t\t\t\tdata.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_geometry':\n\t\t\t\t\t\tdata.instanceGeometries.push( parseNodeInstance( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_node':\n\t\t\t\t\t\tdata.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tarray = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.fromArray( array ).transpose() );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tarray = parseFloats( child.textContent );\n\t\t\t\t\t\tvector.fromArray( array );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tarray = parseFloats( child.textContent );\n\t\t\t\t\t\tconst angle = MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tarray = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.matrix.scale( vector.fromArray( array ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasNode( data.id ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id );\n\n\t\t\t} else {\n\n\t\t\t\tlibrary.nodes[ data.id ] = data;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseNodeInstance( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tid: parseId( xml.getAttribute( 'url' ) ),\n\t\t\t\tmaterials: {},\n\t\t\t\tskeletons: []\n\t\t\t};\n\n\t\t\tfor ( let i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tconst child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_material':\n\t\t\t\t\t\tconst instances = child.getElementsByTagName( 'instance_material' );\n\n\t\t\t\t\t\tfor ( let j = 0; j < instances.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst instance = instances[ j ];\n\t\t\t\t\t\t\tconst symbol = instance.getAttribute( 'symbol' );\n\t\t\t\t\t\t\tconst target = instance.getAttribute( 'target' );\n\n\t\t\t\t\t\t\tdata.materials[ symbol ] = parseId( target );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'skeleton':\n\t\t\t\t\t\tdata.skeletons.push( parseId( child.textContent ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildSkeleton( skeletons, joints ) {\n\n\t\t\tconst boneData = [];\n\t\t\tconst sortedBoneData = [];\n\n\t\t\tlet i, j, data;\n\n\t\t\t// a skeleton can have multiple root bones. collada expresses this\n\t\t\t// situtation with multiple \"skeleton\" tags per controller instance\n\n\t\t\tfor ( i = 0; i < skeletons.length; i ++ ) {\n\n\t\t\t\tconst skeleton = skeletons[ i ];\n\n\t\t\t\tlet root;\n\n\t\t\t\tif ( hasNode( skeleton ) ) {\n\n\t\t\t\t\troot = getNode( skeleton );\n\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t} else if ( hasVisualScene( skeleton ) ) {\n\n\t\t\t\t\t// handle case where the skeleton refers to the visual scene (#13335)\n\n\t\t\t\t\tconst visualScene = library.visualScenes[ skeleton ];\n\t\t\t\t\tconst children = visualScene.children;\n\n\t\t\t\t\tfor ( let j = 0; j < children.length; j ++ ) {\n\n\t\t\t\t\t\tconst child = children[ j ];\n\n\t\t\t\t\t\tif ( child.type === 'JOINT' ) {\n\n\t\t\t\t\t\t\tconst root = getNode( child.id );\n\t\t\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// sort bone data (the order is defined in the corresponding controller)\n\n\t\t\tfor ( i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < boneData.length; j ++ ) {\n\n\t\t\t\t\tdata = boneData[ j ];\n\n\t\t\t\t\tif ( data.bone.name === joints[ i ].name ) {\n\n\t\t\t\t\t\tsortedBoneData[ i ] = data;\n\t\t\t\t\t\tdata.processed = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add unprocessed bone data at the end of the list\n\n\t\t\tfor ( i = 0; i < boneData.length; i ++ ) {\n\n\t\t\t\tdata = boneData[ i ];\n\n\t\t\t\tif ( data.processed === false ) {\n\n\t\t\t\t\tsortedBoneData.push( data );\n\t\t\t\t\tdata.processed = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// setup arrays for skeleton creation\n\n\t\t\tconst bones = [];\n\t\t\tconst boneInverses = [];\n\n\t\t\tfor ( i = 0; i < sortedBoneData.length; i ++ ) {\n\n\t\t\t\tdata = sortedBoneData[ i ];\n\n\t\t\t\tbones.push( data.bone );\n\t\t\t\tboneInverses.push( data.boneInverse );\n\n\t\t\t}\n\n\t\t\treturn new Skeleton( bones, boneInverses );\n\n\t\t}\n\n\t\tfunction buildBoneHierarchy( root, joints, boneData ) {\n\n\t\t\t// setup bone data from visual scene\n\n\t\t\troot.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isBone === true ) {\n\n\t\t\t\t\tlet boneInverse;\n\n\t\t\t\t\t// retrieve the boneInverse from the controller data\n\n\t\t\t\t\tfor ( let i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\t\t\tconst joint = joints[ i ];\n\n\t\t\t\t\t\tif ( joint.name === object.name ) {\n\n\t\t\t\t\t\t\tboneInverse = joint.boneInverse;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( boneInverse === undefined ) {\n\n\t\t\t\t\t\t// Unfortunately, there can be joints in the visual scene that are not part of the\n\t\t\t\t\t\t// corresponding controller. In this case, we have to create a dummy boneInverse matrix\n\t\t\t\t\t\t// for the respective bone. This bone won't affect any vertices, because there are no skin indices\n\t\t\t\t\t\t// and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n\t\t\t\t\t\t// ensure a correct animation of the model.\n\n\t\t\t\t\t\tboneInverse = new Matrix4();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tboneData.push( { bone: object, boneInverse: boneInverse, processed: false } );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction buildNode( data ) {\n\n\t\t\tconst objects = [];\n\n\t\t\tconst matrix = data.matrix;\n\t\t\tconst nodes = data.nodes;\n\t\t\tconst type = data.type;\n\t\t\tconst instanceCameras = data.instanceCameras;\n\t\t\tconst instanceControllers = data.instanceControllers;\n\t\t\tconst instanceLights = data.instanceLights;\n\t\t\tconst instanceGeometries = data.instanceGeometries;\n\t\t\tconst instanceNodes = data.instanceNodes;\n\n\t\t\t// nodes\n\n\t\t\tfor ( let i = 0, l = nodes.length; i < l; i ++ ) {\n\n\t\t\t\tobjects.push( getNode( nodes[ i ] ) );\n\n\t\t\t}\n\n\t\t\t// instance cameras\n\n\t\t\tfor ( let i = 0, l = instanceCameras.length; i < l; i ++ ) {\n\n\t\t\t\tconst instanceCamera = getCamera( instanceCameras[ i ] );\n\n\t\t\t\tif ( instanceCamera !== null ) {\n\n\t\t\t\t\tobjects.push( instanceCamera.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance controllers\n\n\t\t\tfor ( let i = 0, l = instanceControllers.length; i < l; i ++ ) {\n\n\t\t\t\tconst instance = instanceControllers[ i ];\n\t\t\t\tconst controller = getController( instance.id );\n\t\t\t\tconst geometries = getGeometry( controller.id );\n\t\t\t\tconst newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\tconst skeletons = instance.skeletons;\n\t\t\t\tconst joints = controller.skin.joints;\n\n\t\t\t\tconst skeleton = buildSkeleton( skeletons, joints );\n\n\t\t\t\tfor ( let j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst object = newObjects[ j ];\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.bind( skeleton, controller.skin.bindMatrix );\n\t\t\t\t\t\tobject.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance lights\n\n\t\t\tfor ( let i = 0, l = instanceLights.length; i < l; i ++ ) {\n\n\t\t\t\tconst instanceLight = getLight( instanceLights[ i ] );\n\n\t\t\t\tif ( instanceLight !== null ) {\n\n\t\t\t\t\tobjects.push( instanceLight.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance geometries\n\n\t\t\tfor ( let i = 0, l = instanceGeometries.length; i < l; i ++ ) {\n\n\t\t\t\tconst instance = instanceGeometries[ i ];\n\n\t\t\t\t// a single geometry instance in collada can lead to multiple object3Ds.\n\t\t\t\t// this is the case when primitives are combined like triangles and lines\n\n\t\t\t\tconst geometries = getGeometry( instance.id );\n\t\t\t\tconst newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\tfor ( let j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tobjects.push( newObjects[ j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance nodes\n\n\t\t\tfor ( let i = 0, l = instanceNodes.length; i < l; i ++ ) {\n\n\t\t\t\tobjects.push( getNode( instanceNodes[ i ] ).clone() );\n\n\t\t\t}\n\n\t\t\tlet object;\n\n\t\t\tif ( nodes.length === 0 && objects.length === 1 ) {\n\n\t\t\t\tobject = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tobject = ( type === 'JOINT' ) ? new Bone() : new Group();\n\n\t\t\t\tfor ( let i = 0; i < objects.length; i ++ ) {\n\n\t\t\t\t\tobject.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tobject.name = ( type === 'JOINT' ) ? data.sid : data.name;\n\t\t\tobject.matrix.copy( matrix );\n\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\treturn object;\n\n\t\t}\n\n\t\tconst fallbackMaterial = new MeshBasicMaterial( { color: 0xff00ff } );\n\n\t\tfunction resolveMaterialBinding( keys, instanceMaterials ) {\n\n\t\t\tconst materials = [];\n\n\t\t\tfor ( let i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\tconst id = instanceMaterials[ keys[ i ] ];\n\n\t\t\t\tif ( id === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[ i ] );\n\t\t\t\t\tmaterials.push( fallbackMaterial );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterials.push( getMaterial( id ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t}\n\n\t\tfunction buildObjects( geometries, instanceMaterials ) {\n\n\t\t\tconst objects = [];\n\n\t\t\tfor ( const type in geometries ) {\n\n\t\t\t\tconst geometry = geometries[ type ];\n\n\t\t\t\tconst materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );\n\n\t\t\t\t// handle case if no materials are defined\n\n\t\t\t\tif ( materials.length === 0 ) {\n\n\t\t\t\t\tif ( type === 'lines' || type === 'linestrips' ) {\n\n\t\t\t\t\t\tmaterials.push( new LineBasicMaterial() );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials.push( new MeshPhongMaterial() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// regard skinning\n\n\t\t\t\tconst skinning = ( geometry.data.attributes.skinIndex !== undefined );\n\n\t\t\t\t// choose between a single or multi materials (material array)\n\n\t\t\t\tconst material = ( materials.length === 1 ) ? materials[ 0 ] : materials;\n\n\t\t\t\t// now create a specific 3D object\n\n\t\t\t\tlet object;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\t\tobject = new LineSegments( geometry.data, material );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\tobject = new Line( geometry.data, material );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\tcase 'polylist':\n\t\t\t\t\t\tif ( skinning ) {\n\n\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry.data, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new Mesh( geometry.data, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tobjects.push( object );\n\n\t\t\t}\n\n\t\t\treturn objects;\n\n\t\t}\n\n\t\tfunction hasNode( id ) {\n\n\t\t\treturn library.nodes[ id ] !== undefined;\n\n\t\t}\n\n\t\tfunction getNode( id ) {\n\n\t\t\treturn getBuild( library.nodes[ id ], buildNode );\n\n\t\t}\n\n\t\t// visual scenes\n\n\t\tfunction parseVisualScene( xml ) {\n\n\t\t\tconst data = {\n\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\tchildren: []\n\t\t\t};\n\n\t\t\tprepareNodes( xml );\n\n\t\t\tconst elements = getElementsByTagName( xml, 'node' );\n\n\t\t\tfor ( let i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\tdata.children.push( parseNode( elements[ i ] ) );\n\n\t\t\t}\n\n\t\t\tlibrary.visualScenes[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildVisualScene( data ) {\n\n\t\t\tconst group = new Group();\n\t\t\tgroup.name = data.name;\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tgroup.add( getNode( child.id ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction hasVisualScene( id ) {\n\n\t\t\treturn library.visualScenes[ id ] !== undefined;\n\n\t\t}\n\n\t\tfunction getVisualScene( id ) {\n\n\t\t\treturn getBuild( library.visualScenes[ id ], buildVisualScene );\n\n\t\t}\n\n\t\t// scenes\n\n\t\tfunction parseScene( xml ) {\n\n\t\t\tconst instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];\n\t\t\treturn getVisualScene( parseId( instance.getAttribute( 'url' ) ) );\n\n\t\t}\n\n\t\tfunction setupAnimations() {\n\n\t\t\tconst clips = library.clips;\n\n\t\t\tif ( isEmpty( clips ) === true ) {\n\n\t\t\t\tif ( isEmpty( library.animations ) === false ) {\n\n\t\t\t\t\t// if there are animations but no clips, we create a default clip for playback\n\n\t\t\t\t\tconst tracks = [];\n\n\t\t\t\t\tfor ( const id in library.animations ) {\n\n\t\t\t\t\t\tconst animationTracks = getAnimation( id );\n\n\t\t\t\t\t\tfor ( let i = 0, l = animationTracks.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\ttracks.push( animationTracks[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimations.push( new AnimationClip( 'default', - 1, tracks ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( const id in clips ) {\n\n\t\t\t\t\tanimations.push( getAnimationClip( id ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the parser error element into text with each child elements text\n\t\t// separated by new lines.\n\n\t\tfunction parserErrorToText( parserError ) {\n\n\t\t\tlet result = '';\n\t\t\tconst stack = [ parserError ];\n\n\t\t\twhile ( stack.length ) {\n\n\t\t\t\tconst node = stack.shift();\n\n\t\t\t\tif ( node.nodeType === Node.TEXT_NODE ) {\n\n\t\t\t\t\tresult += node.textContent;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult += '\\n';\n\t\t\t\t\tstack.push.apply( stack, node.childNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result.trim();\n\n\t\t}\n\n\t\tif ( text.length === 0 ) {\n\n\t\t\treturn { scene: new Scene() };\n\n\t\t}\n\n\t\tconst xml = new DOMParser().parseFromString( text, 'application/xml' );\n\n\t\tconst collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];\n\n\t\tconst parserError = xml.getElementsByTagName( 'parsererror' )[ 0 ];\n\t\tif ( parserError !== undefined ) {\n\n\t\t\t// Chrome will return parser error with a div in it\n\n\t\t\tconst errorElement = getElementsByTagName( parserError, 'div' )[ 0 ];\n\t\t\tlet errorText;\n\n\t\t\tif ( errorElement ) {\n\n\t\t\t\terrorText = errorElement.textContent;\n\n\t\t\t} else {\n\n\t\t\t\terrorText = parserErrorToText( parserError );\n\n\t\t\t}\n\n\t\t\tconsole.error( 'THREE.ColladaLoader: Failed to parse collada file.\\n', errorText );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// metadata\n\n\t\tconst version = collada.getAttribute( 'version' );\n\t\tconsole.log( 'THREE.ColladaLoader: File version', version );\n\n\t\tconst asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );\n\t\tconst textureLoader = new TextureLoader( this.manager );\n\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\tlet tgaLoader;\n\n\t\tif ( TGALoader ) {\n\n\t\t\ttgaLoader = new TGALoader( this.manager );\n\t\t\ttgaLoader.setPath( this.resourcePath || path );\n\n\t\t}\n\n\t\t//\n\n\t\tconst tempColor = new Color();\n\t\tconst animations = [];\n\t\tlet kinematics = {};\n\t\tlet count = 0;\n\n\t\t//\n\n\t\tconst library = {\n\t\t\tanimations: {},\n\t\t\tclips: {},\n\t\t\tcontrollers: {},\n\t\t\timages: {},\n\t\t\teffects: {},\n\t\t\tmaterials: {},\n\t\t\tcameras: {},\n\t\t\tlights: {},\n\t\t\tgeometries: {},\n\t\t\tnodes: {},\n\t\t\tvisualScenes: {},\n\t\t\tkinematicsModels: {},\n\t\t\tphysicsModels: {},\n\t\t\tkinematicsScenes: {}\n\t\t};\n\n\t\tparseLibrary( collada, 'library_animations', 'animation', parseAnimation );\n\t\tparseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );\n\t\tparseLibrary( collada, 'library_controllers', 'controller', parseController );\n\t\tparseLibrary( collada, 'library_images', 'image', parseImage );\n\t\tparseLibrary( collada, 'library_effects', 'effect', parseEffect );\n\t\tparseLibrary( collada, 'library_materials', 'material', parseMaterial );\n\t\tparseLibrary( collada, 'library_cameras', 'camera', parseCamera );\n\t\tparseLibrary( collada, 'library_lights', 'light', parseLight );\n\t\tparseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );\n\t\tparseLibrary( collada, 'library_nodes', 'node', parseNode );\n\t\tparseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );\n\t\tparseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );\n\t\tparseLibrary( collada, 'library_physics_models', 'physics_model', parsePhysicsModel );\n\t\tparseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );\n\n\t\tbuildLibrary( library.animations, buildAnimation );\n\t\tbuildLibrary( library.clips, buildAnimationClip );\n\t\tbuildLibrary( library.controllers, buildController );\n\t\tbuildLibrary( library.images, buildImage );\n\t\tbuildLibrary( library.effects, buildEffect );\n\t\tbuildLibrary( library.materials, buildMaterial );\n\t\tbuildLibrary( library.cameras, buildCamera );\n\t\tbuildLibrary( library.lights, buildLight );\n\t\tbuildLibrary( library.geometries, buildGeometry );\n\t\tbuildLibrary( library.visualScenes, buildVisualScene );\n\n\t\tsetupAnimations();\n\t\tsetupKinematics();\n\n\t\tconst scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );\n\t\tscene.animations = animations;\n\n\t\tif ( asset.upAxis === 'Z_UP' ) {\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: You are loading an asset with a Z-UP coordinate system. The loader just rotates the asset to transform it into Y-UP. The vertex data are not converted, see #24289.' );\n\t\t\tscene.quaternion.setFromEuler( new Euler( - Math.PI / 2, 0, 0 ) );\n\n\t\t}\n\n\t\tscene.scale.multiplyScalar( asset.unit );\n\n\t\treturn {\n\t\t\tget animations() {\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Please access animations over scene.animations now.' );\n\t\t\t\treturn animations;\n\n\t\t\t},\n\t\t\tkinematics: kinematics,\n\t\t\tlibrary: library,\n\t\t\tscene: scene\n\t\t};\n\n\t}\n\n}\n\nexport { ColladaLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}