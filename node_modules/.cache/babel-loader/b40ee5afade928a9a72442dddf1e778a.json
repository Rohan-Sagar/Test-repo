{"ast":null,"code":"import { Coord2D } from '../geometry/coord2d.js';\nimport { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { RGBColor, RGBColorFromFloatComponents } from '../model/color.js';\nimport { PhongMaterial, TextureMap } from '../model/material.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { NameFromLine, ParametersFromLine, ReadLines, UpdateMaterialTransparency } from './importerutils.js';\n\nclass ObjMeshConverter {\n  constructor(mesh) {\n    this.mesh = mesh;\n    this.globalToMeshVertices = new Map();\n    this.globalToMeshVertexColors = new Map();\n    this.globalToMeshNormals = new Map();\n    this.globalToMeshUvs = new Map();\n  }\n\n  AddVertex(globalIndex, globalVertices) {\n    return this.GetLocalIndex(globalIndex, globalVertices, this.globalToMeshVertices, val => {\n      return this.mesh.AddVertex(new Coord3D(val.x, val.y, val.z));\n    });\n  }\n\n  AddVertexColor(globalIndex, globalVertexColors) {\n    return this.GetLocalIndex(globalIndex, globalVertexColors, this.globalToMeshVertexColors, val => {\n      return this.mesh.AddVertexColor(new RGBColor(val.r, val.g, val.b));\n    });\n  }\n\n  AddNormal(globalIndex, globalNormals) {\n    return this.GetLocalIndex(globalIndex, globalNormals, this.globalToMeshNormals, val => {\n      return this.mesh.AddNormal(new Coord3D(val.x, val.y, val.z));\n    });\n  }\n\n  AddUV(globalIndex, globalUvs) {\n    return this.GetLocalIndex(globalIndex, globalUvs, this.globalToMeshUvs, val => {\n      return this.mesh.AddTextureUV(new Coord2D(val.x, val.y));\n    });\n  }\n\n  AddTriangle(triangle) {\n    this.mesh.AddTriangle(triangle);\n  }\n\n  GetLocalIndex(globalIndex, globalValueArray, globalToMeshIndices, valueAdderFunc) {\n    if (isNaN(globalIndex) || globalIndex < 0 || globalIndex >= globalValueArray.length) {\n      return null;\n    }\n\n    if (globalToMeshIndices.has(globalIndex)) {\n      return globalToMeshIndices.get(globalIndex);\n    } else {\n      let globalValue = globalValueArray[globalIndex];\n      let localIndex = valueAdderFunc(globalValue);\n      globalToMeshIndices.set(globalIndex, localIndex);\n      return localIndex;\n    }\n  }\n\n}\n\nfunction CreateColor(r, g, b) {\n  return RGBColorFromFloatComponents(parseFloat(r), parseFloat(g), parseFloat(b));\n}\n\nexport class ImporterObj extends ImporterBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'obj';\n  }\n\n  GetUpDirection() {\n    return Direction.Y;\n  }\n\n  ClearContent() {\n    this.globalVertices = null;\n    this.globalVertexColors = null;\n    this.globalNormals = null;\n    this.globalUvs = null;\n    this.currentMeshConverter = null;\n    this.currentMaterial = null;\n    this.currentMaterialIndex = null;\n    this.meshNameToConverter = null;\n    this.materialNameToIndex = null;\n  }\n\n  ResetContent() {\n    this.globalVertices = [];\n    this.globalVertexColors = [];\n    this.globalNormals = [];\n    this.globalUvs = [];\n    this.currentMeshConverter = null;\n    this.currentMaterial = null;\n    this.currentMaterialIndex = null;\n    this.meshNameToConverter = new Map();\n    this.materialNameToIndex = new Map();\n  }\n\n  ImportContent(fileContent, onFinish) {\n    let textContent = ArrayBufferToUtf8String(fileContent);\n    ReadLines(textContent, line => {\n      if (!this.WasError()) {\n        this.ProcessLine(line);\n      }\n    });\n    onFinish();\n  }\n\n  ProcessLine(line) {\n    if (line[0] === '#') {\n      return;\n    }\n\n    let parameters = ParametersFromLine(line, '#');\n\n    if (parameters.length === 0) {\n      return;\n    }\n\n    let keyword = parameters[0].toLowerCase();\n    parameters.shift();\n\n    if (this.ProcessMeshParameter(keyword, parameters, line)) {\n      return;\n    }\n\n    if (this.ProcessMaterialParameter(keyword, parameters, line)) {\n      return;\n    }\n  }\n\n  AddNewMesh(name) {\n    if (this.meshNameToConverter.has(name)) {\n      this.currentMeshConverter = this.meshNameToConverter.get(name);\n    } else {\n      let mesh = new Mesh();\n      mesh.SetName(name);\n      this.model.AddMeshToRootNode(mesh);\n      this.currentMeshConverter = new ObjMeshConverter(mesh);\n      this.meshNameToConverter.set(name, this.currentMeshConverter);\n    }\n  }\n\n  ProcessMeshParameter(keyword, parameters, line) {\n    if (keyword === 'g' || keyword === 'o') {\n      if (parameters.length === 0) {\n        return true;\n      }\n\n      let name = NameFromLine(line, keyword.length, '#');\n      this.AddNewMesh(name);\n      return true;\n    } else if (keyword === 'v') {\n      if (parameters.length < 3) {\n        return true;\n      }\n\n      this.globalVertices.push(new Coord3D(parseFloat(parameters[0]), parseFloat(parameters[1]), parseFloat(parameters[2])));\n\n      if (parameters.length >= 6) {\n        this.globalVertexColors.push(CreateColor(parameters[3], parameters[4], parameters[5]));\n      }\n\n      return true;\n    } else if (keyword === 'vn') {\n      if (parameters.length < 3) {\n        return true;\n      }\n\n      this.globalNormals.push(new Coord3D(parseFloat(parameters[0]), parseFloat(parameters[1]), parseFloat(parameters[2])));\n      return true;\n    } else if (keyword === 'vt') {\n      if (parameters.length < 2) {\n        return true;\n      }\n\n      this.globalUvs.push(new Coord2D(parseFloat(parameters[0]), parseFloat(parameters[1])));\n      return true;\n    } else if (keyword === 'f') {\n      if (parameters.length < 3) {\n        return true;\n      }\n\n      this.ProcessFace(parameters);\n      return true;\n    }\n\n    return false;\n  }\n\n  ProcessMaterialParameter(keyword, parameters, line) {\n    function CreateTexture(keyword, line, callbacks) {\n      let texture = new TextureMap();\n      let textureName = NameFromLine(line, keyword.length, '#');\n      let textureBuffer = callbacks.getFileBuffer(textureName);\n      texture.name = textureName;\n      texture.buffer = textureBuffer;\n      return texture;\n    }\n\n    if (keyword === 'newmtl') {\n      if (parameters.length === 0) {\n        return true;\n      }\n\n      let material = new PhongMaterial();\n      let materialName = NameFromLine(line, keyword.length, '#');\n      let materialIndex = this.model.AddMaterial(material);\n      material.name = materialName;\n      this.currentMaterial = material;\n      this.materialNameToIndex.set(materialName, materialIndex);\n      return true;\n    } else if (keyword === 'usemtl') {\n      if (parameters.length === 0) {\n        return true;\n      }\n\n      let materialName = NameFromLine(line, keyword.length, '#');\n\n      if (this.materialNameToIndex.has(materialName)) {\n        this.currentMaterialIndex = this.materialNameToIndex.get(materialName);\n      }\n\n      return true;\n    } else if (keyword === 'mtllib') {\n      if (parameters.length === 0) {\n        return true;\n      }\n\n      let fileName = NameFromLine(line, keyword.length, '#');\n      let fileBuffer = this.callbacks.getFileBuffer(fileName);\n\n      if (fileBuffer !== null) {\n        let textContent = ArrayBufferToUtf8String(fileBuffer);\n        ReadLines(textContent, line => {\n          if (!this.WasError()) {\n            this.ProcessLine(line);\n          }\n        });\n      }\n\n      return true;\n    } else if (keyword === 'map_kd') {\n      if (this.currentMaterial === null || parameters.length === 0) {\n        return true;\n      }\n\n      this.currentMaterial.diffuseMap = CreateTexture(keyword, line, this.callbacks);\n      UpdateMaterialTransparency(this.currentMaterial);\n      return true;\n    } else if (keyword === 'map_ks') {\n      if (this.currentMaterial === null || parameters.length === 0) {\n        return true;\n      }\n\n      this.currentMaterial.specularMap = CreateTexture(keyword, line, this.callbacks);\n      return true;\n    } else if (keyword === 'map_bump' || keyword === 'bump') {\n      if (this.currentMaterial === null || parameters.length === 0) {\n        return true;\n      }\n\n      this.currentMaterial.bumpMap = CreateTexture(keyword, line, this.callbacks);\n      return true;\n    } else if (keyword === 'ka') {\n      if (this.currentMaterial === null || parameters.length < 3) {\n        return true;\n      }\n\n      this.currentMaterial.ambient = CreateColor(parameters[0], parameters[1], parameters[2]);\n      return true;\n    } else if (keyword === 'kd') {\n      if (this.currentMaterial === null || parameters.length < 3) {\n        return true;\n      }\n\n      this.currentMaterial.color = CreateColor(parameters[0], parameters[1], parameters[2]);\n      return true;\n    } else if (keyword === 'ks') {\n      if (this.currentMaterial === null || parameters.length < 3) {\n        return true;\n      }\n\n      this.currentMaterial.specular = CreateColor(parameters[0], parameters[1], parameters[2]);\n      return true;\n    } else if (keyword === 'ns') {\n      if (this.currentMaterial === null || parameters.length < 1) {\n        return true;\n      }\n\n      this.currentMaterial.shininess = parseFloat(parameters[0]) / 1000.0;\n      return true;\n    } else if (keyword === 'tr') {\n      if (this.currentMaterial === null || parameters.length < 1) {\n        return true;\n      }\n\n      this.currentMaterial.opacity = 1.0 - parseFloat(parameters[0]);\n      UpdateMaterialTransparency(this.currentMaterial);\n      return true;\n    } else if (keyword === 'd') {\n      if (this.currentMaterial === null || parameters.length < 1) {\n        return true;\n      }\n\n      this.currentMaterial.opacity = parseFloat(parameters[0]);\n      UpdateMaterialTransparency(this.currentMaterial);\n      return true;\n    }\n\n    return false;\n  }\n\n  ProcessFace(parameters) {\n    function GetRelativeIndex(index, count) {\n      if (index > 0) {\n        return index - 1;\n      } else {\n        return count + index;\n      }\n    }\n\n    let vertices = [];\n    let colors = [];\n    let normals = [];\n    let uvs = [];\n\n    for (let i = 0; i < parameters.length; i++) {\n      let vertexParams = parameters[i].split('/');\n      vertices.push(GetRelativeIndex(parseInt(vertexParams[0], 10), this.globalVertices.length));\n\n      if (this.globalVertices.length === this.globalVertexColors.length) {\n        colors.push(GetRelativeIndex(parseInt(vertexParams[0], 10), this.globalVertices.length));\n      }\n\n      if (vertexParams.length > 1 && vertexParams[1].length > 0) {\n        uvs.push(GetRelativeIndex(parseInt(vertexParams[1], 10), this.globalUvs.length));\n      }\n\n      if (vertexParams.length > 2 && vertexParams[2].length > 0) {\n        normals.push(GetRelativeIndex(parseInt(vertexParams[2], 10), this.globalNormals.length));\n      }\n    }\n\n    if (this.currentMeshConverter === null) {\n      this.AddNewMesh('');\n    }\n\n    for (let i = 0; i < vertices.length - 2; i++) {\n      let v0 = this.currentMeshConverter.AddVertex(vertices[0], this.globalVertices);\n      let v1 = this.currentMeshConverter.AddVertex(vertices[i + 1], this.globalVertices);\n      let v2 = this.currentMeshConverter.AddVertex(vertices[i + 2], this.globalVertices);\n\n      if (v0 === null || v1 === null || v2 === null) {\n        this.SetError('Invalid vertex index.');\n        break;\n      }\n\n      let triangle = new Triangle(v0, v1, v2);\n\n      if (colors.length === vertices.length) {\n        let c0 = this.currentMeshConverter.AddVertexColor(colors[0], this.globalVertexColors);\n        let c1 = this.currentMeshConverter.AddVertexColor(colors[i + 1], this.globalVertexColors);\n        let c2 = this.currentMeshConverter.AddVertexColor(colors[i + 2], this.globalVertexColors);\n\n        if (c0 === null || c1 === null || c2 === null) {\n          this.SetError('Invalid vertex color index.');\n          break;\n        }\n\n        triangle.SetVertexColors(c0, c1, c2);\n      }\n\n      if (normals.length === vertices.length) {\n        let n0 = this.currentMeshConverter.AddNormal(normals[0], this.globalNormals);\n        let n1 = this.currentMeshConverter.AddNormal(normals[i + 1], this.globalNormals);\n        let n2 = this.currentMeshConverter.AddNormal(normals[i + 2], this.globalNormals);\n\n        if (n0 === null || n1 === null || n2 === null) {\n          this.SetError('Invalid normal index.');\n          break;\n        }\n\n        triangle.SetNormals(n0, n1, n2);\n      }\n\n      if (uvs.length === vertices.length) {\n        let u0 = this.currentMeshConverter.AddUV(uvs[0], this.globalUvs);\n        let u1 = this.currentMeshConverter.AddUV(uvs[i + 1], this.globalUvs);\n        let u2 = this.currentMeshConverter.AddUV(uvs[i + 2], this.globalUvs);\n\n        if (u0 === null || u1 === null || u2 === null) {\n          this.SetError('Invalid uv index.');\n          break;\n        }\n\n        triangle.SetTextureUVs(u0, u1, u2);\n      }\n\n      if (this.currentMaterialIndex !== null) {\n        triangle.mat = this.currentMaterialIndex;\n      }\n\n      this.currentMeshConverter.AddTriangle(triangle);\n    }\n  }\n\n}","map":{"version":3,"names":["Coord2D","Coord3D","Direction","ArrayBufferToUtf8String","RGBColor","RGBColorFromFloatComponents","PhongMaterial","TextureMap","Mesh","Triangle","ImporterBase","NameFromLine","ParametersFromLine","ReadLines","UpdateMaterialTransparency","ObjMeshConverter","constructor","mesh","globalToMeshVertices","Map","globalToMeshVertexColors","globalToMeshNormals","globalToMeshUvs","AddVertex","globalIndex","globalVertices","GetLocalIndex","val","x","y","z","AddVertexColor","globalVertexColors","r","g","b","AddNormal","globalNormals","AddUV","globalUvs","AddTextureUV","AddTriangle","triangle","globalValueArray","globalToMeshIndices","valueAdderFunc","isNaN","length","has","get","globalValue","localIndex","set","CreateColor","parseFloat","ImporterObj","CanImportExtension","extension","GetUpDirection","Y","ClearContent","currentMeshConverter","currentMaterial","currentMaterialIndex","meshNameToConverter","materialNameToIndex","ResetContent","ImportContent","fileContent","onFinish","textContent","line","WasError","ProcessLine","parameters","keyword","toLowerCase","shift","ProcessMeshParameter","ProcessMaterialParameter","AddNewMesh","name","SetName","model","AddMeshToRootNode","push","ProcessFace","CreateTexture","callbacks","texture","textureName","textureBuffer","getFileBuffer","buffer","material","materialName","materialIndex","AddMaterial","fileName","fileBuffer","diffuseMap","specularMap","bumpMap","ambient","color","specular","shininess","opacity","GetRelativeIndex","index","count","vertices","colors","normals","uvs","i","vertexParams","split","parseInt","v0","v1","v2","SetError","c0","c1","c2","SetVertexColors","n0","n1","n2","SetNormals","u0","u1","u2","SetTextureUVs","mat"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importerobj.js"],"sourcesContent":["import { Coord2D } from '../geometry/coord2d.js';\r\nimport { Coord3D } from '../geometry/coord3d.js';\r\nimport { Direction } from '../geometry/geometry.js';\r\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\r\nimport { RGBColor, RGBColorFromFloatComponents } from '../model/color.js';\r\nimport { PhongMaterial, TextureMap } from '../model/material.js';\r\nimport { Mesh } from '../model/mesh.js';\r\nimport { Triangle } from '../model/triangle.js';\r\nimport { ImporterBase } from './importerbase.js';\r\nimport { NameFromLine, ParametersFromLine, ReadLines, UpdateMaterialTransparency } from './importerutils.js';\r\n\r\nclass ObjMeshConverter\r\n{\r\n    constructor (mesh)\r\n    {\r\n        this.mesh = mesh;\r\n        this.globalToMeshVertices = new Map ();\r\n        this.globalToMeshVertexColors = new Map ();\r\n        this.globalToMeshNormals = new Map ();\r\n        this.globalToMeshUvs = new Map ();\r\n    }\r\n\r\n    AddVertex (globalIndex, globalVertices)\r\n    {\r\n        return this.GetLocalIndex (globalIndex, globalVertices, this.globalToMeshVertices, (val) => {\r\n            return this.mesh.AddVertex (new Coord3D (val.x, val.y, val.z));\r\n        });\r\n    }\r\n\r\n    AddVertexColor (globalIndex, globalVertexColors)\r\n    {\r\n        return this.GetLocalIndex (globalIndex, globalVertexColors, this.globalToMeshVertexColors, (val) => {\r\n            return this.mesh.AddVertexColor (new RGBColor (val.r, val.g, val.b));\r\n        });\r\n    }\r\n\r\n    AddNormal (globalIndex, globalNormals)\r\n    {\r\n        return this.GetLocalIndex (globalIndex, globalNormals, this.globalToMeshNormals, (val) => {\r\n            return this.mesh.AddNormal (new Coord3D (val.x, val.y, val.z));\r\n        });\r\n    }\r\n\r\n    AddUV (globalIndex, globalUvs)\r\n    {\r\n        return this.GetLocalIndex (globalIndex, globalUvs, this.globalToMeshUvs, (val) => {\r\n            return this.mesh.AddTextureUV (new Coord2D (val.x, val.y));\r\n        });\r\n    }\r\n\r\n    AddTriangle (triangle)\r\n    {\r\n        this.mesh.AddTriangle (triangle);\r\n    }\r\n\r\n    GetLocalIndex (globalIndex, globalValueArray, globalToMeshIndices, valueAdderFunc)\r\n    {\r\n        if (isNaN (globalIndex) || globalIndex < 0 || globalIndex >= globalValueArray.length) {\r\n            return null;\r\n        }\r\n        if (globalToMeshIndices.has (globalIndex)) {\r\n            return globalToMeshIndices.get (globalIndex);\r\n        } else {\r\n            let globalValue = globalValueArray[globalIndex];\r\n            let localIndex = valueAdderFunc (globalValue);\r\n            globalToMeshIndices.set (globalIndex, localIndex);\r\n            return localIndex;\r\n        }\r\n    }\r\n}\r\n\r\nfunction CreateColor (r, g, b)\r\n{\r\n    return RGBColorFromFloatComponents (\r\n        parseFloat (r),\r\n        parseFloat (g),\r\n        parseFloat (b)\r\n    );\r\n}\r\n\r\nexport class ImporterObj extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'obj';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Y;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n        this.globalVertices = null;\r\n        this.globalVertexColors = null;\r\n        this.globalNormals = null;\r\n        this.globalUvs = null;\r\n\r\n        this.currentMeshConverter = null;\r\n        this.currentMaterial = null;\r\n        this.currentMaterialIndex = null;\r\n\r\n        this.meshNameToConverter = null;\r\n        this.materialNameToIndex = null;\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n        this.globalVertices = [];\r\n        this.globalVertexColors = [];\r\n        this.globalNormals = [];\r\n        this.globalUvs = [];\r\n\r\n        this.currentMeshConverter = null;\r\n        this.currentMaterial = null;\r\n        this.currentMaterialIndex = null;\r\n\r\n        this.meshNameToConverter = new Map ();\r\n        this.materialNameToIndex = new Map ();\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        let textContent = ArrayBufferToUtf8String (fileContent);\r\n        ReadLines (textContent, (line) => {\r\n            if (!this.WasError ()) {\r\n                this.ProcessLine (line);\r\n            }\r\n        });\r\n        onFinish ();\r\n    }\r\n\r\n    ProcessLine (line)\r\n    {\r\n        if (line[0] === '#') {\r\n            return;\r\n        }\r\n\r\n        let parameters = ParametersFromLine (line, '#');\r\n        if (parameters.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let keyword = parameters[0].toLowerCase ();\r\n        parameters.shift ();\r\n\r\n        if (this.ProcessMeshParameter (keyword, parameters, line)) {\r\n            return;\r\n        }\r\n\r\n        if (this.ProcessMaterialParameter (keyword, parameters, line)) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    AddNewMesh (name)\r\n    {\r\n        if (this.meshNameToConverter.has (name)) {\r\n            this.currentMeshConverter = this.meshNameToConverter.get (name);\r\n        } else {\r\n            let mesh = new Mesh ();\r\n            mesh.SetName (name);\r\n            this.model.AddMeshToRootNode (mesh);\r\n            this.currentMeshConverter = new ObjMeshConverter (mesh);\r\n            this.meshNameToConverter.set (name, this.currentMeshConverter);\r\n        }\r\n    }\r\n\r\n    ProcessMeshParameter (keyword, parameters, line)\r\n    {\r\n        if (keyword === 'g' || keyword === 'o') {\r\n            if (parameters.length === 0) {\r\n                return true;\r\n            }\r\n            let name = NameFromLine (line, keyword.length, '#');\r\n            this.AddNewMesh (name);\r\n            return true;\r\n        } else if (keyword === 'v') {\r\n            if (parameters.length < 3) {\r\n                return true;\r\n            }\r\n            this.globalVertices.push (new Coord3D (\r\n                parseFloat (parameters[0]),\r\n                parseFloat (parameters[1]),\r\n                parseFloat (parameters[2])\r\n            ));\r\n            if (parameters.length >= 6) {\r\n                this.globalVertexColors.push (CreateColor (parameters[3], parameters[4], parameters[5]));\r\n            }\r\n            return true;\r\n        } else if (keyword === 'vn') {\r\n            if (parameters.length < 3) {\r\n                return true;\r\n            }\r\n            this.globalNormals.push (new Coord3D (\r\n                parseFloat (parameters[0]),\r\n                parseFloat (parameters[1]),\r\n                parseFloat (parameters[2])\r\n            ));\r\n            return true;\r\n        } else if (keyword === 'vt') {\r\n            if (parameters.length < 2) {\r\n                return true;\r\n            }\r\n            this.globalUvs.push (new Coord2D (\r\n                parseFloat (parameters[0]),\r\n                parseFloat (parameters[1])\r\n            ));\r\n            return true;\r\n        } else if (keyword === 'f') {\r\n            if (parameters.length < 3) {\r\n                return true;\r\n            }\r\n            this.ProcessFace (parameters);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    ProcessMaterialParameter (keyword, parameters, line)\r\n    {\r\n        function CreateTexture (keyword, line, callbacks)\r\n        {\r\n            let texture = new TextureMap ();\r\n            let textureName = NameFromLine (line, keyword.length, '#');\r\n            let textureBuffer = callbacks.getFileBuffer (textureName);\r\n            texture.name = textureName;\r\n            texture.buffer = textureBuffer;\r\n            return texture;\r\n        }\r\n\r\n        if (keyword === 'newmtl') {\r\n            if (parameters.length === 0) {\r\n                return true;\r\n            }\r\n\r\n            let material = new PhongMaterial ();\r\n            let materialName = NameFromLine (line, keyword.length, '#');\r\n            let materialIndex = this.model.AddMaterial (material);\r\n            material.name = materialName;\r\n            this.currentMaterial = material;\r\n            this.materialNameToIndex.set (materialName, materialIndex);\r\n            return true;\r\n        } else if (keyword === 'usemtl') {\r\n            if (parameters.length === 0) {\r\n                return true;\r\n            }\r\n\r\n            let materialName = NameFromLine (line, keyword.length, '#');\r\n            if (this.materialNameToIndex.has (materialName)) {\r\n                this.currentMaterialIndex = this.materialNameToIndex.get (materialName);\r\n            }\r\n            return true;\r\n        } else if (keyword === 'mtllib') {\r\n            if (parameters.length === 0) {\r\n                return true;\r\n            }\r\n            let fileName = NameFromLine (line, keyword.length, '#');\r\n            let fileBuffer = this.callbacks.getFileBuffer (fileName);\r\n            if (fileBuffer !== null) {\r\n                let textContent = ArrayBufferToUtf8String (fileBuffer);\r\n                ReadLines (textContent, (line) => {\r\n                    if (!this.WasError ()) {\r\n                        this.ProcessLine (line);\r\n                    }\r\n                });\r\n            }\r\n            return true;\r\n        } else if (keyword === 'map_kd') {\r\n            if (this.currentMaterial === null || parameters.length === 0) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.diffuseMap = CreateTexture (keyword, line, this.callbacks);\r\n            UpdateMaterialTransparency (this.currentMaterial);\r\n            return true;\r\n        } else if (keyword === 'map_ks') {\r\n            if (this.currentMaterial === null || parameters.length === 0) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.specularMap = CreateTexture (keyword, line, this.callbacks);\r\n            return true;\r\n        } else if (keyword === 'map_bump' || keyword === 'bump') {\r\n            if (this.currentMaterial === null || parameters.length === 0) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.bumpMap = CreateTexture (keyword, line, this.callbacks);\r\n            return true;\r\n        } else if (keyword === 'ka') {\r\n            if (this.currentMaterial === null || parameters.length < 3) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.ambient = CreateColor (parameters[0], parameters[1], parameters[2]);\r\n            return true;\r\n        } else if (keyword === 'kd') {\r\n            if (this.currentMaterial === null || parameters.length < 3) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.color = CreateColor (parameters[0], parameters[1], parameters[2]);\r\n            return true;\r\n        } else if (keyword === 'ks') {\r\n            if (this.currentMaterial === null || parameters.length < 3) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.specular = CreateColor (parameters[0], parameters[1], parameters[2]);\r\n            return true;\r\n        } else if (keyword === 'ns') {\r\n            if (this.currentMaterial === null || parameters.length < 1) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.shininess = parseFloat (parameters[0]) / 1000.0;\r\n            return true;\r\n        } else if (keyword === 'tr') {\r\n            if (this.currentMaterial === null || parameters.length < 1) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.opacity = 1.0 - parseFloat (parameters[0]);\r\n            UpdateMaterialTransparency (this.currentMaterial);\r\n            return true;\r\n        } else if (keyword === 'd') {\r\n            if (this.currentMaterial === null || parameters.length < 1) {\r\n                return true;\r\n            }\r\n            this.currentMaterial.opacity = parseFloat (parameters[0]);\r\n            UpdateMaterialTransparency (this.currentMaterial);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    ProcessFace (parameters)\r\n    {\r\n        function GetRelativeIndex (index, count)\r\n        {\r\n            if (index > 0) {\r\n                return index - 1;\r\n            } else {\r\n                return count + index;\r\n            }\r\n        }\r\n\r\n        let vertices = [];\r\n        let colors = [];\r\n        let normals = [];\r\n        let uvs = [];\r\n\r\n        for (let i = 0; i < parameters.length; i++) {\r\n            let vertexParams = parameters[i].split ('/');\r\n            vertices.push (GetRelativeIndex (parseInt (vertexParams[0], 10), this.globalVertices.length));\r\n            if (this.globalVertices.length === this.globalVertexColors.length) {\r\n                colors.push (GetRelativeIndex (parseInt (vertexParams[0], 10), this.globalVertices.length));\r\n            }\r\n            if (vertexParams.length > 1 && vertexParams[1].length > 0) {\r\n                uvs.push (GetRelativeIndex (parseInt (vertexParams[1], 10), this.globalUvs.length));\r\n            }\r\n            if (vertexParams.length > 2 && vertexParams[2].length > 0) {\r\n                normals.push (GetRelativeIndex (parseInt (vertexParams[2], 10), this.globalNormals.length));\r\n            }\r\n        }\r\n\r\n        if (this.currentMeshConverter === null) {\r\n            this.AddNewMesh ('');\r\n        }\r\n\r\n        for (let i = 0; i < vertices.length - 2; i++) {\r\n            let v0 = this.currentMeshConverter.AddVertex (vertices[0], this.globalVertices);\r\n            let v1 = this.currentMeshConverter.AddVertex (vertices[i + 1], this.globalVertices);\r\n            let v2 = this.currentMeshConverter.AddVertex (vertices[i + 2], this.globalVertices);\r\n            if (v0 === null || v1 === null || v2 === null) {\r\n                this.SetError ('Invalid vertex index.');\r\n                break;\r\n            }\r\n\r\n            let triangle = new Triangle (v0, v1, v2);\r\n\r\n            if (colors.length === vertices.length) {\r\n                let c0 = this.currentMeshConverter.AddVertexColor (colors[0], this.globalVertexColors);\r\n                let c1 = this.currentMeshConverter.AddVertexColor (colors[i + 1], this.globalVertexColors);\r\n                let c2 = this.currentMeshConverter.AddVertexColor (colors[i + 2], this.globalVertexColors);\r\n                if (c0 === null || c1 === null || c2 === null) {\r\n                    this.SetError ('Invalid vertex color index.');\r\n                    break;\r\n                }\r\n                triangle.SetVertexColors (c0, c1, c2);\r\n            }\r\n\r\n            if (normals.length === vertices.length) {\r\n                let n0 = this.currentMeshConverter.AddNormal (normals[0], this.globalNormals);\r\n                let n1 = this.currentMeshConverter.AddNormal (normals[i + 1], this.globalNormals);\r\n                let n2 = this.currentMeshConverter.AddNormal (normals[i + 2], this.globalNormals);\r\n                if (n0 === null || n1 === null || n2 === null) {\r\n                    this.SetError ('Invalid normal index.');\r\n                    break;\r\n                }\r\n                triangle.SetNormals (n0, n1, n2);\r\n            }\r\n\r\n            if (uvs.length === vertices.length) {\r\n                let u0 = this.currentMeshConverter.AddUV (uvs[0], this.globalUvs);\r\n                let u1 = this.currentMeshConverter.AddUV (uvs[i + 1], this.globalUvs);\r\n                let u2 = this.currentMeshConverter.AddUV (uvs[i + 2], this.globalUvs);\r\n                if (u0 === null || u1 === null || u2 === null) {\r\n                    this.SetError ('Invalid uv index.');\r\n                    break;\r\n                }\r\n                triangle.SetTextureUVs (u0, u1, u2);\r\n            }\r\n\r\n            if (this.currentMaterialIndex !== null) {\r\n                triangle.mat = this.currentMaterialIndex;\r\n            }\r\n\r\n            this.currentMeshConverter.AddTriangle (triangle);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}