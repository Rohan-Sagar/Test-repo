{"ast":null,"code":"import { Coord3D, CoordDistance3D, SubCoord3D } from '../geometry/coord3d.js';\nimport { DegRad, Direction, IsEqual } from '../geometry/geometry.js';\nimport { ColorComponentToFloat } from '../model/color.js';\nimport { ShadingType } from '../threejs/threeutils.js';\nimport { Camera } from './camera.js';\nimport { GetDomElementInnerDimensions } from './domutils.js';\nimport { Navigation } from './navigation.js';\nimport { ViewerExtraGeometry, ViewerGeometry } from './viewergeometry.js';\nimport * as THREE from 'three';\nexport const CameraMode = {\n  Perspective: 1,\n  Orthographic: 2\n};\nexport function GetDefaultCamera(direction) {\n  let fieldOfView = 45.0;\n\n  if (direction === Direction.X) {\n    return new Camera(new Coord3D(2.0, -3.0, 1.5), new Coord3D(0.0, 0.0, 0.0), new Coord3D(1.0, 0.0, 0.0), fieldOfView);\n  } else if (direction === Direction.Y) {\n    return new Camera(new Coord3D(-1.5, 2.0, 3.0), new Coord3D(0.0, 0.0, 0.0), new Coord3D(0.0, 1.0, 0.0), fieldOfView);\n  } else if (direction === Direction.Z) {\n    return new Camera(new Coord3D(-1.5, -3.0, 2.0), new Coord3D(0.0, 0.0, 0.0), new Coord3D(0.0, 0.0, 1.0), fieldOfView);\n  }\n\n  return null;\n}\nexport function TraverseThreeObject(object, processor) {\n  if (!processor(object)) {\n    return false;\n  }\n\n  for (let child of object.children) {\n    if (!TraverseThreeObject(child, processor)) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function GetShadingTypeOfObject(mainObject) {\n  let shadingType = null;\n  TraverseThreeObject(mainObject, obj => {\n    if (obj.isMesh) {\n      for (const material of obj.material) {\n        if (material.type === 'MeshPhongMaterial') {\n          shadingType = ShadingType.Phong;\n        } else if (material.type === 'MeshStandardMaterial') {\n          shadingType = ShadingType.Physical;\n        }\n\n        return false;\n      }\n    }\n\n    return true;\n  });\n  return shadingType;\n}\nexport class CameraValidator {\n  constructor() {\n    this.eyeCenterDistance = 0.0;\n    this.forceUpdate = true;\n  }\n\n  ForceUpdate() {\n    this.forceUpdate = true;\n  }\n\n  ValidatePerspective() {\n    if (this.forceUpdate) {\n      this.forceUpdate = false;\n      return false;\n    }\n\n    return true;\n  }\n\n  ValidateOrthographic(eyeCenterDistance) {\n    if (this.forceUpdate || !IsEqual(this.eyeCenterDistance, eyeCenterDistance)) {\n      this.eyeCenterDistance = eyeCenterDistance;\n      this.forceUpdate = false;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nexport class UpVector {\n  constructor() {\n    this.direction = Direction.Z;\n    this.isFixed = true;\n    this.isFlipped = false;\n  }\n\n  SetDirection(newDirection, oldCamera) {\n    this.direction = newDirection;\n    this.isFlipped = false;\n    let defaultCamera = GetDefaultCamera(this.direction);\n    let defaultDir = SubCoord3D(defaultCamera.eye, defaultCamera.center);\n    let distance = CoordDistance3D(oldCamera.center, oldCamera.eye);\n    let newEye = oldCamera.center.Clone().Offset(defaultDir, distance);\n    let newCamera = oldCamera.Clone();\n\n    if (this.direction === Direction.X) {\n      newCamera.up = new Coord3D(1.0, 0.0, 0.0);\n      newCamera.eye = newEye;\n    } else if (this.direction === Direction.Y) {\n      newCamera.up = new Coord3D(0.0, 1.0, 0.0);\n      newCamera.eye = newEye;\n    } else if (this.direction === Direction.Z) {\n      newCamera.up = new Coord3D(0.0, 0.0, 1.0);\n      newCamera.eye = newEye;\n    }\n\n    return newCamera;\n  }\n\n  SetFixed(isFixed, oldCamera) {\n    this.isFixed = isFixed;\n\n    if (this.isFixed) {\n      return this.SetDirection(this.direction, oldCamera);\n    }\n\n    return null;\n  }\n\n  Flip(oldCamera) {\n    this.isFlipped = !this.isFlipped;\n    let newCamera = oldCamera.Clone();\n    newCamera.up.MultiplyScalar(-1.0);\n    return newCamera;\n  }\n\n}\nexport class ShadingModel {\n  constructor(scene) {\n    this.scene = scene;\n    this.type = ShadingType.Phong;\n    this.cameraMode = CameraMode.Perspective;\n    this.ambientLight = new THREE.AmbientLight(0x888888);\n    this.directionalLight = new THREE.DirectionalLight(0x888888);\n    this.environment = null;\n    this.backgroundIsEnvMap = false;\n    this.scene.add(this.ambientLight);\n    this.scene.add(this.directionalLight);\n  }\n\n  SetShadingType(type) {\n    this.type = type;\n    this.UpdateShading();\n  }\n\n  SetCameraMode(cameraMode) {\n    this.cameraMode = cameraMode;\n    this.UpdateShading();\n  }\n\n  UpdateShading() {\n    if (this.type === ShadingType.Phong) {\n      this.ambientLight.color.set(0x888888);\n      this.directionalLight.color.set(0x888888);\n      this.scene.environment = null;\n    } else if (this.type === ShadingType.Physical) {\n      this.ambientLight.color.set(0x000000);\n      this.directionalLight.color.set(0x555555);\n      this.scene.environment = this.environment;\n    }\n\n    if (this.backgroundIsEnvMap && this.cameraMode === CameraMode.Perspective) {\n      this.scene.background = this.environment;\n    } else {\n      this.scene.background = null;\n    }\n  }\n\n  SetEnvironment(textures, useAsBackground, onLoaded) {\n    let loader = new THREE.CubeTextureLoader();\n    this.environment = loader.load(textures, () => {\n      onLoaded();\n    });\n    this.backgroundIsEnvMap = useAsBackground;\n  }\n\n  UpdateByCamera(camera) {\n    const lightDir = SubCoord3D(camera.eye, camera.center);\n    this.directionalLight.position.set(lightDir.x, lightDir.y, lightDir.z);\n  }\n\n  CreateHighlightMaterial(highlightColor, withOffset) {\n    let material = null;\n\n    if (this.type === ShadingType.Phong) {\n      material = new THREE.MeshPhongMaterial({\n        color: highlightColor,\n        side: THREE.DoubleSide\n      });\n    } else if (this.type === ShadingType.Physical) {\n      material = new THREE.MeshStandardMaterial({\n        color: highlightColor,\n        side: THREE.DoubleSide\n      });\n    }\n\n    if (material !== null && withOffset) {\n      material.polygonOffset = true;\n      material.polygonOffsetUnit = 1;\n      material.polygonOffsetFactor = 1;\n    }\n\n    return material;\n  }\n\n}\nexport class Viewer {\n  constructor() {\n    this.canvas = null;\n    this.renderer = null;\n    this.scene = null;\n    this.geometry = null;\n    this.extraGeometry = null;\n    this.camera = null;\n    this.cameraMode = null;\n    this.cameraValidator = null;\n    this.shadingModel = null;\n    this.navigation = null;\n    this.upVector = null;\n    this.settings = {\n      animationSteps: 40\n    };\n  }\n\n  Init(canvas) {\n    this.canvas = canvas;\n    this.canvas.id = 'viewer';\n    let parameters = {\n      canvas: this.canvas,\n      antialias: true\n    };\n    this.renderer = new THREE.WebGLRenderer(parameters);\n\n    if (window.devicePixelRatio) {\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n    }\n\n    this.renderer.setClearColor('#ffffff', 1.0);\n    this.renderer.setSize(this.canvas.width, this.canvas.height);\n    this.scene = new THREE.Scene();\n    this.geometry = new ViewerGeometry(this.scene);\n    this.extraGeometry = new ViewerExtraGeometry(this.scene);\n    this.InitNavigation();\n    this.InitShading();\n    this.Render();\n  }\n\n  SetMouseClickHandler(onMouseClick) {\n    this.navigation.SetMouseClickHandler(onMouseClick);\n  }\n\n  SetMouseMoveHandler(onMouseMove) {\n    this.navigation.SetMouseMoveHandler(onMouseMove);\n  }\n\n  SetContextMenuHandler(onContext) {\n    this.navigation.SetContextMenuHandler(onContext);\n  }\n\n  SetEnvironmentMapSettings(textures, useAsBackground) {\n    this.shadingModel.SetEnvironment(textures, useAsBackground, () => {\n      this.Render();\n    });\n    this.shadingModel.UpdateShading();\n    this.Render();\n  }\n\n  SetBackgroundColor(color) {\n    let bgColor = new THREE.Color(ColorComponentToFloat(color.r), ColorComponentToFloat(color.g), ColorComponentToFloat(color.b));\n    let alpha = ColorComponentToFloat(color.a);\n    this.renderer.setClearColor(bgColor, alpha);\n    this.Render();\n  }\n\n  SetEdgeSettings(show, color, threshold) {\n    this.geometry.SetEdgeSettings(show, color, threshold);\n    this.Render();\n  }\n\n  GetCanvas() {\n    return this.canvas;\n  }\n\n  GetCamera() {\n    return this.navigation.GetCamera();\n  }\n\n  GetCameraMode() {\n    return this.cameraMode;\n  }\n\n  SetCamera(camera) {\n    this.navigation.SetCamera(camera);\n    this.cameraValidator.ForceUpdate();\n    this.Render();\n  }\n\n  SetCameraMode(cameraMode) {\n    if (this.cameraMode === cameraMode) {\n      return;\n    }\n\n    this.scene.remove(this.camera);\n\n    if (cameraMode === CameraMode.Perspective) {\n      this.camera = new THREE.PerspectiveCamera(45.0, 1.0, 0.1, 1000.0);\n    } else if (cameraMode === CameraMode.Orthographic) {\n      this.camera = new THREE.OrthographicCamera(-1.0, 1.0, 1.0, -1.0, 0.1, 1000.0);\n    }\n\n    this.scene.add(this.camera);\n    this.cameraMode = cameraMode;\n    this.shadingModel.SetCameraMode(cameraMode);\n    this.cameraValidator.ForceUpdate();\n    this.AdjustClippingPlanes();\n    this.Render();\n  }\n\n  Resize(width, height) {\n    let innerSize = GetDomElementInnerDimensions(this.canvas, width, height);\n    this.ResizeRenderer(innerSize.width, innerSize.height);\n  }\n\n  ResizeRenderer(width, height) {\n    if (window.devicePixelRatio) {\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n    }\n\n    this.renderer.setSize(width, height);\n    this.cameraValidator.ForceUpdate();\n    this.Render();\n  }\n\n  FitSphereToWindow(boundingSphere, animation) {\n    if (boundingSphere === null) {\n      return;\n    }\n\n    let center = new Coord3D(boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z);\n    let radius = boundingSphere.radius;\n    let newCamera = this.navigation.GetFitToSphereCamera(center, radius);\n    this.navigation.MoveCamera(newCamera, animation ? this.settings.animationSteps : 0);\n  }\n\n  AdjustClippingPlanes() {\n    let boundingSphere = this.GetBoundingSphere(meshUserData => {\n      return true;\n    });\n    this.AdjustClippingPlanesToSphere(boundingSphere);\n  }\n\n  AdjustClippingPlanesToSphere(boundingSphere) {\n    if (boundingSphere === null) {\n      return;\n    }\n\n    if (boundingSphere.radius < 10.0) {\n      this.camera.near = 0.01;\n      this.camera.far = 100.0;\n    } else if (boundingSphere.radius < 100.0) {\n      this.camera.near = 0.1;\n      this.camera.far = 1000.0;\n    } else if (boundingSphere.radius < 1000.0) {\n      this.camera.near = 10.0;\n      this.camera.far = 10000.0;\n    } else {\n      this.camera.near = 100.0;\n      this.camera.far = 1000000.0;\n    }\n\n    this.cameraValidator.ForceUpdate();\n    this.Render();\n  }\n\n  IsFixUpVector() {\n    return this.navigation.IsFixUpVector();\n  }\n\n  SetFixUpVector(fixUpVector) {\n    let oldCamera = this.navigation.GetCamera();\n    let newCamera = this.upVector.SetFixed(fixUpVector, oldCamera);\n    this.navigation.SetFixUpVector(fixUpVector);\n\n    if (newCamera !== null) {\n      this.navigation.MoveCamera(newCamera, this.settings.animationSteps);\n    }\n\n    this.Render();\n  }\n\n  SetUpVector(upDirection, animate) {\n    let oldCamera = this.navigation.GetCamera();\n    let newCamera = this.upVector.SetDirection(upDirection, oldCamera);\n    let animationSteps = animate ? this.settings.animationSteps : 0;\n    this.navigation.MoveCamera(newCamera, animationSteps);\n    this.Render();\n  }\n\n  FlipUpVector() {\n    let oldCamera = this.navigation.GetCamera();\n    let newCamera = this.upVector.Flip(oldCamera);\n    this.navigation.MoveCamera(newCamera, 0);\n    this.Render();\n  }\n\n  Render() {\n    let navigationCamera = this.navigation.GetCamera();\n    this.camera.position.set(navigationCamera.eye.x, navigationCamera.eye.y, navigationCamera.eye.z);\n    this.camera.up.set(navigationCamera.up.x, navigationCamera.up.y, navigationCamera.up.z);\n    this.camera.lookAt(new THREE.Vector3(navigationCamera.center.x, navigationCamera.center.y, navigationCamera.center.z));\n\n    if (this.cameraMode === CameraMode.Perspective) {\n      if (!this.cameraValidator.ValidatePerspective()) {\n        this.camera.aspect = this.canvas.width / this.canvas.height;\n        this.camera.fov = navigationCamera.fov;\n        this.camera.updateProjectionMatrix();\n      }\n    } else if (this.cameraMode === CameraMode.Orthographic) {\n      let eyeCenterDistance = CoordDistance3D(navigationCamera.eye, navigationCamera.center);\n\n      if (!this.cameraValidator.ValidateOrthographic(eyeCenterDistance)) {\n        let aspect = this.canvas.width / this.canvas.height;\n        let eyeCenterDistance = CoordDistance3D(navigationCamera.eye, navigationCamera.center);\n        let frustumHalfHeight = eyeCenterDistance * Math.tan(0.5 * navigationCamera.fov * DegRad);\n        this.camera.left = -frustumHalfHeight * aspect;\n        this.camera.right = frustumHalfHeight * aspect;\n        this.camera.top = frustumHalfHeight;\n        this.camera.bottom = -frustumHalfHeight;\n        this.camera.updateProjectionMatrix();\n      }\n    }\n\n    this.shadingModel.UpdateByCamera(navigationCamera);\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  SetMainObject(object) {\n    const shadingType = GetShadingTypeOfObject(object);\n    this.geometry.SetMainObject(object);\n    this.shadingModel.SetShadingType(shadingType);\n    this.Render();\n  }\n\n  AddExtraObject(object) {\n    this.extraGeometry.AddObject(object);\n    this.Render();\n  }\n\n  Clear() {\n    this.geometry.Clear();\n    this.extraGeometry.Clear();\n    this.Render();\n  }\n\n  ClearExtra() {\n    this.extraGeometry.Clear();\n    this.Render();\n  }\n\n  SetMeshesVisibility(isVisible) {\n    this.geometry.EnumerateMeshes(mesh => {\n      let visible = isVisible(mesh.userData);\n\n      if (mesh.visible !== visible) {\n        mesh.visible = visible;\n      }\n    });\n    this.geometry.EnumerateEdges(edge => {\n      let visible = isVisible(edge.userData);\n\n      if (edge.visible !== visible) {\n        edge.visible = visible;\n      }\n    });\n    this.Render();\n  }\n\n  SetMeshesHighlight(highlightColor, isHighlighted) {\n    function CreateHighlightMaterials(originalMaterials, highlightMaterial) {\n      let highlightMaterials = [];\n\n      for (let i = 0; i < originalMaterials.length; i++) {\n        highlightMaterials.push(highlightMaterial);\n      }\n\n      return highlightMaterials;\n    }\n\n    const highlightMaterial = this.CreateHighlightMaterial(highlightColor);\n    this.geometry.EnumerateMeshes(mesh => {\n      let highlighted = isHighlighted(mesh.userData);\n\n      if (highlighted) {\n        if (mesh.userData.threeMaterials === null) {\n          mesh.userData.threeMaterials = mesh.material;\n          mesh.material = CreateHighlightMaterials(mesh.material, highlightMaterial);\n        }\n      } else {\n        if (mesh.userData.threeMaterials !== null) {\n          mesh.material = mesh.userData.threeMaterials;\n          mesh.userData.threeMaterials = null;\n        }\n      }\n    });\n    this.Render();\n  }\n\n  CreateHighlightMaterial(highlightColor) {\n    const showEdges = this.geometry.edgeSettings.showEdges;\n    return this.shadingModel.CreateHighlightMaterial(highlightColor, showEdges);\n  }\n\n  GetMeshUserDataUnderMouse(mouseCoords) {\n    let intersection = this.GetMeshIntersectionUnderMouse(mouseCoords);\n\n    if (intersection === null) {\n      return null;\n    }\n\n    return intersection.object.userData;\n  }\n\n  GetMeshIntersectionUnderMouse(mouseCoords) {\n    let canvasSize = this.GetCanvasSize();\n    let intersection = this.geometry.GetMeshIntersectionUnderMouse(mouseCoords, this.camera, canvasSize.width, canvasSize.height);\n\n    if (intersection === null) {\n      return null;\n    }\n\n    return intersection;\n  }\n\n  GetBoundingBox(needToProcess) {\n    return this.geometry.GetBoundingBox(needToProcess);\n  }\n\n  GetBoundingSphere(needToProcess) {\n    return this.geometry.GetBoundingSphere(needToProcess);\n  }\n\n  EnumerateMeshesUserData(enumerator) {\n    this.geometry.EnumerateMeshes(mesh => {\n      enumerator(mesh.userData);\n    });\n  }\n\n  InitNavigation() {\n    let camera = GetDefaultCamera(Direction.Z);\n    this.camera = new THREE.PerspectiveCamera(45.0, 1.0, 0.1, 1000.0);\n    this.cameraMode = CameraMode.Perspective;\n    this.cameraValidator = new CameraValidator();\n    this.scene.add(this.camera);\n    let canvasElem = this.renderer.domElement;\n    this.navigation = new Navigation(canvasElem, camera, {\n      onUpdate: () => {\n        this.Render();\n      }\n    });\n    this.upVector = new UpVector();\n  }\n\n  InitShading() {\n    this.shadingModel = new ShadingModel(this.scene);\n  }\n\n  GetShadingType() {\n    return this.shadingModel.type;\n  }\n\n  GetImageSize() {\n    let originalSize = new THREE.Vector2();\n    this.renderer.getSize(originalSize);\n    return {\n      width: parseInt(originalSize.x, 10),\n      height: parseInt(originalSize.y, 10)\n    };\n  }\n\n  GetCanvasSize() {\n    let width = this.canvas.width;\n    let height = this.canvas.height;\n\n    if (window.devicePixelRatio) {\n      width /= window.devicePixelRatio;\n      height /= window.devicePixelRatio;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  }\n\n  GetImageAsDataUrl(width, height) {\n    let originalSize = this.GetImageSize();\n    let renderWidth = width;\n    let renderHeight = height;\n\n    if (window.devicePixelRatio) {\n      renderWidth /= window.devicePixelRatio;\n      renderHeight /= window.devicePixelRatio;\n    }\n\n    this.ResizeRenderer(renderWidth, renderHeight);\n    this.Render();\n    let url = this.renderer.domElement.toDataURL();\n    this.ResizeRenderer(originalSize.width, originalSize.height);\n    return url;\n  }\n\n}","map":{"version":3,"names":["Coord3D","CoordDistance3D","SubCoord3D","DegRad","Direction","IsEqual","ColorComponentToFloat","ShadingType","Camera","GetDomElementInnerDimensions","Navigation","ViewerExtraGeometry","ViewerGeometry","THREE","CameraMode","Perspective","Orthographic","GetDefaultCamera","direction","fieldOfView","X","Y","Z","TraverseThreeObject","object","processor","child","children","GetShadingTypeOfObject","mainObject","shadingType","obj","isMesh","material","type","Phong","Physical","CameraValidator","constructor","eyeCenterDistance","forceUpdate","ForceUpdate","ValidatePerspective","ValidateOrthographic","UpVector","isFixed","isFlipped","SetDirection","newDirection","oldCamera","defaultCamera","defaultDir","eye","center","distance","newEye","Clone","Offset","newCamera","up","SetFixed","Flip","MultiplyScalar","ShadingModel","scene","cameraMode","ambientLight","AmbientLight","directionalLight","DirectionalLight","environment","backgroundIsEnvMap","add","SetShadingType","UpdateShading","SetCameraMode","color","set","background","SetEnvironment","textures","useAsBackground","onLoaded","loader","CubeTextureLoader","load","UpdateByCamera","camera","lightDir","position","x","y","z","CreateHighlightMaterial","highlightColor","withOffset","MeshPhongMaterial","side","DoubleSide","MeshStandardMaterial","polygonOffset","polygonOffsetUnit","polygonOffsetFactor","Viewer","canvas","renderer","geometry","extraGeometry","cameraValidator","shadingModel","navigation","upVector","settings","animationSteps","Init","id","parameters","antialias","WebGLRenderer","window","devicePixelRatio","setPixelRatio","setClearColor","setSize","width","height","Scene","InitNavigation","InitShading","Render","SetMouseClickHandler","onMouseClick","SetMouseMoveHandler","onMouseMove","SetContextMenuHandler","onContext","SetEnvironmentMapSettings","SetBackgroundColor","bgColor","Color","r","g","b","alpha","a","SetEdgeSettings","show","threshold","GetCanvas","GetCamera","GetCameraMode","SetCamera","remove","PerspectiveCamera","OrthographicCamera","AdjustClippingPlanes","Resize","innerSize","ResizeRenderer","FitSphereToWindow","boundingSphere","animation","radius","GetFitToSphereCamera","MoveCamera","GetBoundingSphere","meshUserData","AdjustClippingPlanesToSphere","near","far","IsFixUpVector","SetFixUpVector","fixUpVector","SetUpVector","upDirection","animate","FlipUpVector","navigationCamera","lookAt","Vector3","aspect","fov","updateProjectionMatrix","frustumHalfHeight","Math","tan","left","right","top","bottom","render","SetMainObject","AddExtraObject","AddObject","Clear","ClearExtra","SetMeshesVisibility","isVisible","EnumerateMeshes","mesh","visible","userData","EnumerateEdges","edge","SetMeshesHighlight","isHighlighted","CreateHighlightMaterials","originalMaterials","highlightMaterial","highlightMaterials","i","length","push","highlighted","threeMaterials","showEdges","edgeSettings","GetMeshUserDataUnderMouse","mouseCoords","intersection","GetMeshIntersectionUnderMouse","canvasSize","GetCanvasSize","GetBoundingBox","needToProcess","EnumerateMeshesUserData","enumerator","canvasElem","domElement","onUpdate","GetShadingType","GetImageSize","originalSize","Vector2","getSize","parseInt","GetImageAsDataUrl","renderWidth","renderHeight","url","toDataURL"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/viewer/viewer.js"],"sourcesContent":["import { Coord3D, CoordDistance3D, SubCoord3D } from '../geometry/coord3d.js';\r\nimport { DegRad, Direction, IsEqual } from '../geometry/geometry.js';\r\nimport { ColorComponentToFloat } from '../model/color.js';\r\nimport { ShadingType } from '../threejs/threeutils.js';\r\nimport { Camera } from './camera.js';\r\nimport { GetDomElementInnerDimensions } from './domutils.js';\r\nimport { Navigation } from './navigation.js';\r\nimport { ViewerExtraGeometry, ViewerGeometry } from './viewergeometry.js';\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport const CameraMode =\r\n{\r\n\tPerspective : 1,\r\n\tOrthographic : 2\r\n};\r\n\r\nexport function GetDefaultCamera (direction)\r\n{\r\n    let fieldOfView = 45.0;\r\n    if (direction === Direction.X) {\r\n        return new Camera (\r\n            new Coord3D (2.0, -3.0, 1.5),\r\n            new Coord3D (0.0, 0.0, 0.0),\r\n            new Coord3D (1.0, 0.0, 0.0),\r\n            fieldOfView\r\n        );\r\n    } else if (direction === Direction.Y) {\r\n        return new Camera (\r\n            new Coord3D (-1.5, 2.0, 3.0),\r\n            new Coord3D (0.0, 0.0, 0.0),\r\n            new Coord3D (0.0, 1.0, 0.0),\r\n            fieldOfView\r\n        );\r\n    } else if (direction === Direction.Z) {\r\n        return new Camera (\r\n            new Coord3D (-1.5, -3.0, 2.0),\r\n            new Coord3D (0.0, 0.0, 0.0),\r\n            new Coord3D (0.0, 0.0, 1.0),\r\n            fieldOfView\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function TraverseThreeObject (object, processor)\r\n{\r\n    if (!processor (object)) {\r\n        return false;\r\n    }\r\n    for (let child of object.children) {\r\n        if (!TraverseThreeObject (child, processor)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function GetShadingTypeOfObject (mainObject)\r\n{\r\n    let shadingType = null;\r\n    TraverseThreeObject (mainObject, (obj) => {\r\n        if (obj.isMesh) {\r\n            for (const material of obj.material) {\r\n                if (material.type === 'MeshPhongMaterial') {\r\n                    shadingType = ShadingType.Phong;\r\n                } else if (material.type === 'MeshStandardMaterial') {\r\n                    shadingType = ShadingType.Physical;\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    });\r\n    return shadingType;\r\n}\r\n\r\nexport class CameraValidator\r\n{\r\n    constructor ()\r\n    {\r\n        this.eyeCenterDistance = 0.0;\r\n        this.forceUpdate = true;\r\n    }\r\n\r\n    ForceUpdate ()\r\n    {\r\n        this.forceUpdate = true;\r\n    }\r\n\r\n    ValidatePerspective ()\r\n    {\r\n        if (this.forceUpdate) {\r\n            this.forceUpdate = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    ValidateOrthographic (eyeCenterDistance)\r\n    {\r\n        if (this.forceUpdate || !IsEqual (this.eyeCenterDistance, eyeCenterDistance)) {\r\n            this.eyeCenterDistance = eyeCenterDistance;\r\n            this.forceUpdate = false;\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class UpVector\r\n{\r\n    constructor ()\r\n    {\r\n        this.direction = Direction.Z;\r\n        this.isFixed = true;\r\n        this.isFlipped = false;\r\n    }\r\n\r\n    SetDirection (newDirection, oldCamera)\r\n    {\r\n        this.direction = newDirection;\r\n        this.isFlipped = false;\r\n\r\n        let defaultCamera = GetDefaultCamera (this.direction);\r\n        let defaultDir = SubCoord3D (defaultCamera.eye, defaultCamera.center);\r\n\r\n        let distance = CoordDistance3D (oldCamera.center, oldCamera.eye);\r\n        let newEye = oldCamera.center.Clone ().Offset (defaultDir, distance);\r\n\r\n        let newCamera = oldCamera.Clone ();\r\n        if (this.direction === Direction.X) {\r\n            newCamera.up = new Coord3D (1.0, 0.0, 0.0);\r\n            newCamera.eye = newEye;\r\n        } else if (this.direction === Direction.Y) {\r\n            newCamera.up = new Coord3D (0.0, 1.0, 0.0);\r\n            newCamera.eye = newEye;\r\n        } else if (this.direction === Direction.Z) {\r\n            newCamera.up = new Coord3D (0.0, 0.0, 1.0);\r\n            newCamera.eye = newEye;\r\n        }\r\n        return newCamera;\r\n    }\r\n\r\n    SetFixed (isFixed, oldCamera)\r\n    {\r\n        this.isFixed = isFixed;\r\n        if (this.isFixed) {\r\n            return this.SetDirection (this.direction, oldCamera);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    Flip (oldCamera)\r\n    {\r\n        this.isFlipped = !this.isFlipped;\r\n        let newCamera = oldCamera.Clone ();\r\n        newCamera.up.MultiplyScalar (-1.0);\r\n        return newCamera;\r\n    }\r\n}\r\n\r\nexport class ShadingModel\r\n{\r\n    constructor (scene)\r\n    {\r\n        this.scene = scene;\r\n\r\n        this.type = ShadingType.Phong;\r\n        this.cameraMode = CameraMode.Perspective;\r\n        this.ambientLight = new THREE.AmbientLight (0x888888);\r\n        this.directionalLight = new THREE.DirectionalLight (0x888888);\r\n        this.environment = null;\r\n        this.backgroundIsEnvMap = false;\r\n\r\n        this.scene.add (this.ambientLight);\r\n        this.scene.add (this.directionalLight);\r\n    }\r\n\r\n    SetShadingType (type)\r\n    {\r\n        this.type = type;\r\n        this.UpdateShading ();\r\n    }\r\n\r\n    SetCameraMode (cameraMode)\r\n    {\r\n        this.cameraMode = cameraMode;\r\n        this.UpdateShading ();\r\n    }\r\n\r\n    UpdateShading ()\r\n    {\r\n        if (this.type === ShadingType.Phong) {\r\n            this.ambientLight.color.set (0x888888);\r\n            this.directionalLight.color.set (0x888888);\r\n            this.scene.environment = null;\r\n        } else if (this.type === ShadingType.Physical) {\r\n            this.ambientLight.color.set (0x000000);\r\n            this.directionalLight.color.set (0x555555);\r\n            this.scene.environment = this.environment;\r\n        }\r\n        if (this.backgroundIsEnvMap && this.cameraMode === CameraMode.Perspective) {\r\n            this.scene.background = this.environment;\r\n        } else {\r\n            this.scene.background = null;\r\n        }\r\n    }\r\n\r\n    SetEnvironment (textures, useAsBackground, onLoaded)\r\n    {\r\n        let loader = new THREE.CubeTextureLoader ();\r\n        this.environment = loader.load (textures, () => {\r\n            onLoaded ();\r\n        });\r\n        this.backgroundIsEnvMap = useAsBackground;\r\n    }\r\n\r\n    UpdateByCamera (camera)\r\n    {\r\n        const lightDir = SubCoord3D (camera.eye, camera.center);\r\n        this.directionalLight.position.set (lightDir.x, lightDir.y, lightDir.z);\r\n    }\r\n\r\n    CreateHighlightMaterial (highlightColor, withOffset)\r\n    {\r\n        let material = null;\r\n        if (this.type === ShadingType.Phong) {\r\n            material = new THREE.MeshPhongMaterial ({\r\n                color : highlightColor,\r\n                side : THREE.DoubleSide\r\n            });\r\n        } else if (this.type === ShadingType.Physical) {\r\n            material = new THREE.MeshStandardMaterial ({\r\n                color : highlightColor,\r\n                side : THREE.DoubleSide\r\n            });\r\n        }\r\n        if (material !== null && withOffset) {\r\n            material.polygonOffset = true;\r\n            material.polygonOffsetUnit = 1;\r\n            material.polygonOffsetFactor = 1;\r\n        }\r\n        return material;\r\n    }\r\n}\r\n\r\nexport class Viewer\r\n{\r\n    constructor ()\r\n    {\r\n        this.canvas = null;\r\n        this.renderer = null;\r\n        this.scene = null;\r\n        this.geometry = null;\r\n        this.extraGeometry = null;\r\n        this.camera = null;\r\n        this.cameraMode = null;\r\n        this.cameraValidator = null;\r\n        this.shadingModel = null;\r\n        this.navigation = null;\r\n        this.upVector = null;\r\n        this.settings = {\r\n            animationSteps : 40\r\n        };\r\n    }\r\n\r\n    Init (canvas)\r\n    {\r\n        this.canvas = canvas;\r\n        this.canvas.id = 'viewer';\r\n\r\n        let parameters = {\r\n            canvas : this.canvas,\r\n            antialias : true\r\n        };\r\n\r\n        this.renderer = new THREE.WebGLRenderer (parameters);\r\n        if (window.devicePixelRatio) {\r\n            this.renderer.setPixelRatio (window.devicePixelRatio);\r\n        }\r\n        this.renderer.setClearColor ('#ffffff', 1.0);\r\n        this.renderer.setSize (this.canvas.width, this.canvas.height);\r\n\r\n        this.scene = new THREE.Scene ();\r\n        this.geometry = new ViewerGeometry (this.scene);\r\n        this.extraGeometry = new ViewerExtraGeometry (this.scene);\r\n\r\n        this.InitNavigation ();\r\n        this.InitShading ();\r\n\r\n        this.Render ();\r\n    }\r\n\r\n    SetMouseClickHandler (onMouseClick)\r\n    {\r\n        this.navigation.SetMouseClickHandler (onMouseClick);\r\n    }\r\n\r\n    SetMouseMoveHandler (onMouseMove)\r\n    {\r\n        this.navigation.SetMouseMoveHandler (onMouseMove);\r\n    }\r\n\r\n    SetContextMenuHandler (onContext)\r\n    {\r\n        this.navigation.SetContextMenuHandler (onContext);\r\n    }\r\n\r\n    SetEnvironmentMapSettings (textures, useAsBackground)\r\n    {\r\n        this.shadingModel.SetEnvironment (textures, useAsBackground, () => {\r\n            this.Render ();\r\n        });\r\n        this.shadingModel.UpdateShading ();\r\n        this.Render ();\r\n    }\r\n\r\n    SetBackgroundColor (color)\r\n    {\r\n        let bgColor = new THREE.Color (\r\n            ColorComponentToFloat (color.r),\r\n            ColorComponentToFloat (color.g),\r\n            ColorComponentToFloat (color.b)\r\n        );\r\n        let alpha = ColorComponentToFloat (color.a);\r\n        this.renderer.setClearColor (bgColor, alpha);\r\n        this.Render ();\r\n    }\r\n\r\n    SetEdgeSettings (show, color, threshold)\r\n    {\r\n        this.geometry.SetEdgeSettings (show, color, threshold);\r\n        this.Render ();\r\n    }\r\n\r\n    GetCanvas ()\r\n    {\r\n        return this.canvas;\r\n    }\r\n\r\n    GetCamera ()\r\n    {\r\n        return this.navigation.GetCamera ();\r\n    }\r\n\r\n    GetCameraMode ()\r\n    {\r\n        return this.cameraMode;\r\n    }\r\n\r\n    SetCamera (camera)\r\n    {\r\n        this.navigation.SetCamera (camera);\r\n        this.cameraValidator.ForceUpdate ();\r\n        this.Render ();\r\n    }\r\n\r\n    SetCameraMode (cameraMode)\r\n    {\r\n        if (this.cameraMode === cameraMode) {\r\n            return;\r\n        }\r\n\r\n        this.scene.remove (this.camera);\r\n        if (cameraMode === CameraMode.Perspective) {\r\n            this.camera = new THREE.PerspectiveCamera (45.0, 1.0, 0.1, 1000.0);\r\n        } else if (cameraMode === CameraMode.Orthographic) {\r\n\t\t\tthis.camera = new THREE.OrthographicCamera (-1.0, 1.0, 1.0, -1.0, 0.1, 1000.0);\r\n        }\r\n        this.scene.add (this.camera);\r\n\r\n        this.cameraMode = cameraMode;\r\n        this.shadingModel.SetCameraMode (cameraMode);\r\n        this.cameraValidator.ForceUpdate ();\r\n\r\n        this.AdjustClippingPlanes ();\r\n        this.Render ();\r\n    }\r\n\r\n    Resize (width, height)\r\n    {\r\n        let innerSize = GetDomElementInnerDimensions (this.canvas, width, height);\r\n        this.ResizeRenderer (innerSize.width, innerSize.height);\r\n    }\r\n\r\n    ResizeRenderer (width, height)\r\n    {\r\n        if (window.devicePixelRatio) {\r\n            this.renderer.setPixelRatio (window.devicePixelRatio);\r\n        }\r\n        this.renderer.setSize (width, height);\r\n        this.cameraValidator.ForceUpdate ();\r\n        this.Render ();\r\n    }\r\n\r\n    FitSphereToWindow (boundingSphere, animation)\r\n    {\r\n        if (boundingSphere === null) {\r\n            return;\r\n        }\r\n        let center = new Coord3D (boundingSphere.center.x, boundingSphere.center.y, boundingSphere.center.z);\r\n        let radius = boundingSphere.radius;\r\n\r\n        let newCamera = this.navigation.GetFitToSphereCamera (center, radius);\r\n        this.navigation.MoveCamera (newCamera, animation ? this.settings.animationSteps : 0);\r\n    }\r\n\r\n    AdjustClippingPlanes ()\r\n    {\r\n        let boundingSphere = this.GetBoundingSphere ((meshUserData) => {\r\n            return true;\r\n        });\r\n        this.AdjustClippingPlanesToSphere (boundingSphere);\r\n    }\r\n\r\n    AdjustClippingPlanesToSphere (boundingSphere)\r\n    {\r\n        if (boundingSphere === null) {\r\n            return;\r\n        }\r\n        if (boundingSphere.radius < 10.0) {\r\n            this.camera.near = 0.01;\r\n            this.camera.far = 100.0;\r\n        } else if (boundingSphere.radius < 100.0) {\r\n            this.camera.near = 0.1;\r\n            this.camera.far = 1000.0;\r\n        } else if (boundingSphere.radius < 1000.0) {\r\n            this.camera.near = 10.0;\r\n            this.camera.far = 10000.0;\r\n        } else {\r\n            this.camera.near = 100.0;\r\n            this.camera.far = 1000000.0;\r\n        }\r\n\r\n        this.cameraValidator.ForceUpdate ();\r\n        this.Render ();\r\n    }\r\n\r\n    IsFixUpVector ()\r\n    {\r\n        return this.navigation.IsFixUpVector ();\r\n    }\r\n\r\n    SetFixUpVector (fixUpVector)\r\n    {\r\n        let oldCamera = this.navigation.GetCamera ();\r\n        let newCamera = this.upVector.SetFixed (fixUpVector, oldCamera);\r\n        this.navigation.SetFixUpVector (fixUpVector);\r\n        if (newCamera !== null) {\r\n            this.navigation.MoveCamera (newCamera, this.settings.animationSteps);\r\n        }\r\n        this.Render ();\r\n    }\r\n\r\n    SetUpVector (upDirection, animate)\r\n    {\r\n        let oldCamera = this.navigation.GetCamera ();\r\n        let newCamera = this.upVector.SetDirection (upDirection, oldCamera);\r\n        let animationSteps = animate ? this.settings.animationSteps : 0;\r\n        this.navigation.MoveCamera (newCamera, animationSteps);\r\n        this.Render ();\r\n    }\r\n\r\n    FlipUpVector ()\r\n    {\r\n        let oldCamera = this.navigation.GetCamera ();\r\n        let newCamera = this.upVector.Flip (oldCamera);\r\n        this.navigation.MoveCamera (newCamera, 0);\r\n        this.Render ();\r\n    }\r\n\r\n    Render ()\r\n    {\r\n        let navigationCamera = this.navigation.GetCamera ();\r\n\r\n        this.camera.position.set (navigationCamera.eye.x, navigationCamera.eye.y, navigationCamera.eye.z);\r\n        this.camera.up.set (navigationCamera.up.x, navigationCamera.up.y, navigationCamera.up.z);\r\n        this.camera.lookAt (new THREE.Vector3 (navigationCamera.center.x, navigationCamera.center.y, navigationCamera.center.z));\r\n\r\n        if (this.cameraMode === CameraMode.Perspective) {\r\n            if (!this.cameraValidator.ValidatePerspective ()) {\r\n                this.camera.aspect = this.canvas.width / this.canvas.height;\r\n                this.camera.fov = navigationCamera.fov;\r\n                this.camera.updateProjectionMatrix ();\r\n            }\r\n        } else if (this.cameraMode === CameraMode.Orthographic) {\r\n            let eyeCenterDistance = CoordDistance3D (navigationCamera.eye, navigationCamera.center);\r\n            if (!this.cameraValidator.ValidateOrthographic (eyeCenterDistance)) {\r\n                let aspect = this.canvas.width / this.canvas.height;\r\n                let eyeCenterDistance = CoordDistance3D (navigationCamera.eye, navigationCamera.center);\r\n                let frustumHalfHeight = eyeCenterDistance * Math.tan (0.5 * navigationCamera.fov * DegRad);\r\n                this.camera.left = -frustumHalfHeight * aspect;\r\n                this.camera.right = frustumHalfHeight * aspect;\r\n                this.camera.top = frustumHalfHeight;\r\n                this.camera.bottom = -frustumHalfHeight;\r\n                this.camera.updateProjectionMatrix ();\r\n            }\r\n        }\r\n\r\n        this.shadingModel.UpdateByCamera (navigationCamera);\r\n        this.renderer.render (this.scene, this.camera);\r\n    }\r\n\r\n    SetMainObject (object)\r\n    {\r\n        const shadingType = GetShadingTypeOfObject (object);\r\n        this.geometry.SetMainObject (object);\r\n        this.shadingModel.SetShadingType (shadingType);\r\n\r\n        this.Render ();\r\n    }\r\n\r\n    AddExtraObject (object)\r\n    {\r\n        this.extraGeometry.AddObject (object);\r\n        this.Render ();\r\n    }\r\n\r\n    Clear ()\r\n    {\r\n        this.geometry.Clear ();\r\n        this.extraGeometry.Clear ();\r\n        this.Render ();\r\n    }\r\n\r\n    ClearExtra ()\r\n    {\r\n        this.extraGeometry.Clear ();\r\n        this.Render ();\r\n    }\r\n\r\n    SetMeshesVisibility (isVisible)\r\n    {\r\n        this.geometry.EnumerateMeshes ((mesh) => {\r\n            let visible = isVisible (mesh.userData);\r\n            if (mesh.visible !== visible) {\r\n                mesh.visible = visible;\r\n            }\r\n        });\r\n        this.geometry.EnumerateEdges ((edge) => {\r\n            let visible = isVisible (edge.userData);\r\n            if (edge.visible !== visible) {\r\n                edge.visible = visible;\r\n            }\r\n        });\r\n        this.Render ();\r\n    }\r\n\r\n    SetMeshesHighlight (highlightColor, isHighlighted)\r\n    {\r\n        function CreateHighlightMaterials (originalMaterials, highlightMaterial)\r\n        {\r\n            let highlightMaterials = [];\r\n            for (let i = 0; i < originalMaterials.length; i++) {\r\n                highlightMaterials.push (highlightMaterial);\r\n            }\r\n            return highlightMaterials;\r\n        }\r\n\r\n        const highlightMaterial = this.CreateHighlightMaterial (highlightColor);\r\n        this.geometry.EnumerateMeshes ((mesh) => {\r\n            let highlighted = isHighlighted (mesh.userData);\r\n            if (highlighted) {\r\n                if (mesh.userData.threeMaterials === null) {\r\n                    mesh.userData.threeMaterials = mesh.material;\r\n                    mesh.material = CreateHighlightMaterials (mesh.material, highlightMaterial);\r\n                }\r\n            } else {\r\n                if (mesh.userData.threeMaterials !== null) {\r\n                    mesh.material = mesh.userData.threeMaterials;\r\n                    mesh.userData.threeMaterials = null;\r\n                }\r\n            }\r\n        });\r\n\r\n        this.Render ();\r\n    }\r\n\r\n    CreateHighlightMaterial (highlightColor)\r\n    {\r\n        const showEdges = this.geometry.edgeSettings.showEdges;\r\n        return this.shadingModel.CreateHighlightMaterial (highlightColor, showEdges);\r\n    }\r\n\r\n    GetMeshUserDataUnderMouse (mouseCoords)\r\n    {\r\n        let intersection = this.GetMeshIntersectionUnderMouse (mouseCoords);\r\n        if (intersection === null) {\r\n            return null;\r\n        }\r\n        return intersection.object.userData;\r\n    }\r\n\r\n    GetMeshIntersectionUnderMouse (mouseCoords)\r\n    {\r\n        let canvasSize = this.GetCanvasSize ();\r\n        let intersection = this.geometry.GetMeshIntersectionUnderMouse (mouseCoords, this.camera, canvasSize.width, canvasSize.height);\r\n        if (intersection === null) {\r\n            return null;\r\n        }\r\n        return intersection;\r\n    }\r\n\r\n    GetBoundingBox (needToProcess)\r\n    {\r\n        return this.geometry.GetBoundingBox (needToProcess);\r\n    }\r\n\r\n    GetBoundingSphere (needToProcess)\r\n    {\r\n        return this.geometry.GetBoundingSphere (needToProcess);\r\n    }\r\n\r\n    EnumerateMeshesUserData (enumerator)\r\n    {\r\n        this.geometry.EnumerateMeshes ((mesh) => {\r\n            enumerator (mesh.userData);\r\n        });\r\n    }\r\n\r\n    InitNavigation ()\r\n    {\r\n        let camera = GetDefaultCamera (Direction.Z);\r\n        this.camera = new THREE.PerspectiveCamera (45.0, 1.0, 0.1, 1000.0);\r\n        this.cameraMode = CameraMode.Perspective;\r\n        this.cameraValidator = new CameraValidator ();\r\n        this.scene.add (this.camera);\r\n\r\n        let canvasElem = this.renderer.domElement;\r\n        this.navigation = new Navigation (canvasElem, camera, {\r\n            onUpdate : () => {\r\n                this.Render ();\r\n            }\r\n        });\r\n\r\n        this.upVector = new UpVector ();\r\n    }\r\n\r\n    InitShading  ()\r\n    {\r\n        this.shadingModel = new ShadingModel (this.scene);\r\n    }\r\n\r\n    GetShadingType ()\r\n    {\r\n        return this.shadingModel.type;\r\n    }\r\n\r\n    GetImageSize ()\r\n    {\r\n        let originalSize = new THREE.Vector2 ();\r\n        this.renderer.getSize (originalSize);\r\n        return {\r\n            width : parseInt (originalSize.x, 10),\r\n            height : parseInt (originalSize.y, 10)\r\n        };\r\n    }\r\n\r\n    GetCanvasSize ()\r\n    {\r\n        let width = this.canvas.width;\r\n        let height = this.canvas.height;\r\n        if (window.devicePixelRatio) {\r\n            width /= window.devicePixelRatio;\r\n            height /= window.devicePixelRatio;\r\n        }\r\n        return {\r\n            width : width,\r\n            height : height\r\n        };\r\n    }\r\n\r\n    GetImageAsDataUrl (width, height)\r\n    {\r\n        let originalSize = this.GetImageSize ();\r\n        let renderWidth = width;\r\n        let renderHeight = height;\r\n        if (window.devicePixelRatio) {\r\n            renderWidth /= window.devicePixelRatio;\r\n            renderHeight /= window.devicePixelRatio;\r\n        }\r\n        this.ResizeRenderer (renderWidth, renderHeight);\r\n        this.Render ();\r\n        let url = this.renderer.domElement.toDataURL ();\r\n        this.ResizeRenderer (originalSize.width, originalSize.height);\r\n        return url;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}