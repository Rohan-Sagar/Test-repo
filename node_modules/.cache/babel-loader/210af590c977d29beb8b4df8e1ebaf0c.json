{"ast":null,"code":"import { Coord3D } from '../geometry/coord3d.js';\nimport { Direction, IsPositive } from '../geometry/geometry.js';\nimport { BinaryReader } from '../io/binaryreader.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { NameFromLine, ParametersFromLine, ReadLines } from './importerutils.js';\nexport class ImporterStl extends ImporterBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'stl';\n  }\n\n  GetUpDirection() {\n    return Direction.Z;\n  }\n\n  ClearContent() {\n    this.mesh = null;\n    this.triangle = null;\n  }\n\n  ResetContent() {\n    this.mesh = new Mesh();\n    this.model.AddMeshToRootNode(this.mesh);\n    this.triangle = null;\n  }\n\n  ImportContent(fileContent, onFinish) {\n    if (this.IsBinaryStlFile(fileContent)) {\n      this.ProcessBinary(fileContent);\n    } else {\n      let textContent = ArrayBufferToUtf8String(fileContent);\n      ReadLines(textContent, line => {\n        if (!this.WasError()) {\n          this.ProcessLine(line);\n        }\n      });\n    }\n\n    onFinish();\n  }\n\n  IsBinaryStlFile(fileContent) {\n    let byteLength = fileContent.byteLength;\n\n    if (byteLength < 84) {\n      return false;\n    }\n\n    let reader = new BinaryReader(fileContent, true);\n    reader.Skip(80);\n    let triangleCount = reader.ReadUnsignedInteger32();\n\n    if (byteLength !== triangleCount * 50 + 84) {\n      return false;\n    }\n\n    return true;\n  }\n\n  ProcessLine(line) {\n    if (line[0] === '#') {\n      return;\n    }\n\n    let parameters = ParametersFromLine(line, '#');\n\n    if (parameters.length === 0) {\n      return;\n    }\n\n    let keyword = parameters[0];\n\n    if (keyword === 'solid') {\n      if (parameters.length > 1) {\n        let name = NameFromLine(line, keyword.length, '#');\n        this.mesh.SetName(name);\n      }\n\n      return;\n    }\n\n    if (keyword === 'facet') {\n      this.triangle = new Triangle(-1, -1, -1);\n\n      if (parameters.length >= 5 && parameters[1] === 'normal') {\n        let normalVector = new Coord3D(parseFloat(parameters[2]), parseFloat(parameters[3]), parseFloat(parameters[4]));\n\n        if (IsPositive(normalVector.Length())) {\n          let normalIndex = this.mesh.AddNormal(normalVector);\n          this.triangle.SetNormals(normalIndex, normalIndex, normalIndex);\n        }\n      }\n\n      return;\n    }\n\n    if (keyword === 'vertex' && this.triangle !== null) {\n      if (parameters.length >= 4) {\n        let vertexIndex = this.mesh.AddVertex(new Coord3D(parseFloat(parameters[1]), parseFloat(parameters[2]), parseFloat(parameters[3])));\n\n        if (this.triangle.v0 === -1) {\n          this.triangle.v0 = vertexIndex;\n        } else if (this.triangle.v1 === -1) {\n          this.triangle.v1 = vertexIndex;\n        } else if (this.triangle.v2 === -1) {\n          this.triangle.v2 = vertexIndex;\n        }\n      }\n\n      return;\n    }\n\n    if (keyword === 'endfacet' && this.triangle !== null) {\n      if (this.triangle.v0 !== -1 && this.triangle.v1 !== -1 && this.triangle.v2 !== null) {\n        this.mesh.AddTriangle(this.triangle);\n      }\n\n      this.triangle = null;\n      return;\n    }\n  }\n\n  ProcessBinary(fileContent) {\n    function ReadVector(reader) {\n      let coord = new Coord3D();\n      coord.x = reader.ReadFloat32();\n      coord.y = reader.ReadFloat32();\n      coord.z = reader.ReadFloat32();\n      return coord;\n    }\n\n    function AddVertex(mesh, reader) {\n      let coord = ReadVector(reader);\n      return mesh.AddVertex(coord);\n    }\n\n    let reader = new BinaryReader(fileContent, true);\n    reader.Skip(80);\n    let triangleCount = reader.ReadUnsignedInteger32();\n\n    for (let i = 0; i < triangleCount; i++) {\n      let normalVector = ReadVector(reader);\n      let v0 = AddVertex(this.mesh, reader);\n      let v1 = AddVertex(this.mesh, reader);\n      let v2 = AddVertex(this.mesh, reader);\n      reader.Skip(2);\n      let triangle = new Triangle(v0, v1, v2);\n\n      if (IsPositive(normalVector.Length())) {\n        let normal = this.mesh.AddNormal(normalVector);\n        triangle.SetNormals(normal, normal, normal);\n      }\n\n      this.mesh.AddTriangle(triangle);\n    }\n  }\n\n}","map":{"version":3,"names":["Coord3D","Direction","IsPositive","BinaryReader","ArrayBufferToUtf8String","Mesh","Triangle","ImporterBase","NameFromLine","ParametersFromLine","ReadLines","ImporterStl","constructor","CanImportExtension","extension","GetUpDirection","Z","ClearContent","mesh","triangle","ResetContent","model","AddMeshToRootNode","ImportContent","fileContent","onFinish","IsBinaryStlFile","ProcessBinary","textContent","line","WasError","ProcessLine","byteLength","reader","Skip","triangleCount","ReadUnsignedInteger32","parameters","length","keyword","name","SetName","normalVector","parseFloat","Length","normalIndex","AddNormal","SetNormals","vertexIndex","AddVertex","v0","v1","v2","AddTriangle","ReadVector","coord","x","ReadFloat32","y","z","i","normal"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importerstl.js"],"sourcesContent":["import { Coord3D } from '../geometry/coord3d.js';\r\nimport { Direction, IsPositive } from '../geometry/geometry.js';\r\nimport { BinaryReader } from '../io/binaryreader.js';\r\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\r\nimport { Mesh } from '../model/mesh.js';\r\nimport { Triangle } from '../model/triangle.js';\r\nimport { ImporterBase } from './importerbase.js';\r\nimport { NameFromLine, ParametersFromLine, ReadLines } from './importerutils.js';\r\n\r\nexport class ImporterStl extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'stl';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Z;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n        this.mesh = null;\r\n        this.triangle = null;\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n        this.mesh = new Mesh ();\r\n        this.model.AddMeshToRootNode (this.mesh);\r\n        this.triangle = null;\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        if (this.IsBinaryStlFile (fileContent)) {\r\n            this.ProcessBinary (fileContent);\r\n        } else {\r\n            let textContent = ArrayBufferToUtf8String (fileContent);\r\n            ReadLines (textContent, (line) => {\r\n                if (!this.WasError ()) {\r\n                    this.ProcessLine (line);\r\n                }\r\n            });\r\n        }\r\n        onFinish ();\r\n    }\r\n\r\n    IsBinaryStlFile (fileContent)\r\n    {\r\n        let byteLength = fileContent.byteLength;\r\n        if (byteLength < 84) {\r\n            return false;\r\n        }\r\n\r\n        let reader = new BinaryReader (fileContent, true);\r\n        reader.Skip (80);\r\n\r\n        let triangleCount = reader.ReadUnsignedInteger32 ();\r\n        if (byteLength !== triangleCount * 50 + 84) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    ProcessLine (line)\r\n    {\r\n        if (line[0] === '#') {\r\n            return;\r\n        }\r\n\r\n        let parameters = ParametersFromLine (line, '#');\r\n        if (parameters.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let keyword = parameters[0];\r\n        if (keyword === 'solid') {\r\n            if (parameters.length > 1) {\r\n                let name = NameFromLine (line, keyword.length, '#');\r\n                this.mesh.SetName (name);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (keyword === 'facet') {\r\n            this.triangle = new Triangle (-1, -1, -1);\r\n            if (parameters.length >= 5 && parameters[1] === 'normal') {\r\n                let normalVector = new Coord3D (\r\n                    parseFloat (parameters[2]),\r\n                    parseFloat (parameters[3]),\r\n                    parseFloat (parameters[4])\r\n                );\r\n                if (IsPositive (normalVector.Length ())) {\r\n                    let normalIndex = this.mesh.AddNormal (normalVector);\r\n                    this.triangle.SetNormals (\r\n                        normalIndex,\r\n                        normalIndex,\r\n                        normalIndex\r\n                    );\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (keyword === 'vertex' && this.triangle !== null) {\r\n            if (parameters.length >= 4) {\r\n                let vertexIndex = this.mesh.AddVertex (new Coord3D (\r\n                    parseFloat (parameters[1]),\r\n                    parseFloat (parameters[2]),\r\n                    parseFloat (parameters[3])\r\n                ));\r\n                if (this.triangle.v0 === -1) {\r\n                    this.triangle.v0 = vertexIndex;\r\n                } else if (this.triangle.v1 === -1) {\r\n                    this.triangle.v1 = vertexIndex;\r\n                } else if (this.triangle.v2 === -1) {\r\n                    this.triangle.v2 = vertexIndex;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (keyword === 'endfacet' && this.triangle !== null) {\r\n            if (this.triangle.v0 !== -1 && this.triangle.v1 !== -1 && this.triangle.v2 !== null) {\r\n                this.mesh.AddTriangle (this.triangle);\r\n            }\r\n            this.triangle = null;\r\n            return;\r\n        }\r\n    }\r\n\r\n    ProcessBinary (fileContent)\r\n    {\r\n        function ReadVector (reader)\r\n        {\r\n            let coord = new Coord3D ();\r\n            coord.x = reader.ReadFloat32 ();\r\n            coord.y = reader.ReadFloat32 ();\r\n            coord.z = reader.ReadFloat32 ();\r\n            return coord;\r\n        }\r\n\r\n        function AddVertex (mesh, reader)\r\n        {\r\n            let coord = ReadVector (reader);\r\n            return mesh.AddVertex (coord);\r\n        }\r\n\r\n        let reader = new BinaryReader (fileContent, true);\r\n        reader.Skip (80);\r\n        let triangleCount = reader.ReadUnsignedInteger32 ();\r\n        for (let i = 0; i < triangleCount; i++) {\r\n            let normalVector = ReadVector (reader);\r\n            let v0 = AddVertex (this.mesh, reader);\r\n            let v1 = AddVertex (this.mesh, reader);\r\n            let v2 = AddVertex (this.mesh, reader);\r\n            reader.Skip (2);\r\n            let triangle = new Triangle (v0, v1, v2);\r\n            if (IsPositive (normalVector.Length ())) {\r\n                let normal = this.mesh.AddNormal (normalVector);\r\n                triangle.SetNormals (normal, normal, normal);\r\n            }\r\n            this.mesh.AddTriangle (triangle);\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}