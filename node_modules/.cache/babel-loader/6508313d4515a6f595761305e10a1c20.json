{"ast":null,"code":"import { BinaryWriter } from '../io/binarywriter.js';\nimport { FileFormat } from '../io/fileutils.js';\nimport { TextWriter } from '../io/textwriter.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\nexport class ExporterPly extends ExporterBase {\n  constructor() {\n    super();\n  }\n\n  CanExport(format, extension) {\n    return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'ply';\n  }\n\n  ExportContent(exporterModel, format, files, onFinish) {\n    if (format === FileFormat.Text) {\n      this.ExportText(exporterModel, files);\n    } else {\n      this.ExportBinary(exporterModel, files);\n    }\n\n    onFinish();\n  }\n\n  ExportText(exporterModel, files) {\n    let plyFile = new ExportedFile('model.ply');\n    files.push(plyFile);\n    let plyWriter = new TextWriter();\n    let vertexCount = exporterModel.VertexCount();\n    let triangleCount = exporterModel.TriangleCount();\n    let headerText = this.GetHeaderText('ascii', vertexCount, triangleCount);\n    plyWriter.Write(headerText);\n    exporterModel.EnumerateVerticesAndTriangles({\n      onVertex: function (x, y, z) {\n        plyWriter.WriteArrayLine([x, y, z]);\n      },\n      onTriangle: function (v0, v1, v2) {\n        plyWriter.WriteArrayLine([3, v0, v1, v2]);\n      }\n    });\n    plyFile.SetTextContent(plyWriter.GetText());\n  }\n\n  ExportBinary(exporterModel, files) {\n    let plyFile = new ExportedFile('model.ply');\n    files.push(plyFile);\n    let vertexCount = exporterModel.VertexCount();\n    let triangleCount = exporterModel.TriangleCount();\n    let headerText = this.GetHeaderText('binary_little_endian', vertexCount, triangleCount);\n    let fullByteLength = headerText.length + vertexCount * 3 * 4 + triangleCount * (1 + 3 * 4);\n    let plyWriter = new BinaryWriter(fullByteLength, true);\n\n    for (let i = 0; i < headerText.length; i++) {\n      plyWriter.WriteUnsignedCharacter8(headerText.charCodeAt(i));\n    }\n\n    exporterModel.EnumerateVerticesAndTriangles({\n      onVertex: function (x, y, z) {\n        plyWriter.WriteFloat32(x);\n        plyWriter.WriteFloat32(y);\n        plyWriter.WriteFloat32(z);\n      },\n      onTriangle: function (v0, v1, v2) {\n        plyWriter.WriteUnsignedCharacter8(3);\n        plyWriter.WriteInteger32(v0);\n        plyWriter.WriteInteger32(v1);\n        plyWriter.WriteInteger32(v2);\n      }\n    });\n    plyFile.SetBufferContent(plyWriter.GetBuffer());\n  }\n\n  GetHeaderText(format, vertexCount, triangleCount) {\n    let headerWriter = new TextWriter();\n    headerWriter.WriteLine('ply');\n    headerWriter.WriteLine('format ' + format + ' 1.0');\n    headerWriter.WriteLine('element vertex ' + vertexCount);\n    headerWriter.WriteLine('property float x');\n    headerWriter.WriteLine('property float y');\n    headerWriter.WriteLine('property float z');\n    headerWriter.WriteLine('element face ' + triangleCount);\n    headerWriter.WriteLine('property list uchar int vertex_index');\n    headerWriter.WriteLine('end_header');\n    return headerWriter.GetText();\n  }\n\n}","map":{"version":3,"names":["BinaryWriter","FileFormat","TextWriter","ExportedFile","ExporterBase","ExporterPly","constructor","CanExport","format","extension","Text","Binary","ExportContent","exporterModel","files","onFinish","ExportText","ExportBinary","plyFile","push","plyWriter","vertexCount","VertexCount","triangleCount","TriangleCount","headerText","GetHeaderText","Write","EnumerateVerticesAndTriangles","onVertex","x","y","z","WriteArrayLine","onTriangle","v0","v1","v2","SetTextContent","GetText","fullByteLength","length","i","WriteUnsignedCharacter8","charCodeAt","WriteFloat32","WriteInteger32","SetBufferContent","GetBuffer","headerWriter","WriteLine"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/export/exporterply.js"],"sourcesContent":["import { BinaryWriter } from '../io/binarywriter.js';\r\nimport { FileFormat } from '../io/fileutils.js';\r\nimport { TextWriter } from '../io/textwriter.js';\r\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\r\n\r\nexport class ExporterPly extends ExporterBase\r\n{\r\n\tconstructor ()\r\n\t{\r\n\t\tsuper ();\r\n\t}\r\n\r\n    CanExport (format, extension)\r\n    {\r\n        return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'ply';\r\n    }\r\n\r\n\tExportContent (exporterModel, format, files, onFinish)\r\n\t{\r\n\t\tif (format === FileFormat.Text) {\r\n\t\t\tthis.ExportText (exporterModel, files);\r\n\t\t} else {\r\n\t\t\tthis.ExportBinary (exporterModel, files);\r\n\t\t}\r\n\t\tonFinish ();\r\n\t}\r\n\r\n\tExportText (exporterModel, files)\r\n\t{\r\n\t\tlet plyFile = new ExportedFile ('model.ply');\r\n\t\tfiles.push (plyFile);\r\n\r\n\t\tlet plyWriter = new TextWriter ();\r\n\r\n\t\tlet vertexCount = exporterModel.VertexCount ();\r\n\t\tlet triangleCount = exporterModel.TriangleCount ();\r\n\t\tlet headerText = this.GetHeaderText ('ascii', vertexCount, triangleCount);\r\n\t\tplyWriter.Write (headerText);\r\n\r\n\t\texporterModel.EnumerateVerticesAndTriangles ({\r\n\t\t\tonVertex : function (x, y, z) {\r\n\t\t\t\tplyWriter.WriteArrayLine ([x, y, z]);\r\n\t\t\t},\r\n\t\t\tonTriangle : function (v0, v1, v2) {\r\n\t\t\t\tplyWriter.WriteArrayLine ([3, v0, v1, v2]);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tplyFile.SetTextContent (plyWriter.GetText ());\r\n\t}\r\n\r\n\tExportBinary (exporterModel, files)\r\n\t{\r\n\t\tlet plyFile = new ExportedFile ('model.ply');\r\n\t\tfiles.push (plyFile);\r\n\r\n\t\tlet vertexCount = exporterModel.VertexCount ();\r\n\t\tlet triangleCount = exporterModel.TriangleCount ();\r\n\t\tlet headerText = this.GetHeaderText ('binary_little_endian', vertexCount, triangleCount);\r\n\r\n\t\tlet fullByteLength = headerText.length + vertexCount * 3 * 4 + triangleCount * (1 + 3 * 4);\r\n\t\tlet plyWriter = new BinaryWriter (fullByteLength, true);\r\n\r\n\t\tfor (let i = 0; i < headerText.length; i++) {\r\n\t\t\tplyWriter.WriteUnsignedCharacter8 (headerText.charCodeAt (i));\r\n\t\t}\r\n\r\n\t\texporterModel.EnumerateVerticesAndTriangles ({\r\n\t\t\tonVertex : function (x, y, z) {\r\n\t\t\t\tplyWriter.WriteFloat32 (x);\r\n\t\t\t\tplyWriter.WriteFloat32 (y);\r\n\t\t\t\tplyWriter.WriteFloat32 (z);\r\n\t\t\t},\r\n\t\t\tonTriangle : function (v0, v1, v2) {\r\n\t\t\t\tplyWriter.WriteUnsignedCharacter8 (3);\r\n\t\t\t\tplyWriter.WriteInteger32 (v0);\r\n\t\t\t\tplyWriter.WriteInteger32 (v1);\r\n\t\t\t\tplyWriter.WriteInteger32 (v2);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tplyFile.SetBufferContent (plyWriter.GetBuffer ());\r\n\t}\r\n\r\n\tGetHeaderText (format, vertexCount, triangleCount)\r\n\t{\r\n\t\tlet headerWriter = new TextWriter ();\r\n\t\theaderWriter.WriteLine ('ply');\r\n\t\theaderWriter.WriteLine ('format ' + format + ' 1.0');\r\n\t\theaderWriter.WriteLine ('element vertex ' + vertexCount);\r\n\t\theaderWriter.WriteLine ('property float x');\r\n\t\theaderWriter.WriteLine ('property float y');\r\n\t\theaderWriter.WriteLine ('property float z');\r\n\t\theaderWriter.WriteLine ('element face ' + triangleCount);\r\n\t\theaderWriter.WriteLine ('property list uchar int vertex_index');\r\n\t\theaderWriter.WriteLine ('end_header');\r\n\t\treturn headerWriter.GetText ();\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}