{"ast":null,"code":"import { CrossVector3D, SubCoord3D } from '../geometry/coord3d.js';\nimport { Transformation } from '../geometry/transformation.js';\nexport const MeshType = {\n  Empty: 0,\n  TriangleMesh: 1\n};\nexport function GetMeshType(mesh) {\n  if (mesh.TriangleCount() > 0) {\n    return MeshType.TriangleMesh;\n  }\n\n  return MeshType.Empty;\n}\nexport function CalculateTriangleNormal(v0, v1, v2) {\n  let v = SubCoord3D(v1, v0);\n  let w = SubCoord3D(v2, v0);\n  let normal = CrossVector3D(v, w);\n  normal.Normalize();\n  return normal;\n}\nexport function TransformMesh(mesh, transformation) {\n  if (transformation.IsIdentity()) {\n    return;\n  }\n\n  for (let i = 0; i < mesh.VertexCount(); i++) {\n    let vertex = mesh.GetVertex(i);\n    let transformed = transformation.TransformCoord3D(vertex);\n    vertex.x = transformed.x;\n    vertex.y = transformed.y;\n    vertex.z = transformed.z;\n  }\n\n  if (mesh.NormalCount() > 0) {\n    let normalMatrix = transformation.GetMatrix().InvertTranspose();\n\n    if (normalMatrix !== null) {\n      let normalTransformation = new Transformation(normalMatrix);\n\n      for (let i = 0; i < mesh.NormalCount(); i++) {\n        let normal = mesh.GetNormal(i);\n        let transformed = normalTransformation.TransformCoord3D(normal);\n        normal.x = transformed.x;\n        normal.y = transformed.y;\n        normal.z = transformed.z;\n      }\n    }\n  }\n}\nexport function FlipMeshTrianglesOrientation(mesh) {\n  for (let i = 0; i < mesh.TriangleCount(); i++) {\n    let triangle = mesh.GetTriangle(i);\n    let tmp = triangle.v1;\n    triangle.v1 = triangle.v2;\n    triangle.v2 = tmp;\n  }\n}","map":{"version":3,"names":["CrossVector3D","SubCoord3D","Transformation","MeshType","Empty","TriangleMesh","GetMeshType","mesh","TriangleCount","CalculateTriangleNormal","v0","v1","v2","v","w","normal","Normalize","TransformMesh","transformation","IsIdentity","i","VertexCount","vertex","GetVertex","transformed","TransformCoord3D","x","y","z","NormalCount","normalMatrix","GetMatrix","InvertTranspose","normalTransformation","GetNormal","FlipMeshTrianglesOrientation","triangle","GetTriangle","tmp"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/meshutils.js"],"sourcesContent":["import { CrossVector3D, SubCoord3D } from '../geometry/coord3d.js';\r\nimport { Transformation } from '../geometry/transformation.js';\r\n\r\nexport const MeshType =\r\n{\r\n    Empty : 0,\r\n    TriangleMesh : 1\r\n};\r\n\r\nexport function GetMeshType (mesh)\r\n{\r\n    if (mesh.TriangleCount () > 0) {\r\n        return MeshType.TriangleMesh;\r\n    }\r\n    return MeshType.Empty;\r\n}\r\n\r\nexport function CalculateTriangleNormal (v0, v1, v2)\r\n{\r\n    let v = SubCoord3D (v1, v0);\r\n    let w = SubCoord3D (v2, v0);\r\n    let normal = CrossVector3D (v, w);\r\n    normal.Normalize ();\r\n    return normal;\r\n}\r\n\r\nexport function TransformMesh (mesh, transformation)\r\n{\r\n    if (transformation.IsIdentity ()) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < mesh.VertexCount (); i++) {\r\n        let vertex = mesh.GetVertex (i);\r\n        let transformed = transformation.TransformCoord3D (vertex);\r\n        vertex.x = transformed.x;\r\n        vertex.y = transformed.y;\r\n        vertex.z = transformed.z;\r\n    }\r\n\r\n    if (mesh.NormalCount () > 0) {\r\n        let normalMatrix = transformation.GetMatrix ().InvertTranspose ();\r\n        if (normalMatrix !== null) {\r\n            let normalTransformation = new Transformation (normalMatrix);\r\n            for (let i = 0; i < mesh.NormalCount (); i++) {\r\n                let normal = mesh.GetNormal (i);\r\n                let transformed = normalTransformation.TransformCoord3D (normal);\r\n                normal.x = transformed.x;\r\n                normal.y = transformed.y;\r\n                normal.z = transformed.z;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function FlipMeshTrianglesOrientation (mesh)\r\n{\r\n    for (let i = 0; i < mesh.TriangleCount (); i++) {\r\n        let triangle = mesh.GetTriangle (i);\r\n        let tmp = triangle.v1;\r\n        triangle.v1 = triangle.v2;\r\n        triangle.v2 = tmp;\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,wBAA1C;AACA,SAASC,cAAT,QAA+B,+BAA/B;AAEA,OAAO,MAAMC,QAAQ,GACrB;EACIC,KAAK,EAAG,CADZ;EAEIC,YAAY,EAAG;AAFnB,CADO;AAMP,OAAO,SAASC,WAAT,CAAsBC,IAAtB,EACP;EACI,IAAIA,IAAI,CAACC,aAAL,KAAwB,CAA5B,EAA+B;IAC3B,OAAOL,QAAQ,CAACE,YAAhB;EACH;;EACD,OAAOF,QAAQ,CAACC,KAAhB;AACH;AAED,OAAO,SAASK,uBAAT,CAAkCC,EAAlC,EAAsCC,EAAtC,EAA0CC,EAA1C,EACP;EACI,IAAIC,CAAC,GAAGZ,UAAU,CAAEU,EAAF,EAAMD,EAAN,CAAlB;EACA,IAAII,CAAC,GAAGb,UAAU,CAAEW,EAAF,EAAMF,EAAN,CAAlB;EACA,IAAIK,MAAM,GAAGf,aAAa,CAAEa,CAAF,EAAKC,CAAL,CAA1B;EACAC,MAAM,CAACC,SAAP;EACA,OAAOD,MAAP;AACH;AAED,OAAO,SAASE,aAAT,CAAwBV,IAAxB,EAA8BW,cAA9B,EACP;EACI,IAAIA,cAAc,CAACC,UAAf,EAAJ,EAAkC;IAC9B;EACH;;EAED,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACc,WAAL,EAApB,EAAyCD,CAAC,EAA1C,EAA8C;IAC1C,IAAIE,MAAM,GAAGf,IAAI,CAACgB,SAAL,CAAgBH,CAAhB,CAAb;IACA,IAAII,WAAW,GAAGN,cAAc,CAACO,gBAAf,CAAiCH,MAAjC,CAAlB;IACAA,MAAM,CAACI,CAAP,GAAWF,WAAW,CAACE,CAAvB;IACAJ,MAAM,CAACK,CAAP,GAAWH,WAAW,CAACG,CAAvB;IACAL,MAAM,CAACM,CAAP,GAAWJ,WAAW,CAACI,CAAvB;EACH;;EAED,IAAIrB,IAAI,CAACsB,WAAL,KAAsB,CAA1B,EAA6B;IACzB,IAAIC,YAAY,GAAGZ,cAAc,CAACa,SAAf,GAA4BC,eAA5B,EAAnB;;IACA,IAAIF,YAAY,KAAK,IAArB,EAA2B;MACvB,IAAIG,oBAAoB,GAAG,IAAI/B,cAAJ,CAAoB4B,YAApB,CAA3B;;MACA,KAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACsB,WAAL,EAApB,EAAyCT,CAAC,EAA1C,EAA8C;QAC1C,IAAIL,MAAM,GAAGR,IAAI,CAAC2B,SAAL,CAAgBd,CAAhB,CAAb;QACA,IAAII,WAAW,GAAGS,oBAAoB,CAACR,gBAArB,CAAuCV,MAAvC,CAAlB;QACAA,MAAM,CAACW,CAAP,GAAWF,WAAW,CAACE,CAAvB;QACAX,MAAM,CAACY,CAAP,GAAWH,WAAW,CAACG,CAAvB;QACAZ,MAAM,CAACa,CAAP,GAAWJ,WAAW,CAACI,CAAvB;MACH;IACJ;EACJ;AACJ;AAED,OAAO,SAASO,4BAAT,CAAuC5B,IAAvC,EACP;EACI,KAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACC,aAAL,EAApB,EAA2CY,CAAC,EAA5C,EAAgD;IAC5C,IAAIgB,QAAQ,GAAG7B,IAAI,CAAC8B,WAAL,CAAkBjB,CAAlB,CAAf;IACA,IAAIkB,GAAG,GAAGF,QAAQ,CAACzB,EAAnB;IACAyB,QAAQ,CAACzB,EAAT,GAAcyB,QAAQ,CAACxB,EAAvB;IACAwB,QAAQ,CAACxB,EAAT,GAAc0B,GAAd;EACH;AACJ"},"metadata":{},"sourceType":"module"}