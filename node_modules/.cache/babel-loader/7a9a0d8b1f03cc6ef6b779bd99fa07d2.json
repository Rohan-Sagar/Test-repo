{"ast":null,"code":"import { WaitWhile } from '../core/taskrunner.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { Base64DataURIToArrayBuffer, CreateObjectUrl, GetFileExtensionFromMimeType } from '../io/bufferutils.js';\nimport { GetFileExtension, GetFileName } from '../io/fileutils.js';\nimport { PhongMaterial, TextureMap } from '../model/material.js';\nimport { Node, NodeType } from '../model/node.js';\nimport { ConvertThreeColorToColor, ConvertThreeGeometryToMesh } from '../threejs/threeutils.js';\nimport { ImporterBase } from './importerbase.js';\nimport * as THREE from 'three';\nimport { TGALoader } from 'three/examples/jsm/loaders/TGALoader.js';\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\nimport { VRMLLoader } from 'three/examples/jsm/loaders/VRMLLoader.js';\nimport { ThreeMFLoader } from 'three/examples/jsm/loaders/3MFLoader.js';\nexport class ImporterThreeBase extends ImporterBase {\n  constructor() {\n    super();\n  }\n\n  CreateLoader(manager) {\n    return null;\n  }\n\n  GetMainObject(loadedObject) {\n    return loadedObject;\n  }\n\n  IsMeshVisible(mesh) {\n    return true;\n  }\n\n  ClearContent() {\n    this.loader = null;\n    this.materialIdToIndex = null;\n    this.objectUrlToFileName = null;\n  }\n\n  ResetContent() {\n    this.loader = null;\n    this.materialIdToIndex = new Map();\n    this.objectUrlToFileName = new Map();\n  }\n\n  ImportContent(fileContent, onFinish) {\n    this.LoadModel(fileContent, onFinish);\n  }\n\n  LoadModel(fileContent, onFinish) {\n    let isAllLoadersDone = false;\n    let loadingManager = new THREE.LoadingManager(() => {\n      isAllLoadersDone = true;\n    });\n    const mainFileUrl = CreateObjectUrl(fileContent);\n    loadingManager.setURLModifier(url => {\n      if (url === mainFileUrl) {\n        return url;\n      }\n\n      const name = GetFileName(url);\n      const extension = GetFileExtension(url);\n\n      if (extension.length > 0) {\n        const buffer = this.callbacks.getFileBuffer(url);\n\n        if (buffer !== null) {\n          let objectUrl = CreateObjectUrl(buffer);\n          this.objectUrlToFileName.set(objectUrl, name);\n          return objectUrl;\n        }\n      }\n\n      return url;\n    });\n    const threeLoader = this.CreateLoader(loadingManager);\n\n    if (threeLoader === null) {\n      onFinish();\n      return;\n    }\n\n    threeLoader.load(mainFileUrl, object => {\n      WaitWhile(() => {\n        if (isAllLoadersDone) {\n          this.OnThreeObjectsLoaded(object, onFinish);\n          return false;\n        }\n\n        return true;\n      });\n    }, () => {}, err => {\n      this.SetError(err);\n      onFinish();\n    });\n  }\n\n  OnThreeObjectsLoaded(loadedObject, onFinish) {\n    function GetObjectTransformation(threeObject) {\n      let matrix = new Matrix().CreateIdentity();\n      threeObject.updateMatrix();\n\n      if (threeObject.matrix !== undefined && threeObject.matrix !== null) {\n        matrix.Set(threeObject.matrix.elements);\n      }\n\n      return new Transformation(matrix);\n    }\n\n    function AddObject(importer, model, threeObject, parentNode) {\n      let node = new Node();\n\n      if (threeObject.name !== undefined) {\n        node.SetName(threeObject.name);\n      }\n\n      node.SetTransformation(GetObjectTransformation(threeObject));\n      parentNode.AddChildNode(node);\n\n      for (let childObject of threeObject.children) {\n        AddObject(importer, model, childObject, node);\n      }\n\n      if (threeObject.isMesh && importer.IsMeshVisible(threeObject)) {\n        if (threeObject.children.length === 0) {\n          node.SetType(NodeType.MeshNode);\n        }\n\n        let mesh = importer.ConvertThreeMesh(threeObject);\n        let meshIndex = model.AddMesh(mesh);\n        node.AddMeshIndex(meshIndex);\n      }\n    }\n\n    let mainObject = this.GetMainObject(loadedObject);\n    let rootNode = this.model.GetRootNode();\n    rootNode.SetTransformation(GetObjectTransformation(mainObject));\n\n    for (let childObject of mainObject.children) {\n      AddObject(this, this.model, childObject, rootNode);\n    }\n\n    onFinish();\n  }\n\n  ConvertThreeMesh(threeMesh) {\n    let mesh = null;\n\n    if (Array.isArray(threeMesh.material)) {\n      mesh = ConvertThreeGeometryToMesh(threeMesh.geometry, null);\n\n      if (threeMesh.geometry.attributes.color === undefined || threeMesh.geometry.attributes.color === null) {\n        let materialIndices = [];\n\n        for (let i = 0; i < threeMesh.material.length; i++) {\n          const material = threeMesh.material[i];\n          const materialIndex = this.FindOrCreateMaterial(material);\n          materialIndices.push(materialIndex);\n        }\n\n        for (let i = 0; i < threeMesh.geometry.groups.length; i++) {\n          let group = threeMesh.geometry.groups[i];\n          let groupEnd = null;\n\n          if (group.count === Infinity) {\n            groupEnd = mesh.TriangleCount();\n          } else {\n            groupEnd = group.start / 3 + group.count / 3;\n          }\n\n          for (let j = group.start / 3; j < groupEnd; j++) {\n            let triangle = mesh.GetTriangle(j);\n            triangle.SetMaterial(materialIndices[group.materialIndex]);\n          }\n        }\n      }\n    } else {\n      const materialIndex = this.FindOrCreateMaterial(threeMesh.material);\n      mesh = ConvertThreeGeometryToMesh(threeMesh.geometry, materialIndex);\n    }\n\n    if (threeMesh.name !== undefined && threeMesh.name !== null) {\n      mesh.SetName(threeMesh.name);\n    }\n\n    return mesh;\n  }\n\n  FindOrCreateMaterial(threeMaterial) {\n    if (this.materialIdToIndex.has(threeMaterial.id)) {\n      return this.materialIdToIndex.get(threeMaterial.id);\n    }\n\n    let material = this.ConvertThreeMaterial(threeMaterial);\n    let materialIndex = this.model.AddMaterial(material);\n    this.materialIdToIndex.set(threeMaterial.id, materialIndex);\n    return materialIndex;\n  }\n\n  ConvertThreeMaterial(threeMaterial) {\n    function CreateTexture(threeMap, objectUrlToFileName) {\n      function GetDataUrl(img) {\n        if (img.data !== undefined && img.data !== null) {\n          let imageData = new ImageData(img.width, img.height);\n          let imageSize = img.width * img.height * 4;\n\n          for (let i = 0; i < imageSize; i++) {\n            imageData.data[i] = img.data[i];\n          }\n\n          return THREE.ImageUtils.getDataURL(imageData);\n        } else {\n          return THREE.ImageUtils.getDataURL(img);\n        }\n      }\n\n      if (threeMap === undefined || threeMap === null) {\n        return null;\n      }\n\n      if (threeMap.image === undefined || threeMap.image === null) {\n        return null;\n      }\n\n      try {\n        const dataUrl = GetDataUrl(threeMap.image);\n        const base64Buffer = Base64DataURIToArrayBuffer(dataUrl);\n        let texture = new TextureMap();\n        let textureName = null;\n\n        if (objectUrlToFileName.has(threeMap.image.src)) {\n          textureName = objectUrlToFileName.get(threeMap.image.src);\n        } else if (threeMap.name !== undefined && threeMap.name !== null) {\n          textureName = threeMap.name + '.' + GetFileExtensionFromMimeType(base64Buffer.mimeType);\n        } else {\n          textureName = 'Embedded_' + threeMap.id.toString() + '.' + GetFileExtensionFromMimeType(base64Buffer.mimeType);\n        }\n\n        texture.name = textureName;\n        texture.mimeType = base64Buffer.mimeType;\n        texture.buffer = base64Buffer.buffer;\n        texture.rotation = threeMap.rotation;\n        texture.offset.x = threeMap.offset.x;\n        texture.offset.y = threeMap.offset.y;\n        texture.scale.x = threeMap.repeat.x;\n        texture.scale.y = threeMap.repeat.y;\n        return texture;\n      } catch (err) {\n        return null;\n      }\n    }\n\n    let material = new PhongMaterial();\n    material.name = threeMaterial.name;\n    material.color = ConvertThreeColorToColor(threeMaterial.color);\n    material.opacity = threeMaterial.opacity;\n    material.transparent = threeMaterial.transparent;\n    material.alphaTest = threeMaterial.alphaTest;\n\n    if (threeMaterial.type === 'MeshPhongMaterial') {\n      material.specular = ConvertThreeColorToColor(threeMaterial.specular);\n      material.shininess = threeMaterial.shininess / 100.0;\n    }\n\n    material.diffuseMap = CreateTexture(threeMaterial.map, this.objectUrlToFileName);\n    material.normalMap = CreateTexture(threeMaterial.normalMap, this.objectUrlToFileName);\n    material.bumpMap = CreateTexture(threeMaterial.bumpMap, this.objectUrlToFileName);\n    return material;\n  }\n\n}\nexport class ImporterThreeFbx extends ImporterThreeBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'fbx';\n  }\n\n  GetUpDirection() {\n    return Direction.Y;\n  }\n\n  CreateLoader(manager) {\n    manager.addHandler(/\\.tga$/i, new TGALoader(manager));\n    return new FBXLoader(manager);\n  }\n\n  GetMainObject(loadedObject) {\n    return loadedObject;\n  }\n\n}\nexport class ImporterThreeDae extends ImporterThreeBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'dae';\n  }\n\n  GetUpDirection() {\n    return Direction.Y;\n  }\n\n  CreateLoader(manager) {\n    manager.addHandler(/\\.tga$/i, new TGALoader(manager));\n    return new ColladaLoader(manager);\n  }\n\n  GetMainObject(loadedObject) {\n    return loadedObject.scene;\n  }\n\n}\nexport class ImporterThreeWrl extends ImporterThreeBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'wrl';\n  }\n\n  GetUpDirection() {\n    return Direction.Y;\n  }\n\n  CreateLoader(manager) {\n    return new VRMLLoader(manager);\n  }\n\n  GetMainObject(loadedObject) {\n    return loadedObject;\n  }\n\n  IsMeshVisible(mesh) {\n    let isVisible = true;\n\n    if (Array.isArray(mesh.material)) {\n      for (let i = 0; i < mesh.material.length; i++) {\n        if (mesh.material[i].side === THREE.BackSide) {\n          isVisible = false;\n          break;\n        }\n      }\n    } else {\n      isVisible = mesh.material.side !== THREE.BackSide;\n    }\n\n    return isVisible;\n  }\n\n}\nexport class ImporterThree3mf extends ImporterThreeBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === '3mf';\n  }\n\n  GetUpDirection() {\n    return Direction.Z;\n  }\n\n  CreateLoader(manager) {\n    return new ThreeMFLoader(manager);\n  }\n\n  GetMainObject(loadedObject) {\n    return loadedObject;\n  }\n\n}","map":{"version":3,"names":["WaitWhile","Direction","Matrix","Transformation","Base64DataURIToArrayBuffer","CreateObjectUrl","GetFileExtensionFromMimeType","GetFileExtension","GetFileName","PhongMaterial","TextureMap","Node","NodeType","ConvertThreeColorToColor","ConvertThreeGeometryToMesh","ImporterBase","THREE","TGALoader","FBXLoader","ColladaLoader","VRMLLoader","ThreeMFLoader","ImporterThreeBase","constructor","CreateLoader","manager","GetMainObject","loadedObject","IsMeshVisible","mesh","ClearContent","loader","materialIdToIndex","objectUrlToFileName","ResetContent","Map","ImportContent","fileContent","onFinish","LoadModel","isAllLoadersDone","loadingManager","LoadingManager","mainFileUrl","setURLModifier","url","name","extension","length","buffer","callbacks","getFileBuffer","objectUrl","set","threeLoader","load","object","OnThreeObjectsLoaded","err","SetError","GetObjectTransformation","threeObject","matrix","CreateIdentity","updateMatrix","undefined","Set","elements","AddObject","importer","model","parentNode","node","SetName","SetTransformation","AddChildNode","childObject","children","isMesh","SetType","MeshNode","ConvertThreeMesh","meshIndex","AddMesh","AddMeshIndex","mainObject","rootNode","GetRootNode","threeMesh","Array","isArray","material","geometry","attributes","color","materialIndices","i","materialIndex","FindOrCreateMaterial","push","groups","group","groupEnd","count","Infinity","TriangleCount","start","j","triangle","GetTriangle","SetMaterial","threeMaterial","has","id","get","ConvertThreeMaterial","AddMaterial","CreateTexture","threeMap","GetDataUrl","img","data","imageData","ImageData","width","height","imageSize","ImageUtils","getDataURL","image","dataUrl","base64Buffer","texture","textureName","src","mimeType","toString","rotation","offset","x","y","scale","repeat","opacity","transparent","alphaTest","type","specular","shininess","diffuseMap","map","normalMap","bumpMap","ImporterThreeFbx","CanImportExtension","GetUpDirection","Y","addHandler","ImporterThreeDae","scene","ImporterThreeWrl","isVisible","side","BackSide","ImporterThree3mf","Z"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importerthree.js"],"sourcesContent":["import { WaitWhile } from '../core/taskrunner.js';\r\nimport { Direction } from '../geometry/geometry.js';\r\nimport { Matrix } from '../geometry/matrix.js';\r\nimport { Transformation } from '../geometry/transformation.js';\r\nimport { Base64DataURIToArrayBuffer, CreateObjectUrl, GetFileExtensionFromMimeType } from '../io/bufferutils.js';\r\nimport { GetFileExtension, GetFileName } from '../io/fileutils.js';\r\nimport { PhongMaterial, TextureMap } from '../model/material.js';\r\nimport { Node, NodeType } from '../model/node.js';\r\nimport { ConvertThreeColorToColor, ConvertThreeGeometryToMesh } from '../threejs/threeutils.js';\r\nimport { ImporterBase } from './importerbase.js';\r\n\r\nimport * as THREE from 'three';\r\nimport { TGALoader } from 'three/examples/jsm/loaders/TGALoader.js';\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js';\r\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader.js';\r\nimport { VRMLLoader } from 'three/examples/jsm/loaders/VRMLLoader.js';\r\nimport { ThreeMFLoader } from 'three/examples/jsm/loaders/3MFLoader.js';\r\n\r\nexport class ImporterThreeBase extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CreateLoader (manager)\r\n    {\r\n        return null;\r\n    }\r\n\r\n    GetMainObject (loadedObject)\r\n    {\r\n        return loadedObject;\r\n    }\r\n\r\n    IsMeshVisible (mesh)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n        this.loader = null;\r\n        this.materialIdToIndex = null;\r\n        this.objectUrlToFileName = null;\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n        this.loader = null;\r\n        this.materialIdToIndex = new Map ();\r\n        this.objectUrlToFileName = new Map ();\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        this.LoadModel (fileContent, onFinish);\r\n    }\r\n\r\n    LoadModel (fileContent, onFinish)\r\n    {\r\n        let isAllLoadersDone = false;\r\n        let loadingManager = new THREE.LoadingManager (() => {\r\n            isAllLoadersDone = true;\r\n        });\r\n\r\n        const mainFileUrl = CreateObjectUrl (fileContent);\r\n        loadingManager.setURLModifier ((url) => {\r\n            if (url === mainFileUrl) {\r\n                return url;\r\n            }\r\n            const name = GetFileName (url);\r\n            const extension = GetFileExtension (url);\r\n            if (extension.length > 0) {\r\n                const buffer = this.callbacks.getFileBuffer (url);\r\n                if (buffer !== null) {\r\n                    let objectUrl = CreateObjectUrl (buffer);\r\n                    this.objectUrlToFileName.set (objectUrl, name);\r\n                    return objectUrl;\r\n                }\r\n            }\r\n            return url;\r\n        });\r\n\r\n        const threeLoader = this.CreateLoader (loadingManager);\r\n        if (threeLoader === null) {\r\n            onFinish ();\r\n            return;\r\n        }\r\n\r\n        threeLoader.load (mainFileUrl,\r\n            (object) => {\r\n                WaitWhile (() => {\r\n                    if (isAllLoadersDone) {\r\n                        this.OnThreeObjectsLoaded (object, onFinish);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                });\r\n            },\r\n            () => {\r\n            },\r\n            (err) => {\r\n                this.SetError (err);\r\n                onFinish ();\r\n            }\r\n        );\r\n    }\r\n\r\n    OnThreeObjectsLoaded (loadedObject, onFinish)\r\n    {\r\n        function GetObjectTransformation (threeObject)\r\n        {\r\n            let matrix = new Matrix ().CreateIdentity ();\r\n            threeObject.updateMatrix ();\r\n            if (threeObject.matrix !== undefined && threeObject.matrix !== null) {\r\n                matrix.Set (threeObject.matrix.elements);\r\n            }\r\n            return new Transformation (matrix);\r\n        }\r\n\r\n        function AddObject (importer, model, threeObject, parentNode)\r\n        {\r\n            let node = new Node ();\r\n            if (threeObject.name !== undefined) {\r\n                node.SetName (threeObject.name);\r\n            }\r\n            node.SetTransformation (GetObjectTransformation (threeObject));\r\n            parentNode.AddChildNode (node);\r\n\r\n            for (let childObject of threeObject.children) {\r\n                AddObject (importer, model, childObject, node);\r\n            }\r\n            if (threeObject.isMesh && importer.IsMeshVisible (threeObject)) {\r\n                if (threeObject.children.length === 0) {\r\n                    node.SetType (NodeType.MeshNode);\r\n                }\r\n                let mesh = importer.ConvertThreeMesh (threeObject);\r\n                let meshIndex = model.AddMesh (mesh);\r\n                node.AddMeshIndex (meshIndex);\r\n            }\r\n        }\r\n\r\n        let mainObject = this.GetMainObject (loadedObject);\r\n        let rootNode = this.model.GetRootNode ();\r\n        rootNode.SetTransformation (GetObjectTransformation (mainObject));\r\n        for (let childObject of mainObject.children) {\r\n            AddObject (this, this.model, childObject, rootNode);\r\n        }\r\n\r\n        onFinish ();\r\n    }\r\n\r\n    ConvertThreeMesh (threeMesh)\r\n    {\r\n        let mesh = null;\r\n        if (Array.isArray (threeMesh.material)) {\r\n            mesh = ConvertThreeGeometryToMesh (threeMesh.geometry, null);\r\n            if (threeMesh.geometry.attributes.color === undefined || threeMesh.geometry.attributes.color === null) {\r\n                let materialIndices = [];\r\n                for (let i = 0; i < threeMesh.material.length; i++) {\r\n                    const material = threeMesh.material[i];\r\n                    const materialIndex = this.FindOrCreateMaterial (material);\r\n                    materialIndices.push (materialIndex);\r\n                }\r\n                for (let i = 0; i < threeMesh.geometry.groups.length; i++) {\r\n                    let group = threeMesh.geometry.groups[i];\r\n                    let groupEnd = null;\r\n                    if (group.count === Infinity) {\r\n                        groupEnd = mesh.TriangleCount ();\r\n                    } else {\r\n                        groupEnd = group.start / 3 + group.count / 3;\r\n                    }\r\n                    for (let j = group.start / 3; j < groupEnd; j++) {\r\n                        let triangle = mesh.GetTriangle (j);\r\n                        triangle.SetMaterial (materialIndices[group.materialIndex]);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            const materialIndex = this.FindOrCreateMaterial (threeMesh.material);\r\n            mesh = ConvertThreeGeometryToMesh (threeMesh.geometry, materialIndex);\r\n        }\r\n        if (threeMesh.name !== undefined && threeMesh.name !== null) {\r\n            mesh.SetName (threeMesh.name);\r\n        }\r\n        return mesh;\r\n    }\r\n\r\n    FindOrCreateMaterial (threeMaterial)\r\n    {\r\n        if (this.materialIdToIndex.has (threeMaterial.id)) {\r\n            return this.materialIdToIndex.get (threeMaterial.id);\r\n        }\r\n        let material = this.ConvertThreeMaterial (threeMaterial);\r\n        let materialIndex = this.model.AddMaterial (material);\r\n        this.materialIdToIndex.set (threeMaterial.id, materialIndex);\r\n        return materialIndex;\r\n    }\r\n\r\n    ConvertThreeMaterial (threeMaterial)\r\n    {\r\n        function CreateTexture (threeMap, objectUrlToFileName)\r\n        {\r\n            function GetDataUrl (img)\r\n            {\r\n                if (img.data !== undefined && img.data !== null) {\r\n                    let imageData = new ImageData (img.width, img.height);\r\n                    let imageSize = img.width * img.height * 4;\r\n                    for (let i = 0; i < imageSize; i++) {\r\n                        imageData.data[i] = img.data[i];\r\n                    }\r\n                    return THREE.ImageUtils.getDataURL (imageData);\r\n                } else {\r\n                    return THREE.ImageUtils.getDataURL (img);\r\n                }\r\n            }\r\n\r\n            if (threeMap === undefined || threeMap === null) {\r\n                return null;\r\n            }\r\n\r\n            if (threeMap.image === undefined || threeMap.image === null) {\r\n                return null;\r\n            }\r\n\r\n            try {\r\n                const dataUrl = GetDataUrl (threeMap.image);\r\n                const base64Buffer = Base64DataURIToArrayBuffer (dataUrl);\r\n                let texture = new TextureMap ();\r\n                let textureName = null;\r\n                if (objectUrlToFileName.has (threeMap.image.src)) {\r\n                    textureName = objectUrlToFileName.get (threeMap.image.src);\r\n                } else if (threeMap.name !== undefined && threeMap.name !== null) {\r\n                    textureName = threeMap.name + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);\r\n                } else {\r\n                    textureName = 'Embedded_' + threeMap.id.toString () + '.' + GetFileExtensionFromMimeType (base64Buffer.mimeType);\r\n                }\r\n                texture.name = textureName;\r\n                texture.mimeType = base64Buffer.mimeType;\r\n                texture.buffer = base64Buffer.buffer;\r\n                texture.rotation = threeMap.rotation;\r\n                texture.offset.x = threeMap.offset.x;\r\n                texture.offset.y = threeMap.offset.y;\r\n                texture.scale.x = threeMap.repeat.x;\r\n                texture.scale.y = threeMap.repeat.y;\r\n                return texture;\r\n            } catch (err) {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        let material = new PhongMaterial ();\r\n        material.name = threeMaterial.name;\r\n        material.color = ConvertThreeColorToColor (threeMaterial.color);\r\n        material.opacity = threeMaterial.opacity;\r\n        material.transparent = threeMaterial.transparent;\r\n        material.alphaTest = threeMaterial.alphaTest;\r\n        if (threeMaterial.type === 'MeshPhongMaterial') {\r\n            material.specular = ConvertThreeColorToColor (threeMaterial.specular);\r\n            material.shininess = threeMaterial.shininess / 100.0;\r\n        }\r\n        material.diffuseMap = CreateTexture (threeMaterial.map, this.objectUrlToFileName);\r\n        material.normalMap = CreateTexture (threeMaterial.normalMap, this.objectUrlToFileName);\r\n        material.bumpMap = CreateTexture (threeMaterial.bumpMap, this.objectUrlToFileName);\r\n\r\n        return material;\r\n    }\r\n}\r\n\r\nexport class ImporterThreeFbx extends ImporterThreeBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'fbx';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Y;\r\n    }\r\n\r\n    CreateLoader (manager)\r\n    {\r\n        manager.addHandler (/\\.tga$/i, new TGALoader (manager));\r\n        return new FBXLoader (manager);\r\n    }\r\n\r\n    GetMainObject (loadedObject)\r\n    {\r\n        return loadedObject;\r\n    }\r\n}\r\n\r\nexport class ImporterThreeDae extends ImporterThreeBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'dae';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Y;\r\n    }\r\n\r\n    CreateLoader (manager)\r\n    {\r\n        manager.addHandler (/\\.tga$/i, new TGALoader (manager));\r\n        return new ColladaLoader (manager);\r\n    }\r\n\r\n    GetMainObject (loadedObject)\r\n    {\r\n        return loadedObject.scene;\r\n    }\r\n}\r\n\r\nexport class ImporterThreeWrl extends ImporterThreeBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'wrl';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Y;\r\n    }\r\n\r\n    CreateLoader (manager)\r\n    {\r\n        return new VRMLLoader (manager);\r\n    }\r\n\r\n    GetMainObject (loadedObject)\r\n    {\r\n        return loadedObject;\r\n    }\r\n\r\n    IsMeshVisible (mesh)\r\n    {\r\n        let isVisible = true;\r\n        if (Array.isArray (mesh.material)) {\r\n            for (let i = 0; i < mesh.material.length; i++) {\r\n                if (mesh.material[i].side === THREE.BackSide) {\r\n                    isVisible = false;\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            isVisible = (mesh.material.side !== THREE.BackSide);\r\n        }\r\n        return isVisible;\r\n    }\r\n}\r\n\r\nexport class ImporterThree3mf extends ImporterThreeBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === '3mf';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Z;\r\n    }\r\n\r\n    CreateLoader (manager)\r\n    {\r\n        return new ThreeMFLoader (manager);\r\n    }\r\n\r\n    GetMainObject (loadedObject)\r\n    {\r\n        return loadedObject;\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}