{"ast":null,"code":"export class TaskRunner {\n  constructor() {\n    this.count = null;\n    this.current = null;\n    this.callbacks = null;\n  }\n\n  Run(count, callbacks) {\n    this.count = count;\n    this.current = 0;\n    this.callbacks = callbacks;\n\n    if (count === 0) {\n      this.TaskReady();\n    } else {\n      this.RunOnce();\n    }\n  }\n\n  RunBatch(count, batchCount, callbacks) {\n    let stepCount = 0;\n\n    if (count > 0) {\n      stepCount = parseInt((count - 1) / batchCount, 10) + 1;\n    }\n\n    this.Run(stepCount, {\n      runTask: (index, ready) => {\n        const firstIndex = index * batchCount;\n        const lastIndex = Math.min((index + 1) * batchCount, count) - 1;\n        callbacks.runTask(firstIndex, lastIndex, ready);\n      },\n      onReady: callbacks.onReady\n    });\n  }\n\n  RunOnce() {\n    setTimeout(() => {\n      this.callbacks.runTask(this.current, this.TaskReady.bind(this));\n    }, 0);\n  }\n\n  TaskReady() {\n    this.current += 1;\n\n    if (this.current < this.count) {\n      this.RunOnce();\n    } else {\n      if (this.callbacks.onReady) {\n        this.callbacks.onReady();\n      }\n    }\n  }\n\n}\nexport function RunTaskAsync(task) {\n  setTimeout(() => {\n    task();\n  }, 10);\n}\nexport function RunTasks(count, callbacks) {\n  let taskRunner = new TaskRunner();\n  taskRunner.Run(count, callbacks);\n}\nexport function RunTasksBatch(count, batchCount, callbacks) {\n  let taskRunner = new TaskRunner();\n  taskRunner.RunBatch(count, batchCount, callbacks);\n}\nexport function WaitWhile(expression) {\n  function Waiter(expression) {\n    if (expression()) {\n      setTimeout(() => {\n        Waiter(expression);\n      }, 10);\n    }\n  }\n\n  Waiter(expression);\n}","map":{"version":3,"names":["TaskRunner","constructor","count","current","callbacks","Run","TaskReady","RunOnce","RunBatch","batchCount","stepCount","parseInt","runTask","index","ready","firstIndex","lastIndex","Math","min","onReady","setTimeout","bind","RunTaskAsync","task","RunTasks","taskRunner","RunTasksBatch","WaitWhile","expression","Waiter"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/core/taskrunner.js"],"sourcesContent":["export class TaskRunner\r\n{\r\n    constructor ()\r\n    {\r\n        this.count = null;\r\n        this.current = null;\r\n        this.callbacks = null;\r\n    }\r\n\r\n    Run (count, callbacks)\r\n    {\r\n        this.count = count;\r\n        this.current = 0;\r\n        this.callbacks = callbacks;\r\n        if (count === 0) {\r\n            this.TaskReady ();\r\n        } else {\r\n            this.RunOnce ();\r\n        }\r\n    }\r\n\r\n    RunBatch (count, batchCount, callbacks)\r\n    {\r\n        let stepCount = 0;\r\n        if (count > 0) {\r\n            stepCount = parseInt ((count - 1) / batchCount, 10) + 1;\r\n        }\r\n        this.Run (stepCount, {\r\n            runTask : (index, ready) => {\r\n                const firstIndex = index * batchCount;\r\n                const lastIndex = Math.min ((index + 1) * batchCount, count) - 1;\r\n                callbacks.runTask (firstIndex, lastIndex, ready);\r\n            },\r\n            onReady : callbacks.onReady\r\n        });\r\n    }\r\n\r\n    RunOnce ()\r\n    {\r\n        setTimeout (() => {\r\n            this.callbacks.runTask (this.current, this.TaskReady.bind (this));\r\n        }, 0);\r\n    }\r\n\r\n    TaskReady ()\r\n    {\r\n        this.current += 1;\r\n        if (this.current < this.count) {\r\n            this.RunOnce ();\r\n        } else {\r\n            if (this.callbacks.onReady) {\r\n                this.callbacks.onReady ();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function RunTaskAsync (task)\r\n{\r\n    setTimeout (() => {\r\n        task ();\r\n    }, 10);\r\n}\r\n\r\nexport function RunTasks (count, callbacks)\r\n{\r\n    let taskRunner = new TaskRunner ();\r\n    taskRunner.Run (count, callbacks);\r\n}\r\n\r\nexport function RunTasksBatch (count, batchCount, callbacks)\r\n{\r\n    let taskRunner = new TaskRunner ();\r\n    taskRunner.RunBatch (count, batchCount, callbacks);\r\n}\r\n\r\nexport function WaitWhile (expression)\r\n{\r\n    function Waiter (expression)\r\n    {\r\n        if (expression ()) {\r\n            setTimeout (() => {\r\n                Waiter (expression);\r\n            }, 10);\r\n        }\r\n    }\r\n    Waiter (expression);\r\n}\r\n"],"mappings":"AAAA,OAAO,MAAMA,UAAN,CACP;EACIC,WAAW,GACX;IACI,KAAKC,KAAL,GAAa,IAAb;IACA,KAAKC,OAAL,GAAe,IAAf;IACA,KAAKC,SAAL,GAAiB,IAAjB;EACH;;EAEDC,GAAG,CAAEH,KAAF,EAASE,SAAT,EACH;IACI,KAAKF,KAAL,GAAaA,KAAb;IACA,KAAKC,OAAL,GAAe,CAAf;IACA,KAAKC,SAAL,GAAiBA,SAAjB;;IACA,IAAIF,KAAK,KAAK,CAAd,EAAiB;MACb,KAAKI,SAAL;IACH,CAFD,MAEO;MACH,KAAKC,OAAL;IACH;EACJ;;EAEDC,QAAQ,CAAEN,KAAF,EAASO,UAAT,EAAqBL,SAArB,EACR;IACI,IAAIM,SAAS,GAAG,CAAhB;;IACA,IAAIR,KAAK,GAAG,CAAZ,EAAe;MACXQ,SAAS,GAAGC,QAAQ,CAAE,CAACT,KAAK,GAAG,CAAT,IAAcO,UAAhB,EAA4B,EAA5B,CAAR,GAA0C,CAAtD;IACH;;IACD,KAAKJ,GAAL,CAAUK,SAAV,EAAqB;MACjBE,OAAO,EAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;QACxB,MAAMC,UAAU,GAAGF,KAAK,GAAGJ,UAA3B;QACA,MAAMO,SAAS,GAAGC,IAAI,CAACC,GAAL,CAAU,CAACL,KAAK,GAAG,CAAT,IAAcJ,UAAxB,EAAoCP,KAApC,IAA6C,CAA/D;QACAE,SAAS,CAACQ,OAAV,CAAmBG,UAAnB,EAA+BC,SAA/B,EAA0CF,KAA1C;MACH,CALgB;MAMjBK,OAAO,EAAGf,SAAS,CAACe;IANH,CAArB;EAQH;;EAEDZ,OAAO,GACP;IACIa,UAAU,CAAE,MAAM;MACd,KAAKhB,SAAL,CAAeQ,OAAf,CAAwB,KAAKT,OAA7B,EAAsC,KAAKG,SAAL,CAAee,IAAf,CAAqB,IAArB,CAAtC;IACH,CAFS,EAEP,CAFO,CAAV;EAGH;;EAEDf,SAAS,GACT;IACI,KAAKH,OAAL,IAAgB,CAAhB;;IACA,IAAI,KAAKA,OAAL,GAAe,KAAKD,KAAxB,EAA+B;MAC3B,KAAKK,OAAL;IACH,CAFD,MAEO;MACH,IAAI,KAAKH,SAAL,CAAee,OAAnB,EAA4B;QACxB,KAAKf,SAAL,CAAee,OAAf;MACH;IACJ;EACJ;;AArDL;AAwDA,OAAO,SAASG,YAAT,CAAuBC,IAAvB,EACP;EACIH,UAAU,CAAE,MAAM;IACdG,IAAI;EACP,CAFS,EAEP,EAFO,CAAV;AAGH;AAED,OAAO,SAASC,QAAT,CAAmBtB,KAAnB,EAA0BE,SAA1B,EACP;EACI,IAAIqB,UAAU,GAAG,IAAIzB,UAAJ,EAAjB;EACAyB,UAAU,CAACpB,GAAX,CAAgBH,KAAhB,EAAuBE,SAAvB;AACH;AAED,OAAO,SAASsB,aAAT,CAAwBxB,KAAxB,EAA+BO,UAA/B,EAA2CL,SAA3C,EACP;EACI,IAAIqB,UAAU,GAAG,IAAIzB,UAAJ,EAAjB;EACAyB,UAAU,CAACjB,QAAX,CAAqBN,KAArB,EAA4BO,UAA5B,EAAwCL,SAAxC;AACH;AAED,OAAO,SAASuB,SAAT,CAAoBC,UAApB,EACP;EACI,SAASC,MAAT,CAAiBD,UAAjB,EACA;IACI,IAAIA,UAAU,EAAd,EAAmB;MACfR,UAAU,CAAE,MAAM;QACdS,MAAM,CAAED,UAAF,CAAN;MACH,CAFS,EAEP,EAFO,CAAV;IAGH;EACJ;;EACDC,MAAM,CAAED,UAAF,CAAN;AACH"},"metadata":{},"sourceType":"module"}