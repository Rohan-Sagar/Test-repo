{"ast":null,"code":"import { BinaryWriter } from '../io/binarywriter.js';\nimport { FileFormat } from '../io/fileutils.js';\nimport { TextWriter } from '../io/textwriter.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\nexport class ExporterStl extends ExporterBase {\n  constructor() {\n    super();\n  }\n\n  CanExport(format, extension) {\n    return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'stl';\n  }\n\n  ExportContent(exporterModel, format, files, onFinish) {\n    if (format === FileFormat.Text) {\n      this.ExportText(exporterModel, files);\n    } else {\n      this.ExportBinary(exporterModel, files);\n    }\n\n    onFinish();\n  }\n\n  ExportText(exporterModel, files) {\n    let stlFile = new ExportedFile('model.stl');\n    files.push(stlFile);\n    let stlWriter = new TextWriter();\n    stlWriter.WriteLine('solid Model');\n    exporterModel.EnumerateTrianglesWithNormals((v0, v1, v2, normal) => {\n      stlWriter.WriteArrayLine(['facet', 'normal', normal.x, normal.y, normal.z]);\n      stlWriter.Indent(1);\n      stlWriter.WriteLine('outer loop');\n      stlWriter.Indent(1);\n      stlWriter.WriteArrayLine(['vertex', v0.x, v0.y, v0.z]);\n      stlWriter.WriteArrayLine(['vertex', v1.x, v1.y, v1.z]);\n      stlWriter.WriteArrayLine(['vertex', v2.x, v2.y, v2.z]);\n      stlWriter.Indent(-1);\n      stlWriter.WriteLine('endloop');\n      stlWriter.Indent(-1);\n      stlWriter.WriteLine('endfacet');\n    });\n    stlWriter.WriteLine('endsolid Model');\n    stlFile.SetTextContent(stlWriter.GetText());\n  }\n\n  ExportBinary(exporterModel, files) {\n    let stlFile = new ExportedFile('model.stl');\n    files.push(stlFile);\n    let triangleCount = exporterModel.TriangleCount();\n    let headerSize = 80;\n    let fullByteLength = headerSize + 4 + triangleCount * 50;\n    let stlWriter = new BinaryWriter(fullByteLength, true);\n\n    for (let i = 0; i < headerSize; i++) {\n      stlWriter.WriteUnsignedCharacter8(0);\n    }\n\n    stlWriter.WriteUnsignedInteger32(triangleCount);\n    exporterModel.EnumerateTrianglesWithNormals((v0, v1, v2, normal) => {\n      stlWriter.WriteFloat32(normal.x);\n      stlWriter.WriteFloat32(normal.y);\n      stlWriter.WriteFloat32(normal.z);\n      stlWriter.WriteFloat32(v0.x);\n      stlWriter.WriteFloat32(v0.y);\n      stlWriter.WriteFloat32(v0.z);\n      stlWriter.WriteFloat32(v1.x);\n      stlWriter.WriteFloat32(v1.y);\n      stlWriter.WriteFloat32(v1.z);\n      stlWriter.WriteFloat32(v2.x);\n      stlWriter.WriteFloat32(v2.y);\n      stlWriter.WriteFloat32(v2.z);\n      stlWriter.WriteUnsignedInteger16(0);\n    });\n    stlFile.SetBufferContent(stlWriter.GetBuffer());\n  }\n\n}","map":{"version":3,"names":["BinaryWriter","FileFormat","TextWriter","ExportedFile","ExporterBase","ExporterStl","constructor","CanExport","format","extension","Text","Binary","ExportContent","exporterModel","files","onFinish","ExportText","ExportBinary","stlFile","push","stlWriter","WriteLine","EnumerateTrianglesWithNormals","v0","v1","v2","normal","WriteArrayLine","x","y","z","Indent","SetTextContent","GetText","triangleCount","TriangleCount","headerSize","fullByteLength","i","WriteUnsignedCharacter8","WriteUnsignedInteger32","WriteFloat32","WriteUnsignedInteger16","SetBufferContent","GetBuffer"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/export/exporterstl.js"],"sourcesContent":["import { BinaryWriter } from '../io/binarywriter.js';\r\nimport { FileFormat } from '../io/fileutils.js';\r\nimport { TextWriter } from '../io/textwriter.js';\r\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\r\n\r\nexport class ExporterStl extends ExporterBase\r\n{\r\n\tconstructor ()\r\n\t{\r\n\t\tsuper ();\r\n\t}\r\n\r\n    CanExport (format, extension)\r\n    {\r\n        return (format === FileFormat.Text || format === FileFormat.Binary) && extension === 'stl';\r\n    }\r\n\r\n\tExportContent (exporterModel, format, files, onFinish)\r\n\t{\r\n\t\tif (format === FileFormat.Text) {\r\n\t\t\tthis.ExportText (exporterModel, files);\r\n\t\t} else {\r\n\t\t\tthis.ExportBinary (exporterModel, files);\r\n\t\t}\r\n\t\tonFinish ();\r\n\t}\r\n\r\n\tExportText (exporterModel, files)\r\n\t{\r\n\t\tlet stlFile = new ExportedFile ('model.stl');\r\n\t\tfiles.push (stlFile);\r\n\r\n\t\tlet stlWriter = new TextWriter ();\r\n\t\tstlWriter.WriteLine ('solid Model');\r\n\t\texporterModel.EnumerateTrianglesWithNormals ((v0, v1, v2, normal) => {\r\n\t\t\tstlWriter.WriteArrayLine (['facet', 'normal', normal.x, normal.y, normal.z]);\r\n\t\t\tstlWriter.Indent (1);\r\n\t\t\tstlWriter.WriteLine ('outer loop');\r\n\t\t\tstlWriter.Indent (1);\r\n\t\t\tstlWriter.WriteArrayLine (['vertex', v0.x, v0.y, v0.z]);\r\n\t\t\tstlWriter.WriteArrayLine (['vertex', v1.x, v1.y, v1.z]);\r\n\t\t\tstlWriter.WriteArrayLine (['vertex', v2.x, v2.y, v2.z]);\r\n\t\t\tstlWriter.Indent (-1);\r\n\t\t\tstlWriter.WriteLine ('endloop');\r\n\t\t\tstlWriter.Indent (-1);\r\n\t\t\tstlWriter.WriteLine ('endfacet');\r\n\t\t});\r\n\t\tstlWriter.WriteLine ('endsolid Model');\r\n\r\n\t\tstlFile.SetTextContent (stlWriter.GetText ());\r\n\t}\r\n\r\n\tExportBinary (exporterModel, files)\r\n\t{\r\n\t\tlet stlFile = new ExportedFile ('model.stl');\r\n\t\tfiles.push (stlFile);\r\n\r\n\t\tlet triangleCount = exporterModel.TriangleCount ();\r\n\t\tlet headerSize = 80;\r\n\t\tlet fullByteLength = headerSize + 4 + triangleCount * 50;\r\n\t\tlet stlWriter = new BinaryWriter (fullByteLength, true);\r\n\r\n\t\tfor (let i = 0; i < headerSize; i++) {\r\n\t\t\tstlWriter.WriteUnsignedCharacter8 (0);\r\n\t\t}\r\n\r\n\t\tstlWriter.WriteUnsignedInteger32 (triangleCount);\r\n\t\texporterModel.EnumerateTrianglesWithNormals ((v0, v1, v2, normal) => {\r\n\t\t\tstlWriter.WriteFloat32 (normal.x);\r\n\t\t\tstlWriter.WriteFloat32 (normal.y);\r\n\t\t\tstlWriter.WriteFloat32 (normal.z);\r\n\r\n\t\t\tstlWriter.WriteFloat32 (v0.x);\r\n\t\t\tstlWriter.WriteFloat32 (v0.y);\r\n\t\t\tstlWriter.WriteFloat32 (v0.z);\r\n\r\n\t\t\tstlWriter.WriteFloat32 (v1.x);\r\n\t\t\tstlWriter.WriteFloat32 (v1.y);\r\n\t\t\tstlWriter.WriteFloat32 (v1.z);\r\n\r\n\t\t\tstlWriter.WriteFloat32 (v2.x);\r\n\t\t\tstlWriter.WriteFloat32 (v2.y);\r\n\t\t\tstlWriter.WriteFloat32 (v2.z);\r\n\r\n\t\t\tstlWriter.WriteUnsignedInteger16 (0);\r\n\t\t});\r\n\r\n\t\tstlFile.SetBufferContent (stlWriter.GetBuffer ());\r\n\t}\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}