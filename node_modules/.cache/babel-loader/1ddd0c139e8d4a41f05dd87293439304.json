{"ast":null,"code":"import { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { RGBColor, ColorComponentFromFloat } from '../model/color.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { ColorToMaterialConverter, ParametersFromLine, ReadLines } from './importerutils.js';\nexport class ImporterOff extends ImporterBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'off';\n  }\n\n  GetUpDirection() {\n    return Direction.Y;\n  }\n\n  ClearContent() {\n    this.mesh = null;\n    this.status = null;\n    this.colorToMaterial = null;\n  }\n\n  ResetContent() {\n    this.mesh = new Mesh();\n    this.model.AddMeshToRootNode(this.mesh);\n    this.status = {\n      vertexCount: 0,\n      faceCount: 0,\n      foundVertex: 0,\n      foundFace: 0\n    };\n    this.colorToMaterial = new ColorToMaterialConverter(this.model);\n  }\n\n  ImportContent(fileContent, onFinish) {\n    let textContent = ArrayBufferToUtf8String(fileContent);\n    ReadLines(textContent, line => {\n      if (!this.WasError()) {\n        this.ProcessLine(line);\n      }\n    });\n    onFinish();\n  }\n\n  ProcessLine(line) {\n    function CreateColorComponent(str) {\n      if (str.indexOf('.') !== -1) {\n        return ColorComponentFromFloat(parseFloat(str));\n      } else {\n        return parseInt(str, 10);\n      }\n    }\n\n    if (line[0] === '#') {\n      return;\n    }\n\n    let parameters = ParametersFromLine(line, '#');\n\n    if (parameters.length === 0) {\n      return;\n    }\n\n    if (parameters[0] === 'OFF') {\n      return;\n    }\n\n    if (this.status.vertexCount === 0 && this.status.faceCount === 0) {\n      if (parameters.length > 1) {\n        this.status.vertexCount = parseInt(parameters[0], 10);\n        this.status.faceCount = parseInt(parameters[1], 10);\n      }\n\n      return;\n    }\n\n    if (this.status.foundVertex < this.status.vertexCount) {\n      if (parameters.length >= 3) {\n        this.mesh.AddVertex(new Coord3D(parseFloat(parameters[0]), parseFloat(parameters[1]), parseFloat(parameters[2])));\n        this.status.foundVertex += 1;\n      }\n\n      if (parameters.length >= 6) {\n        this.mesh.AddVertexColor(new RGBColor(CreateColorComponent(parameters[3]), CreateColorComponent(parameters[4]), CreateColorComponent(parameters[5])));\n      }\n\n      return;\n    }\n\n    let hasVertexColors = this.mesh.VertexCount() === this.mesh.VertexColorCount();\n\n    if (this.status.foundFace < this.status.faceCount) {\n      if (parameters.length >= 4) {\n        let vertexCount = parseInt(parameters[0], 10);\n\n        if (parameters.length < vertexCount + 1) {\n          return;\n        }\n\n        let materialIndex = null;\n\n        if (!hasVertexColors && parameters.length >= vertexCount + 4) {\n          let color = new RGBColor(CreateColorComponent(parameters[vertexCount + 1]), CreateColorComponent(parameters[vertexCount + 2]), CreateColorComponent(parameters[vertexCount + 3]));\n          materialIndex = this.colorToMaterial.GetMaterialIndex(color.r, color.g, color.b);\n        }\n\n        for (let i = 0; i < vertexCount - 2; i++) {\n          let v0 = parseInt(parameters[1]);\n          let v1 = parseInt(parameters[i + 2]);\n          let v2 = parseInt(parameters[i + 3]);\n          let triangle = new Triangle(v0, v1, v2);\n\n          if (hasVertexColors) {\n            triangle.SetVertexColors(v0, v1, v2);\n          } else {\n            triangle.SetMaterial(materialIndex);\n          }\n\n          this.mesh.AddTriangle(triangle);\n        }\n\n        this.status.foundFace += 1;\n      }\n\n      return;\n    }\n  }\n\n}","map":{"version":3,"names":["Coord3D","Direction","ArrayBufferToUtf8String","RGBColor","ColorComponentFromFloat","Mesh","Triangle","ImporterBase","ColorToMaterialConverter","ParametersFromLine","ReadLines","ImporterOff","constructor","CanImportExtension","extension","GetUpDirection","Y","ClearContent","mesh","status","colorToMaterial","ResetContent","model","AddMeshToRootNode","vertexCount","faceCount","foundVertex","foundFace","ImportContent","fileContent","onFinish","textContent","line","WasError","ProcessLine","CreateColorComponent","str","indexOf","parseFloat","parseInt","parameters","length","AddVertex","AddVertexColor","hasVertexColors","VertexCount","VertexColorCount","materialIndex","color","GetMaterialIndex","r","g","b","i","v0","v1","v2","triangle","SetVertexColors","SetMaterial","AddTriangle"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importeroff.js"],"sourcesContent":["import { Coord3D } from '../geometry/coord3d.js';\r\nimport { Direction } from '../geometry/geometry.js';\r\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\r\nimport { RGBColor, ColorComponentFromFloat } from '../model/color.js';\r\nimport { Mesh } from '../model/mesh.js';\r\nimport { Triangle } from '../model/triangle.js';\r\nimport { ImporterBase } from './importerbase.js';\r\nimport { ColorToMaterialConverter, ParametersFromLine, ReadLines } from './importerutils.js';\r\n\r\nexport class ImporterOff extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'off';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Y;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n        this.mesh = null;\r\n        this.status = null;\r\n        this.colorToMaterial = null;\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n        this.mesh = new Mesh ();\r\n        this.model.AddMeshToRootNode (this.mesh);\r\n        this.status = {\r\n            vertexCount : 0,\r\n            faceCount : 0,\r\n            foundVertex : 0,\r\n            foundFace : 0\r\n        };\r\n        this.colorToMaterial = new ColorToMaterialConverter (this.model);\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        let textContent = ArrayBufferToUtf8String (fileContent);\r\n        ReadLines (textContent, (line) => {\r\n            if (!this.WasError ()) {\r\n                this.ProcessLine (line);\r\n            }\r\n        });\r\n        onFinish ();\r\n    }\r\n\r\n    ProcessLine (line)\r\n    {\r\n        function CreateColorComponent (str)\r\n        {\r\n            if (str.indexOf ('.') !== -1) {\r\n                return ColorComponentFromFloat (parseFloat (str));\r\n            } else {\r\n                return parseInt (str, 10);\r\n            }\r\n        }\r\n\r\n        if (line[0] === '#') {\r\n            return;\r\n        }\r\n\r\n        let parameters = ParametersFromLine (line, '#');\r\n        if (parameters.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (parameters[0] === 'OFF') {\r\n            return;\r\n        }\r\n\r\n        if (this.status.vertexCount === 0 && this.status.faceCount === 0) {\r\n            if (parameters.length > 1) {\r\n                this.status.vertexCount = parseInt (parameters[0], 10);\r\n                this.status.faceCount = parseInt (parameters[1], 10);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this.status.foundVertex < this.status.vertexCount) {\r\n            if (parameters.length >= 3) {\r\n                this.mesh.AddVertex (new Coord3D (\r\n                    parseFloat (parameters[0]),\r\n                    parseFloat (parameters[1]),\r\n                    parseFloat (parameters[2])\r\n                ));\r\n                this.status.foundVertex += 1;\r\n            }\r\n            if (parameters.length >= 6) {\r\n                this.mesh.AddVertexColor (new RGBColor (\r\n                    CreateColorComponent (parameters[3]),\r\n                    CreateColorComponent (parameters[4]),\r\n                    CreateColorComponent (parameters[5])\r\n                ));\r\n            }\r\n            return;\r\n        }\r\n\r\n        let hasVertexColors = (this.mesh.VertexCount () ===this.mesh.VertexColorCount ());\r\n        if (this.status.foundFace < this.status.faceCount) {\r\n            if (parameters.length >= 4) {\r\n                let vertexCount = parseInt (parameters[0], 10);\r\n                if (parameters.length < vertexCount + 1) {\r\n                    return;\r\n                }\r\n                let materialIndex = null;\r\n                if (!hasVertexColors && parameters.length >= vertexCount + 4) {\r\n                    let color = new RGBColor (\r\n                        CreateColorComponent (parameters[vertexCount + 1]),\r\n                        CreateColorComponent (parameters[vertexCount + 2]),\r\n                        CreateColorComponent (parameters[vertexCount + 3])\r\n                    );\r\n                    materialIndex = this.colorToMaterial.GetMaterialIndex (color.r, color.g, color.b);\r\n                }\r\n                for (let i = 0; i < vertexCount - 2; i++) {\r\n                    let v0 = parseInt (parameters[1]);\r\n                    let v1 = parseInt (parameters[i + 2]);\r\n                    let v2 = parseInt (parameters[i + 3]);\r\n                    let triangle = new Triangle (v0, v1, v2);\r\n                    if (hasVertexColors) {\r\n                        triangle.SetVertexColors (v0, v1, v2);\r\n                    } else {\r\n                        triangle.SetMaterial (materialIndex);\r\n                    }\r\n                    this.mesh.AddTriangle (triangle);\r\n                }\r\n                this.status.foundFace += 1;\r\n            }\r\n            return;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}