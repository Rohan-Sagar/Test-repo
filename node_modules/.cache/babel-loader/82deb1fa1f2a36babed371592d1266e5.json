{"ast":null,"code":"import { BoundingBoxCalculator3D } from '../geometry/box3d.js';\nimport { Octree } from '../geometry/octree.js';\nimport { GetMeshType, MeshType } from './meshutils.js';\nimport { Model } from './model.js';\nimport { Topology } from './topology.js';\nexport function IsModelEmpty(model) {\n  let isEmpty = true;\n  model.EnumerateMeshInstances(meshInstance => {\n    if (GetMeshType(meshInstance) !== MeshType.Empty) {\n      isEmpty = false;\n    }\n  });\n  return isEmpty;\n}\nexport function GetBoundingBox(object3D) {\n  let calculator = new BoundingBoxCalculator3D();\n  object3D.EnumerateVertices(vertex => {\n    calculator.AddPoint(vertex);\n  });\n  return calculator.GetBox();\n}\nexport function GetTopology(object3D) {\n  function GetVertexIndex(vertex, octree, topology) {\n    let index = octree.FindPoint(vertex);\n\n    if (index === null) {\n      index = topology.AddVertex();\n      octree.AddPoint(vertex, index);\n    }\n\n    return index;\n  }\n\n  let boundingBox = GetBoundingBox(object3D);\n  let octree = new Octree(boundingBox);\n  let topology = new Topology();\n  object3D.EnumerateTriangleVertices((v0, v1, v2) => {\n    let v0Index = GetVertexIndex(v0, octree, topology);\n    let v1Index = GetVertexIndex(v1, octree, topology);\n    let v2Index = GetVertexIndex(v2, octree, topology);\n    topology.AddTriangle(v0Index, v1Index, v2Index);\n  });\n  return topology;\n}\nexport function IsTwoManifold(object3D) {\n  function GetEdgeOrientationInTriangle(topology, triangleIndex, edgeIndex) {\n    const triangle = topology.triangles[triangleIndex];\n    const triEdge1 = topology.triangleEdges[triangle.triEdge1];\n    const triEdge2 = topology.triangleEdges[triangle.triEdge2];\n    const triEdge3 = topology.triangleEdges[triangle.triEdge3];\n\n    if (triEdge1.edge === edgeIndex) {\n      return triEdge1.reversed;\n    }\n\n    if (triEdge2.edge === edgeIndex) {\n      return triEdge2.reversed;\n    }\n\n    if (triEdge3.edge === edgeIndex) {\n      return triEdge3.reversed;\n    }\n\n    return null;\n  }\n\n  if (object3D instanceof Model) {\n    let isTwoManifold = true;\n    object3D.EnumerateMeshInstances(meshInstance => {\n      if (isTwoManifold) {\n        isTwoManifold = IsTwoManifold(meshInstance);\n      }\n    });\n    return isTwoManifold;\n  } else {\n    const topology = GetTopology(object3D);\n\n    for (let edgeIndex = 0; edgeIndex < topology.edges.length; edgeIndex++) {\n      const edge = topology.edges[edgeIndex];\n\n      if (edge.triangles.length !== 2) {\n        return false;\n      }\n\n      let edgeOrientation1 = GetEdgeOrientationInTriangle(topology, edge.triangles[0], edgeIndex);\n      let edgeOrientation2 = GetEdgeOrientationInTriangle(topology, edge.triangles[1], edgeIndex);\n\n      if (edgeOrientation1 === null || edgeOrientation2 === null || edgeOrientation1 === edgeOrientation2) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\nexport function HasDefaultMaterial(model) {\n  for (let i = 0; i < model.MaterialCount(); i++) {\n    let material = model.GetMaterial(i);\n\n    if (material.isDefault && !material.vertexColors) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function ReplaceDefaultMaterialColor(model, color) {\n  for (let i = 0; i < model.MaterialCount(); i++) {\n    let material = model.GetMaterial(i);\n\n    if (material.isDefault) {\n      material.color = color;\n    }\n  }\n}","map":{"version":3,"names":["BoundingBoxCalculator3D","Octree","GetMeshType","MeshType","Model","Topology","IsModelEmpty","model","isEmpty","EnumerateMeshInstances","meshInstance","Empty","GetBoundingBox","object3D","calculator","EnumerateVertices","vertex","AddPoint","GetBox","GetTopology","GetVertexIndex","octree","topology","index","FindPoint","AddVertex","boundingBox","EnumerateTriangleVertices","v0","v1","v2","v0Index","v1Index","v2Index","AddTriangle","IsTwoManifold","GetEdgeOrientationInTriangle","triangleIndex","edgeIndex","triangle","triangles","triEdge1","triangleEdges","triEdge2","triEdge3","edge","reversed","isTwoManifold","edges","length","edgeOrientation1","edgeOrientation2","HasDefaultMaterial","i","MaterialCount","material","GetMaterial","isDefault","vertexColors","ReplaceDefaultMaterialColor","color"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/modelutils.js"],"sourcesContent":["import { BoundingBoxCalculator3D } from '../geometry/box3d.js';\r\nimport { Octree } from '../geometry/octree.js';\r\nimport { GetMeshType, MeshType } from './meshutils.js';\r\nimport { Model } from './model.js';\r\nimport { Topology } from './topology.js';\r\n\r\nexport function IsModelEmpty (model)\r\n{\r\n    let isEmpty = true;\r\n    model.EnumerateMeshInstances ((meshInstance) => {\r\n        if (GetMeshType (meshInstance) !== MeshType.Empty) {\r\n            isEmpty = false;\r\n        }\r\n    });\r\n    return isEmpty;\r\n}\r\n\r\nexport function GetBoundingBox (object3D)\r\n{\r\n    let calculator = new BoundingBoxCalculator3D ();\r\n    object3D.EnumerateVertices ((vertex) => {\r\n        calculator.AddPoint (vertex);\r\n    });\r\n    return calculator.GetBox ();\r\n}\r\n\r\nexport function GetTopology (object3D)\r\n{\r\n    function GetVertexIndex (vertex, octree, topology)\r\n    {\r\n        let index = octree.FindPoint (vertex);\r\n        if (index === null) {\r\n            index = topology.AddVertex ();\r\n            octree.AddPoint (vertex, index);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    let boundingBox = GetBoundingBox (object3D);\r\n    let octree = new Octree (boundingBox);\r\n    let topology = new Topology ();\r\n\r\n    object3D.EnumerateTriangleVertices ((v0, v1, v2) => {\r\n        let v0Index = GetVertexIndex (v0, octree, topology);\r\n        let v1Index = GetVertexIndex (v1, octree, topology);\r\n        let v2Index = GetVertexIndex (v2, octree, topology);\r\n        topology.AddTriangle (v0Index, v1Index, v2Index);\r\n    });\r\n    return topology;\r\n}\r\n\r\nexport function IsTwoManifold (object3D)\r\n{\r\n    function GetEdgeOrientationInTriangle (topology, triangleIndex, edgeIndex)\r\n    {\r\n        const triangle = topology.triangles[triangleIndex];\r\n        const triEdge1 = topology.triangleEdges[triangle.triEdge1];\r\n        const triEdge2 = topology.triangleEdges[triangle.triEdge2];\r\n        const triEdge3 = topology.triangleEdges[triangle.triEdge3];\r\n        if (triEdge1.edge === edgeIndex) {\r\n            return triEdge1.reversed;\r\n        }\r\n        if (triEdge2.edge === edgeIndex) {\r\n            return triEdge2.reversed;\r\n        }\r\n        if (triEdge3.edge === edgeIndex) {\r\n            return triEdge3.reversed;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    if (object3D instanceof Model) {\r\n        let isTwoManifold = true;\r\n        object3D.EnumerateMeshInstances ((meshInstance) => {\r\n            if (isTwoManifold) {\r\n                isTwoManifold = IsTwoManifold (meshInstance);\r\n            }\r\n        });\r\n        return isTwoManifold;\r\n    } else {\r\n        const topology = GetTopology (object3D);\r\n        for (let edgeIndex = 0; edgeIndex < topology.edges.length; edgeIndex++) {\r\n            const edge = topology.edges[edgeIndex];\r\n            if (edge.triangles.length !== 2) {\r\n                return false;\r\n            }\r\n\r\n            let edgeOrientation1 = GetEdgeOrientationInTriangle (topology, edge.triangles[0], edgeIndex);\r\n            let edgeOrientation2 = GetEdgeOrientationInTriangle (topology, edge.triangles[1], edgeIndex);\r\n            if (edgeOrientation1 === null || edgeOrientation2 === null || edgeOrientation1 === edgeOrientation2) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport function HasDefaultMaterial (model)\r\n{\r\n    for (let i = 0; i < model.MaterialCount (); i++) {\r\n        let material = model.GetMaterial (i);\r\n        if (material.isDefault && !material.vertexColors) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function ReplaceDefaultMaterialColor (model, color)\r\n{\r\n    for (let i = 0; i < model.MaterialCount (); i++) {\r\n        let material = model.GetMaterial (i);\r\n        if (material.isDefault) {\r\n            material.color = color;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}