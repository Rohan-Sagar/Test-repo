{"ast":null,"code":"import { FileFormat } from '../io/fileutils.js';\nimport { ColorComponentFromFloat } from '../model/color.js';\nimport { PropertyToString } from '../model/property.js';\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\n\nfunction GenerateGuid() {\n  // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\n  let template = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n  return template.replace(/[xy]/g, c => {\n    let r = Math.random() * 16 | 0;\n    let v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\nexport class ExporterBim extends ExporterBase {\n  constructor() {\n    super();\n  }\n\n  CanExport(format, extension) {\n    return format === FileFormat.Text && extension === 'bim';\n  }\n\n  ExportContent(exporterModel, format, files, onFinish) {\n    let bimContent = {\n      schema_version: '1.0.0',\n      meshes: [],\n      elements: [],\n      info: {}\n    };\n    this.ExportProperties(exporterModel.GetModel(), bimContent.info);\n    let meshId = 0;\n    exporterModel.EnumerateTransformedMeshes(mesh => {\n      let bimMesh = {\n        mesh_id: meshId,\n        coordinates: [],\n        indices: []\n      };\n      mesh.EnumerateVertices(vertex => {\n        bimMesh.coordinates.push(vertex.x, vertex.y, vertex.z);\n      });\n      mesh.EnumerateTriangleVertexIndices((v0, v1, v2) => {\n        bimMesh.indices.push(v0, v1, v2);\n      });\n      let bimElement = {\n        mesh_id: meshId,\n        type: 'Other',\n        color: {\n          r: 200,\n          g: 200,\n          b: 200,\n          a: 255\n        },\n        vector: {\n          x: 0.0,\n          y: 0.0,\n          z: 0.0\n        },\n        rotation: {\n          qx: 0.0,\n          qy: 0.0,\n          qz: 0.0,\n          qw: 1.0\n        },\n        guid: GenerateGuid(),\n        info: {}\n      };\n      let defaultColor = null;\n      let hasOnlyOneColor = true;\n      let faceColors = [];\n\n      for (let i = 0; i < mesh.TriangleCount(); i++) {\n        let triangle = mesh.GetTriangle(i);\n        let material = exporterModel.GetMaterial(triangle.mat);\n        let faceColor = {\n          r: material.color.r,\n          g: material.color.g,\n          b: material.color.b,\n          a: ColorComponentFromFloat(material.opacity)\n        };\n        faceColors.push(faceColor.r, faceColor.g, faceColor.b, faceColor.a);\n\n        if (hasOnlyOneColor) {\n          if (defaultColor === null) {\n            defaultColor = faceColor;\n          } else {\n            if (defaultColor.r !== faceColor.r || defaultColor.g !== faceColor.g || defaultColor.b !== faceColor.b || defaultColor.a !== faceColor.a) {\n              hasOnlyOneColor = false;\n              defaultColor = null;\n            }\n          }\n        }\n      }\n\n      if (hasOnlyOneColor) {\n        bimElement.color = defaultColor;\n      } else {\n        bimElement.face_colors = faceColors;\n      }\n\n      bimElement.info['Name'] = mesh.GetName();\n      this.ExportProperties(mesh, bimElement.info);\n      bimContent.meshes.push(bimMesh);\n      bimContent.elements.push(bimElement);\n      meshId += 1;\n    });\n    let bimFile = new ExportedFile('model.bim');\n    bimFile.SetTextContent(JSON.stringify(bimContent, null, 4));\n    files.push(bimFile);\n    onFinish();\n  }\n\n  ExportProperties(element, targetObject) {\n    for (let groupIndex = 0; groupIndex < element.PropertyGroupCount(); groupIndex++) {\n      let group = element.GetPropertyGroup(groupIndex);\n\n      for (let propertyIndex = 0; propertyIndex < group.PropertyCount(); propertyIndex++) {\n        let property = group.GetProperty(propertyIndex);\n        targetObject[property.name] = PropertyToString(property);\n      }\n    }\n  }\n\n}","map":{"version":3,"names":["FileFormat","ColorComponentFromFloat","PropertyToString","ExportedFile","ExporterBase","GenerateGuid","template","replace","c","r","Math","random","v","toString","ExporterBim","constructor","CanExport","format","extension","Text","ExportContent","exporterModel","files","onFinish","bimContent","schema_version","meshes","elements","info","ExportProperties","GetModel","meshId","EnumerateTransformedMeshes","mesh","bimMesh","mesh_id","coordinates","indices","EnumerateVertices","vertex","push","x","y","z","EnumerateTriangleVertexIndices","v0","v1","v2","bimElement","type","color","g","b","a","vector","rotation","qx","qy","qz","qw","guid","defaultColor","hasOnlyOneColor","faceColors","i","TriangleCount","triangle","GetTriangle","material","GetMaterial","mat","faceColor","opacity","face_colors","GetName","bimFile","SetTextContent","JSON","stringify","element","targetObject","groupIndex","PropertyGroupCount","group","GetPropertyGroup","propertyIndex","PropertyCount","property","GetProperty","name"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/export/exporterbim.js"],"sourcesContent":["import { FileFormat } from '../io/fileutils.js';\r\nimport { ColorComponentFromFloat } from '../model/color.js';\r\nimport { PropertyToString } from '../model/property.js';\r\nimport { ExportedFile, ExporterBase } from './exporterbase.js';\r\n\r\nfunction GenerateGuid ()\r\n{\r\n    // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\r\n    let template = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\r\n    return template.replace (/[xy]/g, (c) => {\r\n        let r = Math.random () * 16 | 0;\r\n        let v = (c === 'x') ? r : (r & 0x3 | 0x8);\r\n        return v.toString (16);\r\n    });\r\n}\r\n\r\nexport class ExporterBim extends ExporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanExport (format, extension)\r\n    {\r\n        return format === FileFormat.Text && extension === 'bim';\r\n    }\r\n\r\n    ExportContent (exporterModel, format, files, onFinish)\r\n    {\r\n        let bimContent = {\r\n            schema_version : '1.0.0',\r\n            meshes : [],\r\n            elements : [],\r\n            info : {}\r\n        };\r\n\r\n        this.ExportProperties (exporterModel.GetModel (), bimContent.info);\r\n\r\n        let meshId = 0;\r\n        exporterModel.EnumerateTransformedMeshes ((mesh) => {\r\n            let bimMesh = {\r\n                mesh_id : meshId,\r\n                coordinates : [],\r\n                indices : []\r\n            };\r\n\r\n            mesh.EnumerateVertices ((vertex) => {\r\n                bimMesh.coordinates.push (vertex.x, vertex.y, vertex.z);\r\n            });\r\n            mesh.EnumerateTriangleVertexIndices ((v0, v1, v2) => {\r\n                bimMesh.indices.push (v0, v1, v2);\r\n            });\r\n\r\n            let bimElement = {\r\n                mesh_id : meshId,\r\n                type : 'Other',\r\n                color : {\r\n                    r : 200,\r\n                    g : 200,\r\n                    b : 200,\r\n                    a : 255\r\n                },\r\n                vector : {\r\n                    x : 0.0,\r\n                    y : 0.0,\r\n                    z : 0.0\r\n                },\r\n                rotation : {\r\n                    qx: 0.0,\r\n                    qy: 0.0,\r\n                    qz: 0.0,\r\n                    qw: 1.0\r\n                },\r\n                guid : GenerateGuid (),\r\n                info : {}\r\n            };\r\n\r\n            let defaultColor = null;\r\n            let hasOnlyOneColor = true;\r\n            let faceColors = [];\r\n            for (let i = 0; i < mesh.TriangleCount (); i++) {\r\n                let triangle = mesh.GetTriangle (i);\r\n                let material = exporterModel.GetMaterial (triangle.mat);\r\n                let faceColor = {\r\n                    r : material.color.r,\r\n                    g : material.color.g,\r\n                    b : material.color.b,\r\n                    a : ColorComponentFromFloat (material.opacity),\r\n                };\r\n                faceColors.push (faceColor.r, faceColor.g, faceColor.b, faceColor.a);\r\n                if (hasOnlyOneColor) {\r\n                    if (defaultColor === null) {\r\n                        defaultColor = faceColor;\r\n                    } else {\r\n                        if (defaultColor.r !== faceColor.r || defaultColor.g !== faceColor.g || defaultColor.b !== faceColor.b || defaultColor.a !== faceColor.a) {\r\n                            hasOnlyOneColor = false;\r\n                            defaultColor = null;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (hasOnlyOneColor) {\r\n                bimElement.color = defaultColor;\r\n            } else {\r\n                bimElement.face_colors = faceColors;\r\n            }\r\n\r\n            bimElement.info['Name'] = mesh.GetName ();\r\n            this.ExportProperties (mesh, bimElement.info);\r\n\r\n            bimContent.meshes.push (bimMesh);\r\n            bimContent.elements.push (bimElement);\r\n            meshId += 1;\r\n        });\r\n\r\n        let bimFile = new ExportedFile ('model.bim');\r\n        bimFile.SetTextContent (JSON.stringify (bimContent, null, 4));\r\n        files.push (bimFile);\r\n        onFinish ();\r\n    }\r\n\r\n    ExportProperties (element, targetObject)\r\n    {\r\n        for (let groupIndex = 0; groupIndex < element.PropertyGroupCount (); groupIndex++) {\r\n            let group = element.GetPropertyGroup (groupIndex);\r\n            for (let propertyIndex = 0; propertyIndex < group.PropertyCount (); propertyIndex++) {\r\n                let property = group.GetProperty (propertyIndex);\r\n                targetObject[property.name] = PropertyToString (property);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}