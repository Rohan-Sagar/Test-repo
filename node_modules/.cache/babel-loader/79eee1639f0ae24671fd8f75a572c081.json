{"ast":null,"code":"import { Coord2D } from '../geometry/coord2d.js';\nimport { Coord3D } from '../geometry/coord3d.js';\nimport { IsPositive, IsNegative, IsZero } from '../geometry/geometry.js';\nimport { Mesh } from './mesh.js';\nimport { Triangle } from './triangle.js';\nexport class GeneratorParams {\n  constructor() {\n    this.name = null;\n    this.material = null;\n  }\n\n  SetName(name) {\n    this.name = name;\n    return this;\n  }\n\n  SetMaterial(material) {\n    this.material = material;\n    return this;\n  }\n\n}\nexport class Generator {\n  constructor(params) {\n    this.params = params || new GeneratorParams();\n    this.mesh = new Mesh();\n\n    if (this.params.name !== null) {\n      this.mesh.SetName(this.params.name);\n    }\n\n    this.curve = null;\n  }\n\n  GetMesh() {\n    return this.mesh;\n  }\n\n  AddVertex(x, y, z) {\n    let coord = new Coord3D(x, y, z);\n    return this.mesh.AddVertex(coord);\n  }\n\n  AddVertices(vertices) {\n    let indices = [];\n\n    for (let i = 0; i < vertices.length; i++) {\n      let vertex = vertices[i];\n      indices.push(this.AddVertex(vertex.x, vertex.y, vertex.z));\n    }\n\n    return indices;\n  }\n\n  SetCurve(curve) {\n    this.curve = curve;\n  }\n\n  ResetCurve() {\n    this.curve = null;\n  }\n\n  AddTriangle(v0, v1, v2) {\n    let triangle = new Triangle(v0, v1, v2);\n\n    if (this.params.material !== null) {\n      triangle.mat = this.params.material;\n    }\n\n    if (this.curve !== null) {\n      triangle.SetCurve(this.curve);\n    }\n\n    return this.mesh.AddTriangle(triangle);\n  }\n\n  AddTriangleInverted(v0, v1, v2) {\n    this.AddTriangle(v0, v2, v1);\n  }\n\n  AddConvexPolygon(vertices) {\n    for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {\n      this.AddTriangle(vertices[0], vertices[vertexIndex + 1], vertices[vertexIndex + 2]);\n    }\n  }\n\n  AddConvexPolygonInverted(vertices) {\n    for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {\n      this.AddTriangleInverted(vertices[0], vertices[vertexIndex + 1], vertices[vertexIndex + 2]);\n    }\n  }\n\n}\nexport class GeneratorHelper {\n  constructor(generator) {\n    this.generator = generator;\n  }\n\n  GenerateSurfaceBetweenPolygons(startIndices, endIndices) {\n    if (startIndices.length !== endIndices.length) {\n      return;\n    }\n\n    const vertexCount = startIndices.length;\n\n    for (let i = 0; i < vertexCount; i++) {\n      const index = i;\n      const nextIndex = i < vertexCount - 1 ? index + 1 : 0;\n      this.generator.AddConvexPolygon([startIndices[index], startIndices[nextIndex], endIndices[nextIndex], endIndices[index]]);\n    }\n  }\n\n  GenerateTriangleFan(startIndices, endIndex) {\n    const vertexCount = startIndices.length;\n\n    for (let i = 0; i < vertexCount; i++) {\n      const index = i;\n      const nextIndex = i < vertexCount - 1 ? index + 1 : 0;\n      this.generator.AddTriangle(endIndex, startIndices[index], startIndices[nextIndex]);\n    }\n  }\n\n}\n\nfunction GetCylindricalCoord(radius, angle) {\n  return new Coord2D(radius * Math.cos(angle), radius * Math.sin(angle));\n}\n\nexport function GenerateCuboid(genParams, xSize, ySize, zSize) {\n  if (!IsPositive(xSize) || !IsPositive(ySize) || !IsPositive(zSize)) {\n    return null;\n  }\n\n  let generator = new Generator(genParams);\n  generator.AddVertex(0.0, 0.0, 0.0);\n  generator.AddVertex(xSize, 0.0, 0.0);\n  generator.AddVertex(xSize, ySize, 0.0);\n  generator.AddVertex(0.0, ySize, 0.0);\n  generator.AddVertex(0.0, 0.0, zSize);\n  generator.AddVertex(xSize, 0.0, zSize);\n  generator.AddVertex(xSize, ySize, zSize);\n  generator.AddVertex(0.0, ySize, zSize);\n  generator.AddConvexPolygon([0, 3, 2, 1]);\n  generator.AddConvexPolygon([0, 1, 5, 4]);\n  generator.AddConvexPolygon([1, 2, 6, 5]);\n  generator.AddConvexPolygon([2, 3, 7, 6]);\n  generator.AddConvexPolygon([3, 0, 4, 7]);\n  generator.AddConvexPolygon([4, 5, 6, 7]);\n  return generator.GetMesh();\n}\nexport function GenerateCone(genParams, topRadius, bottomRadius, height, segments, smooth) {\n  if (IsNegative(topRadius) || IsNegative(bottomRadius)) {\n    return null;\n  }\n\n  if (!IsPositive(height) || segments < 3) {\n    return null;\n  }\n\n  let isZeroTop = IsZero(topRadius);\n  let isZeroBottom = IsZero(bottomRadius);\n\n  if (isZeroTop && isZeroBottom) {\n    return null;\n  }\n\n  let generator = new Generator(genParams);\n  let helper = new GeneratorHelper(generator);\n  const step = 2.0 * Math.PI / segments;\n  const curve = smooth ? 1 : null;\n  let topPolygon = [];\n\n  if (isZeroTop) {\n    topPolygon.push(generator.AddVertex(0.0, 0.0, height));\n  } else {\n    for (let i = 0; i < segments; i++) {\n      let topVertex = GetCylindricalCoord(topRadius, i * step);\n      topPolygon.push(generator.AddVertex(topVertex.x, topVertex.y, height));\n    }\n  }\n\n  let bottomPolygon = [];\n\n  if (isZeroBottom) {\n    bottomPolygon.push(generator.AddVertex(0.0, 0.0, 0.0));\n  } else {\n    for (let i = 0; i < segments; i++) {\n      let bottomVertex = GetCylindricalCoord(bottomRadius, i * step);\n      bottomPolygon.push(generator.AddVertex(bottomVertex.x, bottomVertex.y, 0.0));\n    }\n  }\n\n  if (isZeroTop) {\n    generator.SetCurve(curve);\n    helper.GenerateTriangleFan(bottomPolygon, topPolygon[0]);\n    generator.ResetCurve();\n    generator.AddConvexPolygonInverted(bottomPolygon);\n  } else if (isZeroBottom) {\n    generator.SetCurve(curve);\n    helper.GenerateTriangleFan(topPolygon.slice().reverse(), bottomPolygon[0]);\n    generator.ResetCurve();\n    generator.AddConvexPolygon(topPolygon);\n  } else {\n    generator.SetCurve(curve);\n    helper.GenerateSurfaceBetweenPolygons(bottomPolygon, topPolygon);\n    generator.ResetCurve();\n    generator.AddConvexPolygonInverted(bottomPolygon);\n    generator.AddConvexPolygon(topPolygon);\n  }\n\n  return generator.GetMesh();\n}\nexport function GenerateCylinder(genParams, radius, height, segments, smooth) {\n  return GenerateCone(genParams, radius, radius, height, segments, smooth);\n}\nexport function GenerateSphere(genParams, radius, segments, smooth) {\n  function GetSphericalCoord(radius, theta, phi) {\n    return new Coord3D(radius * Math.sin(theta) * Math.cos(phi), radius * Math.sin(theta) * Math.sin(phi), radius * Math.cos(theta));\n  }\n\n  if (!IsPositive(radius) || segments < 3) {\n    return null;\n  }\n\n  let generator = new Generator(genParams);\n  let helper = new GeneratorHelper(generator);\n  generator.SetCurve(smooth ? 1 : null);\n  let allLevelVertices = [];\n  let levels = segments + 1;\n  const levelStep = Math.PI / segments;\n  const cylindricalStep = 2.0 * Math.PI / segments;\n\n  for (let levelIndex = 1; levelIndex < levels - 1; levelIndex++) {\n    let levelVertices = [];\n    let theta = levelIndex * levelStep;\n\n    for (let cylindricalIndex = 0; cylindricalIndex < segments; cylindricalIndex++) {\n      let phi = cylindricalIndex * cylindricalStep;\n      let vertex = GetSphericalCoord(radius, theta, -phi);\n      levelVertices.push(generator.AddVertex(vertex.x, vertex.y, vertex.z));\n    }\n\n    if (levelIndex > 1) {\n      helper.GenerateSurfaceBetweenPolygons(allLevelVertices[allLevelVertices.length - 1], levelVertices);\n    }\n\n    allLevelVertices.push(levelVertices);\n  }\n\n  let topVertex = generator.AddVertex(0.0, 0.0, radius);\n  let bottomVertex = generator.AddVertex(0.0, 0.0, -radius);\n  helper.GenerateTriangleFan(allLevelVertices[0].slice().reverse(), topVertex);\n  helper.GenerateTriangleFan(allLevelVertices[allLevelVertices.length - 1], bottomVertex);\n  generator.ResetCurve();\n  return generator.GetMesh();\n}\nexport function GeneratePlatonicSolid(genParams, type, radius) {\n  function AddVertex(generator, radius, x, y, z) {\n    let vertex = new Coord3D(x, y, z);\n    vertex.MultiplyScalar(radius / vertex.Length());\n    generator.AddVertex(vertex.x, vertex.y, vertex.z);\n  }\n\n  if (!IsPositive(radius)) {\n    return null;\n  }\n\n  let generator = new Generator(genParams);\n\n  if (type === 'tetrahedron') {\n    let a = 1.0;\n    AddVertex(generator, radius, +a, +a, +a);\n    AddVertex(generator, radius, -a, -a, +a);\n    AddVertex(generator, radius, -a, +a, -a);\n    AddVertex(generator, radius, +a, -a, -a);\n    generator.AddTriangle(0, 1, 3);\n    generator.AddTriangle(0, 2, 1);\n    generator.AddTriangle(0, 3, 2);\n    generator.AddTriangle(1, 2, 3);\n  } else if (type === 'hexahedron') {\n    let a = 1.0;\n    AddVertex(generator, radius, +a, +a, +a);\n    AddVertex(generator, radius, +a, +a, -a);\n    AddVertex(generator, radius, +a, -a, +a);\n    AddVertex(generator, radius, +a, -a, -a);\n    AddVertex(generator, radius, -a, +a, +a);\n    AddVertex(generator, radius, -a, +a, -a);\n    AddVertex(generator, radius, -a, -a, +a);\n    AddVertex(generator, radius, -a, -a, -a);\n    generator.AddConvexPolygon([0, 1, 5, 4]);\n    generator.AddConvexPolygon([0, 2, 3, 1]);\n    generator.AddConvexPolygon([0, 4, 6, 2]);\n    generator.AddConvexPolygon([1, 3, 7, 5]);\n    generator.AddConvexPolygon([2, 6, 7, 3]);\n    generator.AddConvexPolygon([4, 5, 7, 6]);\n  } else if (type === 'octahedron') {\n    let a = 1.0;\n    let b = 0.0;\n    AddVertex(generator, radius, +a, +b, +b);\n    AddVertex(generator, radius, -a, +b, +b);\n    AddVertex(generator, radius, +b, +a, +b);\n    AddVertex(generator, radius, +b, -a, +b);\n    AddVertex(generator, radius, +b, +b, +a);\n    AddVertex(generator, radius, +b, +b, -a);\n    generator.AddTriangle(0, 2, 4);\n    generator.AddTriangle(0, 3, 5);\n    generator.AddTriangle(0, 4, 3);\n    generator.AddTriangle(0, 5, 2);\n    generator.AddTriangle(1, 2, 5);\n    generator.AddTriangle(1, 3, 4);\n    generator.AddTriangle(1, 4, 2);\n    generator.AddTriangle(1, 5, 3);\n  } else if (type === 'dodecahedron') {\n    let a = 1.0;\n    let b = 0.0;\n    let c = (1.0 + Math.sqrt(5.0)) / 2.0;\n    let d = 1.0 / c;\n    AddVertex(generator, radius, +a, +a, +a);\n    AddVertex(generator, radius, +a, +a, -a);\n    AddVertex(generator, radius, +a, -a, +a);\n    AddVertex(generator, radius, -a, +a, +a);\n    AddVertex(generator, radius, +a, -a, -a);\n    AddVertex(generator, radius, -a, +a, -a);\n    AddVertex(generator, radius, -a, -a, +a);\n    AddVertex(generator, radius, -a, -a, -a);\n    AddVertex(generator, radius, +b, +d, +c);\n    AddVertex(generator, radius, +b, +d, -c);\n    AddVertex(generator, radius, +b, -d, +c);\n    AddVertex(generator, radius, +b, -d, -c);\n    AddVertex(generator, radius, +d, +c, +b);\n    AddVertex(generator, radius, +d, -c, +b);\n    AddVertex(generator, radius, -d, +c, +b);\n    AddVertex(generator, radius, -d, -c, +b);\n    AddVertex(generator, radius, +c, +b, +d);\n    AddVertex(generator, radius, -c, +b, +d);\n    AddVertex(generator, radius, +c, +b, -d);\n    AddVertex(generator, radius, -c, +b, -d);\n    generator.AddConvexPolygon([0, 8, 10, 2, 16]);\n    generator.AddConvexPolygon([0, 16, 18, 1, 12]);\n    generator.AddConvexPolygon([0, 12, 14, 3, 8]);\n    generator.AddConvexPolygon([1, 9, 5, 14, 12]);\n    generator.AddConvexPolygon([1, 18, 4, 11, 9]);\n    generator.AddConvexPolygon([2, 10, 6, 15, 13]);\n    generator.AddConvexPolygon([2, 13, 4, 18, 16]);\n    generator.AddConvexPolygon([3, 14, 5, 19, 17]);\n    generator.AddConvexPolygon([3, 17, 6, 10, 8]);\n    generator.AddConvexPolygon([4, 13, 15, 7, 11]);\n    generator.AddConvexPolygon([5, 9, 11, 7, 19]);\n    generator.AddConvexPolygon([6, 17, 19, 7, 15]);\n  } else if (type === 'icosahedron') {\n    let a = 1.0;\n    let b = 0.0;\n    let c = (1.0 + Math.sqrt(5.0)) / 2.0;\n    AddVertex(generator, radius, +b, +a, +c);\n    AddVertex(generator, radius, +b, +a, -c);\n    AddVertex(generator, radius, +b, -a, +c);\n    AddVertex(generator, radius, +b, -a, -c);\n    AddVertex(generator, radius, +a, +c, +b);\n    AddVertex(generator, radius, +a, -c, +b);\n    AddVertex(generator, radius, -a, +c, +b);\n    AddVertex(generator, radius, -a, -c, +b);\n    AddVertex(generator, radius, +c, +b, +a);\n    AddVertex(generator, radius, +c, +b, -a);\n    AddVertex(generator, radius, -c, +b, +a);\n    AddVertex(generator, radius, -c, +b, -a);\n    generator.AddTriangle(0, 2, 8);\n    generator.AddTriangle(0, 4, 6);\n    generator.AddTriangle(0, 6, 10);\n    generator.AddTriangle(0, 8, 4);\n    generator.AddTriangle(0, 10, 2);\n    generator.AddTriangle(1, 3, 11);\n    generator.AddTriangle(1, 4, 9);\n    generator.AddTriangle(1, 6, 4);\n    generator.AddTriangle(1, 9, 3);\n    generator.AddTriangle(1, 11, 6);\n    generator.AddTriangle(2, 5, 8);\n    generator.AddTriangle(2, 7, 5);\n    generator.AddTriangle(2, 10, 7);\n    generator.AddTriangle(3, 5, 7);\n    generator.AddTriangle(3, 7, 11);\n    generator.AddTriangle(3, 9, 5);\n    generator.AddTriangle(4, 8, 9);\n    generator.AddTriangle(5, 9, 8);\n    generator.AddTriangle(6, 11, 10);\n    generator.AddTriangle(7, 10, 11);\n  }\n\n  return generator.GetMesh();\n}","map":{"version":3,"names":["Coord2D","Coord3D","IsPositive","IsNegative","IsZero","Mesh","Triangle","GeneratorParams","constructor","name","material","SetName","SetMaterial","Generator","params","mesh","curve","GetMesh","AddVertex","x","y","z","coord","AddVertices","vertices","indices","i","length","vertex","push","SetCurve","ResetCurve","AddTriangle","v0","v1","v2","triangle","mat","AddTriangleInverted","AddConvexPolygon","vertexIndex","AddConvexPolygonInverted","GeneratorHelper","generator","GenerateSurfaceBetweenPolygons","startIndices","endIndices","vertexCount","index","nextIndex","GenerateTriangleFan","endIndex","GetCylindricalCoord","radius","angle","Math","cos","sin","GenerateCuboid","genParams","xSize","ySize","zSize","GenerateCone","topRadius","bottomRadius","height","segments","smooth","isZeroTop","isZeroBottom","helper","step","PI","topPolygon","topVertex","bottomPolygon","bottomVertex","slice","reverse","GenerateCylinder","GenerateSphere","GetSphericalCoord","theta","phi","allLevelVertices","levels","levelStep","cylindricalStep","levelIndex","levelVertices","cylindricalIndex","GeneratePlatonicSolid","type","MultiplyScalar","Length","a","b","c","sqrt","d"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/generator.js"],"sourcesContent":["import { Coord2D } from '../geometry/coord2d.js';\r\nimport { Coord3D } from '../geometry/coord3d.js';\r\nimport { IsPositive, IsNegative, IsZero } from '../geometry/geometry.js';\r\nimport { Mesh } from './mesh.js';\r\nimport { Triangle } from './triangle.js';\r\n\r\nexport class GeneratorParams\r\n{\r\n    constructor ()\r\n    {\r\n        this.name = null;\r\n        this.material = null;\r\n    }\r\n\r\n    SetName (name)\r\n    {\r\n        this.name = name;\r\n        return this;\r\n    }\r\n\r\n    SetMaterial (material)\r\n    {\r\n        this.material = material;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Generator\r\n{\r\n    constructor (params)\r\n    {\r\n        this.params = params || new GeneratorParams ();\r\n        this.mesh = new Mesh ();\r\n        if (this.params.name !== null) {\r\n            this.mesh.SetName (this.params.name);\r\n        }\r\n        this.curve = null;\r\n    }\r\n\r\n    GetMesh ()\r\n    {\r\n        return this.mesh;\r\n    }\r\n\r\n    AddVertex (x, y, z)\r\n    {\r\n        let coord = new Coord3D (x, y, z);\r\n        return this.mesh.AddVertex (coord);\r\n    }\r\n\r\n    AddVertices (vertices)\r\n    {\r\n        let indices = [];\r\n        for (let i = 0; i < vertices.length; i++) {\r\n            let vertex = vertices[i];\r\n            indices.push (this.AddVertex (vertex.x, vertex.y, vertex.z));\r\n        }\r\n        return indices;\r\n    }\r\n\r\n    SetCurve (curve)\r\n    {\r\n        this.curve = curve;\r\n    }\r\n\r\n    ResetCurve ()\r\n    {\r\n        this.curve = null;\r\n    }\r\n\r\n    AddTriangle (v0, v1, v2)\r\n    {\r\n        let triangle = new Triangle (v0, v1, v2);\r\n        if (this.params.material !== null) {\r\n            triangle.mat = this.params.material;\r\n        }\r\n        if (this.curve !== null) {\r\n            triangle.SetCurve (this.curve);\r\n        }\r\n        return this.mesh.AddTriangle (triangle);\r\n    }\r\n\r\n    AddTriangleInverted (v0, v1, v2)\r\n    {\r\n        this.AddTriangle (v0, v2, v1);\r\n    }\r\n\r\n    AddConvexPolygon (vertices)\r\n    {\r\n        for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {\r\n            this.AddTriangle (\r\n                vertices[0],\r\n                vertices[vertexIndex + 1],\r\n                vertices[vertexIndex + 2]\r\n            );\r\n        }\r\n    }\r\n\r\n    AddConvexPolygonInverted (vertices)\r\n    {\r\n        for (let vertexIndex = 0; vertexIndex < vertices.length - 2; vertexIndex++) {\r\n            this.AddTriangleInverted (\r\n                vertices[0],\r\n                vertices[vertexIndex + 1],\r\n                vertices[vertexIndex + 2]\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport class GeneratorHelper\r\n{\r\n    constructor (generator)\r\n    {\r\n        this.generator = generator;\r\n    }\r\n\r\n    GenerateSurfaceBetweenPolygons (startIndices, endIndices)\r\n    {\r\n        if (startIndices.length !== endIndices.length) {\r\n            return;\r\n        }\r\n        const vertexCount = startIndices.length;\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const index = i;\r\n            const nextIndex = (i < vertexCount - 1) ? index + 1 : 0;\r\n            this.generator.AddConvexPolygon ([\r\n                startIndices[index],\r\n                startIndices[nextIndex],\r\n                endIndices[nextIndex],\r\n                endIndices[index]\r\n            ]);\r\n        }\r\n    }\r\n\r\n    GenerateTriangleFan (startIndices, endIndex)\r\n    {\r\n        const vertexCount = startIndices.length;\r\n        for (let i = 0; i < vertexCount; i++) {\r\n            const index = i;\r\n            const nextIndex = (i < vertexCount - 1) ? index + 1 : 0;\r\n            this.generator.AddTriangle (\r\n                endIndex,\r\n                startIndices[index],\r\n                startIndices[nextIndex]\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction GetCylindricalCoord (radius, angle)\r\n{\r\n    return new Coord2D (\r\n        radius * Math.cos (angle),\r\n        radius * Math.sin (angle)\r\n    );\r\n}\r\n\r\nexport function GenerateCuboid (genParams, xSize, ySize, zSize)\r\n{\r\n    if (!IsPositive (xSize) || !IsPositive (ySize) || !IsPositive (zSize)) {\r\n        return null;\r\n    }\r\n\r\n    let generator = new Generator (genParams);\r\n\r\n    generator.AddVertex (0.0, 0.0, 0.0);\r\n    generator.AddVertex (xSize, 0.0, 0.0);\r\n    generator.AddVertex (xSize, ySize, 0.0);\r\n    generator.AddVertex (0.0, ySize, 0.0);\r\n    generator.AddVertex (0.0, 0.0, zSize);\r\n    generator.AddVertex (xSize, 0.0, zSize);\r\n    generator.AddVertex (xSize, ySize, zSize);\r\n    generator.AddVertex (0.0, ySize, zSize);\r\n\r\n    generator.AddConvexPolygon ([0, 3, 2, 1]);\r\n    generator.AddConvexPolygon ([0, 1, 5, 4]);\r\n    generator.AddConvexPolygon ([1, 2, 6, 5]);\r\n    generator.AddConvexPolygon ([2, 3, 7, 6]);\r\n    generator.AddConvexPolygon ([3, 0, 4, 7]);\r\n    generator.AddConvexPolygon ([4, 5, 6, 7]);\r\n\r\n    return generator.GetMesh ();\r\n}\r\n\r\nexport function GenerateCone (genParams, topRadius, bottomRadius, height, segments, smooth)\r\n{\r\n    if (IsNegative (topRadius) || IsNegative (bottomRadius)) {\r\n        return null;\r\n    }\r\n\r\n    if (!IsPositive (height) || segments < 3) {\r\n        return null;\r\n    }\r\n\r\n    let isZeroTop = IsZero (topRadius);\r\n    let isZeroBottom = IsZero (bottomRadius);\r\n    if (isZeroTop && isZeroBottom) {\r\n        return null;\r\n    }\r\n\r\n    let generator = new Generator (genParams);\r\n    let helper = new GeneratorHelper (generator);\r\n    const step = 2.0 * Math.PI / segments;\r\n    const curve = (smooth ? 1 : null);\r\n\r\n    let topPolygon = [];\r\n    if (isZeroTop) {\r\n        topPolygon.push (generator.AddVertex (0.0, 0.0, height));\r\n    } else {\r\n        for (let i = 0; i < segments; i++) {\r\n            let topVertex = GetCylindricalCoord (topRadius, i * step);\r\n            topPolygon.push (generator.AddVertex (topVertex.x, topVertex.y, height));\r\n        }\r\n    }\r\n\r\n    let bottomPolygon = [];\r\n    if (isZeroBottom) {\r\n        bottomPolygon.push (generator.AddVertex (0.0, 0.0, 0.0));\r\n    } else {\r\n        for (let i = 0; i < segments; i++) {\r\n            let bottomVertex = GetCylindricalCoord (bottomRadius, i * step);\r\n            bottomPolygon.push (generator.AddVertex (bottomVertex.x, bottomVertex.y, 0.0));\r\n        }\r\n    }\r\n\r\n    if (isZeroTop) {\r\n        generator.SetCurve (curve);\r\n        helper.GenerateTriangleFan (bottomPolygon, topPolygon[0]);\r\n        generator.ResetCurve ();\r\n        generator.AddConvexPolygonInverted (bottomPolygon);\r\n    } else if (isZeroBottom) {\r\n        generator.SetCurve (curve);\r\n        helper.GenerateTriangleFan (topPolygon.slice ().reverse (), bottomPolygon[0]);\r\n        generator.ResetCurve ();\r\n        generator.AddConvexPolygon (topPolygon);\r\n    } else {\r\n        generator.SetCurve (curve);\r\n        helper.GenerateSurfaceBetweenPolygons (bottomPolygon, topPolygon);\r\n        generator.ResetCurve ();\r\n        generator.AddConvexPolygonInverted (bottomPolygon);\r\n        generator.AddConvexPolygon (topPolygon);\r\n    }\r\n\r\n    return generator.GetMesh ();\r\n}\r\n\r\nexport function GenerateCylinder (genParams, radius, height, segments, smooth)\r\n{\r\n    return GenerateCone (genParams, radius, radius, height, segments, smooth);\r\n}\r\n\r\nexport function GenerateSphere (genParams, radius, segments, smooth)\r\n{\r\n    function GetSphericalCoord (radius, theta, phi)\r\n    {\r\n        return new Coord3D (\r\n            radius * Math.sin (theta) * Math.cos (phi),\r\n            radius * Math.sin (theta) * Math.sin (phi),\r\n            radius * Math.cos (theta)\r\n        );\r\n    }\r\n\r\n    if (!IsPositive (radius) || segments < 3) {\r\n        return null;\r\n    }\r\n\r\n    let generator = new Generator (genParams);\r\n    let helper = new GeneratorHelper (generator);\r\n\r\n    generator.SetCurve (smooth ? 1 : null);\r\n\r\n    let allLevelVertices = [];\r\n    let levels = segments + 1;\r\n    const levelStep = Math.PI / segments;\r\n\tconst cylindricalStep = 2.0 * Math.PI / segments;\r\n    for (let levelIndex = 1; levelIndex < levels - 1; levelIndex++) {\r\n        let levelVertices = [];\r\n        let theta = levelIndex * levelStep;\r\n        for (let cylindricalIndex = 0; cylindricalIndex < segments; cylindricalIndex++) {\r\n            let phi = cylindricalIndex * cylindricalStep;\r\n            let vertex = GetSphericalCoord (radius, theta, -phi);\r\n            levelVertices.push (generator.AddVertex (vertex.x, vertex.y, vertex.z));\r\n        }\r\n        if (levelIndex > 1) {\r\n            helper.GenerateSurfaceBetweenPolygons (allLevelVertices[allLevelVertices.length - 1], levelVertices);\r\n        }\r\n        allLevelVertices.push (levelVertices);\r\n    }\r\n\r\n    let topVertex = generator.AddVertex (0.0, 0.0, radius);\r\n    let bottomVertex = generator.AddVertex (0.0, 0.0, -radius);\r\n    helper.GenerateTriangleFan (allLevelVertices[0].slice ().reverse (), topVertex);\r\n    helper.GenerateTriangleFan (allLevelVertices[allLevelVertices.length - 1], bottomVertex);\r\n\r\n    generator.ResetCurve ();\r\n\r\n    return generator.GetMesh ();\r\n}\r\n\r\nexport function GeneratePlatonicSolid (genParams, type, radius)\r\n{\r\n    function AddVertex (generator, radius, x, y, z)\r\n    {\r\n        let vertex = new Coord3D (x, y, z);\r\n        vertex.MultiplyScalar (radius / vertex.Length ());\r\n        generator.AddVertex (vertex.x, vertex.y, vertex.z);\r\n    }\r\n\r\n    if (!IsPositive (radius)) {\r\n        return null;\r\n    }\r\n\r\n    let generator = new Generator (genParams);\r\n    if (type === 'tetrahedron') {\r\n        let a = 1.0;\r\n        AddVertex (generator, radius, +a, +a, +a);\r\n        AddVertex (generator, radius, -a, -a, +a);\r\n        AddVertex (generator, radius, -a, +a, -a);\r\n        AddVertex (generator, radius, +a, -a, -a);\r\n        generator.AddTriangle (0, 1, 3);\r\n        generator.AddTriangle (0, 2, 1);\r\n        generator.AddTriangle (0, 3, 2);\r\n        generator.AddTriangle (1, 2, 3);\r\n    } else if (type === 'hexahedron') {\r\n        let a = 1.0;\r\n        AddVertex (generator, radius, +a, +a, +a);\r\n        AddVertex (generator, radius, +a, +a, -a);\r\n        AddVertex (generator, radius, +a, -a, +a);\r\n        AddVertex (generator, radius, +a, -a, -a);\r\n        AddVertex (generator, radius, -a, +a, +a);\r\n        AddVertex (generator, radius, -a, +a, -a);\r\n        AddVertex (generator, radius, -a, -a, +a);\r\n        AddVertex (generator, radius, -a, -a, -a);\r\n        generator.AddConvexPolygon ([0, 1, 5, 4]);\r\n        generator.AddConvexPolygon ([0, 2, 3, 1]);\r\n        generator.AddConvexPolygon ([0, 4, 6, 2]);\r\n        generator.AddConvexPolygon ([1, 3, 7, 5]);\r\n        generator.AddConvexPolygon ([2, 6, 7, 3]);\r\n        generator.AddConvexPolygon ([4, 5, 7, 6]);\r\n    } else if (type === 'octahedron') {\r\n        let a = 1.0;\r\n        let b = 0.0;\r\n        AddVertex (generator, radius, +a, +b, +b);\r\n        AddVertex (generator, radius, -a, +b, +b);\r\n        AddVertex (generator, radius, +b, +a, +b);\r\n        AddVertex (generator, radius, +b, -a, +b);\r\n        AddVertex (generator, radius, +b, +b, +a);\r\n        AddVertex (generator, radius, +b, +b, -a);\r\n        generator.AddTriangle (0, 2, 4);\r\n        generator.AddTriangle (0, 3, 5);\r\n        generator.AddTriangle (0, 4, 3);\r\n        generator.AddTriangle (0, 5, 2);\r\n        generator.AddTriangle (1, 2, 5);\r\n        generator.AddTriangle (1, 3, 4);\r\n        generator.AddTriangle (1, 4, 2);\r\n        generator.AddTriangle (1, 5, 3);\r\n    } else if (type === 'dodecahedron') {\r\n        let a = 1.0;\r\n        let b = 0.0;\r\n        let c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n        let d = 1.0 / c;\r\n        AddVertex (generator, radius, +a, +a, +a);\r\n        AddVertex (generator, radius, +a, +a, -a);\r\n        AddVertex (generator, radius, +a, -a, +a);\r\n        AddVertex (generator, radius, -a, +a, +a);\r\n        AddVertex (generator, radius, +a, -a, -a);\r\n        AddVertex (generator, radius, -a, +a, -a);\r\n        AddVertex (generator, radius, -a, -a, +a);\r\n        AddVertex (generator, radius, -a, -a, -a);\r\n        AddVertex (generator, radius, +b, +d, +c);\r\n        AddVertex (generator, radius, +b, +d, -c);\r\n        AddVertex (generator, radius, +b, -d, +c);\r\n        AddVertex (generator, radius, +b, -d, -c);\r\n        AddVertex (generator, radius, +d, +c, +b);\r\n        AddVertex (generator, radius, +d, -c, +b);\r\n        AddVertex (generator, radius, -d, +c, +b);\r\n        AddVertex (generator, radius, -d, -c, +b);\r\n        AddVertex (generator, radius, +c, +b, +d);\r\n        AddVertex (generator, radius, -c, +b, +d);\r\n        AddVertex (generator, radius, +c, +b, -d);\r\n        AddVertex (generator, radius, -c, +b, -d);\r\n        generator.AddConvexPolygon ([0, 8, 10, 2, 16]);\r\n        generator.AddConvexPolygon ([0, 16, 18, 1, 12]);\r\n        generator.AddConvexPolygon ([0, 12, 14, 3, 8]);\r\n        generator.AddConvexPolygon ([1, 9, 5, 14, 12]);\r\n        generator.AddConvexPolygon ([1, 18, 4, 11, 9]);\r\n        generator.AddConvexPolygon ([2, 10, 6, 15, 13]);\r\n        generator.AddConvexPolygon ([2, 13, 4, 18, 16]);\r\n        generator.AddConvexPolygon ([3, 14, 5, 19, 17]);\r\n        generator.AddConvexPolygon ([3, 17, 6, 10, 8]);\r\n        generator.AddConvexPolygon ([4, 13, 15, 7, 11]);\r\n        generator.AddConvexPolygon ([5, 9, 11, 7, 19]);\r\n        generator.AddConvexPolygon ([6, 17, 19, 7, 15]);\r\n    } else if (type === 'icosahedron') {\r\n        let a = 1.0;\r\n        let b = 0.0;\r\n        let c = (1.0 + Math.sqrt (5.0)) / 2.0;\r\n        AddVertex (generator, radius, +b, +a, +c);\r\n        AddVertex (generator, radius, +b, +a, -c);\r\n        AddVertex (generator, radius, +b, -a, +c);\r\n        AddVertex (generator, radius, +b, -a, -c);\r\n        AddVertex (generator, radius, +a, +c, +b);\r\n        AddVertex (generator, radius, +a, -c, +b);\r\n        AddVertex (generator, radius, -a, +c, +b);\r\n        AddVertex (generator, radius, -a, -c, +b);\r\n        AddVertex (generator, radius, +c, +b, +a);\r\n        AddVertex (generator, radius, +c, +b, -a);\r\n        AddVertex (generator, radius, -c, +b, +a);\r\n        AddVertex (generator, radius, -c, +b, -a);\r\n        generator.AddTriangle (0, 2, 8);\r\n        generator.AddTriangle (0, 4, 6);\r\n        generator.AddTriangle (0, 6, 10);\r\n        generator.AddTriangle (0, 8, 4);\r\n        generator.AddTriangle (0, 10, 2);\r\n        generator.AddTriangle (1, 3, 11);\r\n        generator.AddTriangle (1, 4, 9);\r\n        generator.AddTriangle (1, 6, 4);\r\n        generator.AddTriangle (1, 9, 3);\r\n        generator.AddTriangle (1, 11, 6);\r\n        generator.AddTriangle (2, 5, 8);\r\n        generator.AddTriangle (2, 7, 5);\r\n        generator.AddTriangle (2, 10, 7);\r\n        generator.AddTriangle (3, 5, 7);\r\n        generator.AddTriangle (3, 7, 11);\r\n        generator.AddTriangle (3, 9, 5);\r\n        generator.AddTriangle (4, 8, 9);\r\n        generator.AddTriangle (5, 9, 8);\r\n        generator.AddTriangle (6, 11, 10);\r\n        generator.AddTriangle (7, 10, 11);\r\n    }\r\n    return generator.GetMesh ();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}