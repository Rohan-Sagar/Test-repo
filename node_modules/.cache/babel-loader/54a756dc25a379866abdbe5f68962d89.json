{"ast":null,"code":"import { RunTasks } from '../core/taskrunner.js';\nimport { FileSource, GetFileExtension, GetFileName, ReadFile, RequestUrl } from '../io/fileutils.js';\nexport class InputFile {\n  constructor(name, source, data) {\n    this.name = name;\n    this.source = source;\n    this.data = data;\n  }\n\n}\nexport function InputFilesFromUrls(urls) {\n  let inputFiles = [];\n\n  for (let url of urls) {\n    let fileName = GetFileName(url);\n    inputFiles.push(new InputFile(fileName, FileSource.Url, url));\n  }\n\n  return inputFiles;\n}\nexport function InputFilesFromFileObjects(fileObjects) {\n  let inputFiles = [];\n\n  for (let fileObject of fileObjects) {\n    let fileName = GetFileName(fileObject.name);\n    inputFiles.push(new InputFile(fileName, FileSource.File, fileObject));\n  }\n\n  return inputFiles;\n}\nexport class ImporterFile {\n  constructor(name, source, data) {\n    this.name = GetFileName(name);\n    this.extension = GetFileExtension(name);\n    this.source = source;\n    this.data = data;\n    this.content = null;\n  }\n\n  SetContent(content) {\n    this.content = content;\n  }\n\n}\nexport class ImporterFileList {\n  constructor() {\n    this.files = [];\n  }\n\n  FillFromInputFiles(inputFiles) {\n    this.files = [];\n\n    for (let inputFile of inputFiles) {\n      let file = new ImporterFile(inputFile.name, inputFile.source, inputFile.data);\n      this.files.push(file);\n    }\n  }\n\n  ExtendFromFileList(fileList) {\n    let files = fileList.GetFiles();\n\n    for (let i = 0; i < files.length; i++) {\n      let file = files[i];\n\n      if (!this.ContainsFileByPath(file.name)) {\n        this.files.push(file);\n      }\n    }\n  }\n\n  GetFiles() {\n    return this.files;\n  }\n\n  GetContent(callbacks) {\n    RunTasks(this.files.length, {\n      runTask: (index, onTaskComplete) => {\n        callbacks.onFileListProgress(index, this.files.length);\n        this.GetFileContent(this.files[index], {\n          onReady: onTaskComplete,\n          onProgress: callbacks.onFileLoadProgress\n        });\n      },\n      onReady: callbacks.onReady\n    });\n  }\n\n  ContainsFileByPath(filePath) {\n    return this.FindFileByPath(filePath) !== null;\n  }\n\n  FindFileByPath(filePath) {\n    let fileName = GetFileName(filePath).toLowerCase();\n\n    for (let fileIndex = 0; fileIndex < this.files.length; fileIndex++) {\n      let file = this.files[fileIndex];\n\n      if (file.name.toLowerCase() === fileName) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  IsOnlyUrlSource() {\n    if (this.files.length === 0) {\n      return false;\n    }\n\n    for (let i = 0; i < this.files.length; i++) {\n      let file = this.files[i];\n\n      if (file.source !== FileSource.Url && file.source !== FileSource.Decompressed) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  AddFile(file) {\n    this.files.push(file);\n  }\n\n  GetFileContent(file, callbacks) {\n    if (file.content !== null) {\n      callbacks.onReady();\n      return;\n    }\n\n    let loaderPromise = null;\n\n    if (file.source === FileSource.Url) {\n      loaderPromise = RequestUrl(file.data, callbacks.onProgress);\n    } else if (file.source === FileSource.File) {\n      loaderPromise = ReadFile(file.data, callbacks.onProgress);\n    } else {\n      callbacks.onReady();\n      return;\n    }\n\n    loaderPromise.then(content => {\n      file.SetContent(content);\n    }).catch(() => {}).finally(() => {\n      callbacks.onReady();\n    });\n  }\n\n}","map":{"version":3,"names":["RunTasks","FileSource","GetFileExtension","GetFileName","ReadFile","RequestUrl","InputFile","constructor","name","source","data","InputFilesFromUrls","urls","inputFiles","url","fileName","push","Url","InputFilesFromFileObjects","fileObjects","fileObject","File","ImporterFile","extension","content","SetContent","ImporterFileList","files","FillFromInputFiles","inputFile","file","ExtendFromFileList","fileList","GetFiles","i","length","ContainsFileByPath","GetContent","callbacks","runTask","index","onTaskComplete","onFileListProgress","GetFileContent","onReady","onProgress","onFileLoadProgress","filePath","FindFileByPath","toLowerCase","fileIndex","IsOnlyUrlSource","Decompressed","AddFile","loaderPromise","then","catch","finally"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importerfiles.js"],"sourcesContent":["import { RunTasks } from '../core/taskrunner.js';\r\nimport { FileSource, GetFileExtension, GetFileName, ReadFile, RequestUrl } from '../io/fileutils.js';\r\n\r\nexport class InputFile\r\n{\r\n    constructor (name, source, data)\r\n    {\r\n        this.name = name;\r\n        this.source = source;\r\n        this.data = data;\r\n    }\r\n}\r\n\r\nexport function InputFilesFromUrls (urls)\r\n{\r\n    let inputFiles = [];\r\n    for (let url of urls) {\r\n        let fileName = GetFileName (url);\r\n        inputFiles.push (new InputFile (fileName, FileSource.Url, url));\r\n    }\r\n    return inputFiles;\r\n}\r\n\r\nexport function InputFilesFromFileObjects (fileObjects)\r\n{\r\n    let inputFiles = [];\r\n    for (let fileObject of fileObjects) {\r\n        let fileName = GetFileName (fileObject.name);\r\n        inputFiles.push (new InputFile (fileName, FileSource.File, fileObject));\r\n    }\r\n    return inputFiles;\r\n}\r\n\r\nexport class ImporterFile\r\n{\r\n    constructor (name, source, data)\r\n    {\r\n        this.name = GetFileName (name);\r\n        this.extension = GetFileExtension (name);\r\n        this.source = source;\r\n        this.data = data;\r\n        this.content = null;\r\n    }\r\n\r\n    SetContent (content)\r\n    {\r\n        this.content = content;\r\n    }\r\n}\r\n\r\nexport class ImporterFileList\r\n{\r\n    constructor ()\r\n    {\r\n        this.files = [];\r\n    }\r\n\r\n    FillFromInputFiles (inputFiles)\r\n    {\r\n        this.files = [];\r\n        for (let inputFile of inputFiles) {\r\n            let file = new ImporterFile (inputFile.name, inputFile.source, inputFile.data);\r\n            this.files.push (file);\r\n        }\r\n    }\r\n\r\n    ExtendFromFileList (fileList)\r\n    {\r\n        let files = fileList.GetFiles ();\r\n        for (let i = 0; i < files.length; i++) {\r\n            let file = files[i];\r\n            if (!this.ContainsFileByPath (file.name)) {\r\n                this.files.push (file);\r\n            }\r\n        }\r\n    }\r\n\r\n    GetFiles ()\r\n    {\r\n        return this.files;\r\n    }\r\n\r\n    GetContent (callbacks)\r\n    {\r\n        RunTasks (this.files.length, {\r\n            runTask : (index, onTaskComplete) => {\r\n                callbacks.onFileListProgress (index, this.files.length);\r\n                this.GetFileContent (this.files[index], {\r\n                    onReady : onTaskComplete,\r\n                    onProgress : callbacks.onFileLoadProgress\r\n                });\r\n            },\r\n            onReady : callbacks.onReady\r\n        });\r\n    }\r\n\r\n    ContainsFileByPath (filePath)\r\n    {\r\n        return this.FindFileByPath (filePath) !== null;\r\n    }\r\n\r\n    FindFileByPath (filePath)\r\n    {\r\n        let fileName = GetFileName (filePath).toLowerCase ();\r\n        for (let fileIndex = 0; fileIndex < this.files.length; fileIndex++) {\r\n            let file = this.files[fileIndex];\r\n            if (file.name.toLowerCase () === fileName) {\r\n                return file;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    IsOnlyUrlSource ()\r\n    {\r\n        if (this.files.length === 0) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < this.files.length; i++) {\r\n            let file = this.files[i];\r\n            if (file.source !== FileSource.Url && file.source !== FileSource.Decompressed) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    AddFile (file)\r\n    {\r\n        this.files.push (file);\r\n    }\r\n\r\n    GetFileContent (file, callbacks)\r\n    {\r\n        if (file.content !== null) {\r\n            callbacks.onReady ();\r\n            return;\r\n        }\r\n        let loaderPromise = null;\r\n        if (file.source === FileSource.Url) {\r\n            loaderPromise = RequestUrl (file.data, callbacks.onProgress);\r\n        } else if (file.source === FileSource.File) {\r\n            loaderPromise = ReadFile (file.data, callbacks.onProgress);\r\n        } else {\r\n            callbacks.onReady ();\r\n            return;\r\n        }\r\n        loaderPromise.then ((content) => {\r\n            file.SetContent (content);\r\n        }).catch (() => {\r\n        }).finally (() => {\r\n            callbacks.onReady ();\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}