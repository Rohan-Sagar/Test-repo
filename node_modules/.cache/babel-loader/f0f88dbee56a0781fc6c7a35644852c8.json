{"ast":null,"code":"import { RunTasksBatch } from '../core/taskrunner.js';\nimport { IsEqual } from '../geometry/geometry.js';\nimport { CreateObjectUrl, CreateObjectUrlWithMimeType } from '../io/bufferutils.js';\nimport { MaterialType } from '../model/material.js';\nimport { MeshInstanceId } from '../model/meshinstance.js';\nimport { GetMeshType, MeshType } from '../model/meshutils.js';\nimport { ConvertColorToThreeColor, GetShadingType, ShadingType } from './threeutils.js';\nimport * as THREE from 'three';\nexport class ModelToThreeConversionParams {\n  constructor() {\n    this.forceMediumpForMaterials = false;\n  }\n\n}\nexport class ModelToThreeConversionOutput {\n  constructor() {\n    this.defaultMaterial = null;\n    this.objectUrls = [];\n  }\n\n}\nexport class ThreeConversionStateHandler {\n  constructor(callbacks) {\n    this.callbacks = callbacks;\n    this.texturesNeeded = 0;\n    this.texturesLoaded = 0;\n    this.threeObject = null;\n  }\n\n  OnTextureNeeded() {\n    this.texturesNeeded += 1;\n  }\n\n  OnTextureLoaded() {\n    this.texturesLoaded += 1;\n    this.callbacks.onTextureLoaded();\n    this.Finish();\n  }\n\n  OnModelLoaded(threeObject) {\n    this.threeObject = threeObject;\n    this.Finish();\n  }\n\n  Finish() {\n    if (this.threeObject !== null && this.texturesNeeded === this.texturesLoaded) {\n      this.callbacks.onModelLoaded(this.threeObject);\n    }\n  }\n\n}\nexport class ThreeNodeTree {\n  constructor(rootNode, threeRootNode) {\n    this.meshInstances = [];\n    this.AddNode(rootNode, threeRootNode);\n  }\n\n  AddNode(node, threeNode) {\n    let matrix = node.GetTransformation().GetMatrix();\n    let threeMatrix = new THREE.Matrix4().fromArray(matrix.Get());\n    threeNode.applyMatrix4(threeMatrix);\n\n    for (let childNode of node.GetChildNodes()) {\n      let threeChildNode = new THREE.Object3D();\n      threeNode.add(threeChildNode);\n      this.AddNode(childNode, threeChildNode);\n    }\n\n    for (let meshIndex of node.GetMeshIndices()) {\n      this.meshInstances.push({\n        node: node,\n        threeNode: threeNode,\n        meshIndex: meshIndex\n      });\n    }\n  }\n\n  GetMeshInstances() {\n    return this.meshInstances;\n  }\n\n}\nexport function ConvertModelToThreeObject(model, params, output, callbacks) {\n  function CreateThreeMaterial(stateHandler, model, materialIndex, shadingType, params, output) {\n    function SetTextureParameters(texture, threeTexture) {\n      threeTexture.wrapS = THREE.RepeatWrapping;\n      threeTexture.wrapT = THREE.RepeatWrapping;\n      threeTexture.rotation = texture.rotation;\n      threeTexture.offset.x = texture.offset.x;\n      threeTexture.offset.y = texture.offset.y;\n      threeTexture.repeat.x = texture.scale.x;\n      threeTexture.repeat.y = texture.scale.y;\n    }\n\n    function LoadTexture(stateHandler, threeMaterial, texture, output, onTextureLoaded) {\n      if (texture === null || !texture.IsValid()) {\n        return;\n      }\n\n      let loader = new THREE.TextureLoader();\n      stateHandler.OnTextureNeeded();\n      let textureObjectUrl = null;\n\n      if (texture.mimeType !== null) {\n        textureObjectUrl = CreateObjectUrlWithMimeType(texture.buffer, texture.mimeType);\n      } else {\n        textureObjectUrl = CreateObjectUrl(texture.buffer);\n      }\n\n      output.objectUrls.push(textureObjectUrl);\n      loader.load(textureObjectUrl, threeTexture => {\n        SetTextureParameters(texture, threeTexture);\n        threeMaterial.needsUpdate = true;\n        onTextureLoaded(threeTexture);\n        stateHandler.OnTextureLoaded();\n      }, null, err => {\n        stateHandler.OnTextureLoaded();\n      });\n    }\n\n    let material = model.GetMaterial(materialIndex);\n    let baseColor = ConvertColorToThreeColor(material.color);\n\n    if (material.vertexColors) {\n      baseColor.setRGB(1.0, 1.0, 1.0);\n    }\n\n    let materialParams = {\n      color: baseColor,\n      vertexColors: material.vertexColors,\n      opacity: material.opacity,\n      transparent: material.transparent,\n      alphaTest: material.alphaTest,\n      side: THREE.DoubleSide\n    };\n\n    if (params.forceMediumpForMaterials) {\n      materialParams.precision = 'mediump';\n    }\n\n    let threeMaterial = null;\n\n    if (shadingType === ShadingType.Phong) {\n      threeMaterial = new THREE.MeshPhongMaterial(materialParams);\n\n      if (material.type === MaterialType.Phong) {\n        let specularColor = ConvertColorToThreeColor(material.specular);\n\n        if (IsEqual(material.shininess, 0.0)) {\n          specularColor.setRGB(0.0, 0.0, 0.0);\n        }\n\n        threeMaterial.specular = specularColor;\n        threeMaterial.shininess = material.shininess * 100.0;\n        LoadTexture(stateHandler, threeMaterial, material.specularMap, output, threeTexture => {\n          threeMaterial.specularMap = threeTexture;\n        });\n      }\n    } else if (shadingType === ShadingType.Physical) {\n      threeMaterial = new THREE.MeshStandardMaterial(materialParams);\n\n      if (material.type === MaterialType.Physical) {\n        threeMaterial.metalness = material.metalness;\n        threeMaterial.roughness = material.roughness;\n        LoadTexture(stateHandler, threeMaterial, material.metalnessMap, output, threeTexture => {\n          threeMaterial.metalness = 1.0;\n          threeMaterial.roughness = 1.0;\n          threeMaterial.metalnessMap = threeTexture;\n          threeMaterial.roughnessMap = threeTexture;\n        });\n      }\n    }\n\n    let emissiveColor = ConvertColorToThreeColor(material.emissive);\n    threeMaterial.emissive = emissiveColor;\n    LoadTexture(stateHandler, threeMaterial, material.diffuseMap, output, threeTexture => {\n      if (!material.multiplyDiffuseMap) {\n        threeMaterial.color.setRGB(1.0, 1.0, 1.0);\n      }\n\n      threeMaterial.map = threeTexture;\n    });\n    LoadTexture(stateHandler, threeMaterial, material.bumpMap, output, threeTexture => {\n      threeMaterial.bumpMap = threeTexture;\n    });\n    LoadTexture(stateHandler, threeMaterial, material.normalMap, output, threeTexture => {\n      threeMaterial.normalMap = threeTexture;\n    });\n    LoadTexture(stateHandler, threeMaterial, material.emissiveMap, output, threeTexture => {\n      threeMaterial.emissiveMap = threeTexture;\n    });\n\n    if (material.isDefault) {\n      output.defaultMaterial = threeMaterial;\n    }\n\n    return threeMaterial;\n  }\n\n  function CreateThreeMesh(model, meshInstanceId, modelThreeMaterials) {\n    let mesh = model.GetMesh(meshInstanceId.meshIndex);\n    let triangleCount = mesh.TriangleCount();\n    let triangleIndices = [];\n\n    for (let i = 0; i < triangleCount; i++) {\n      triangleIndices.push(i);\n    }\n\n    triangleIndices.sort((a, b) => {\n      let aTriangle = mesh.GetTriangle(a);\n      let bTriangle = mesh.GetTriangle(b);\n      return aTriangle.mat - bTriangle.mat;\n    });\n    let threeGeometry = new THREE.BufferGeometry();\n    let meshThreeMaterials = [];\n    let meshOriginalMaterials = [];\n    let modelToThreeMaterials = new Map();\n    let vertices = [];\n    let vertexColors = [];\n    let normals = [];\n    let uvs = [];\n    let groups = [];\n    groups.push({\n      start: 0,\n      end: -1\n    });\n    let meshHasVertexColors = mesh.VertexColorCount() > 0;\n    let meshHasUVs = mesh.TextureUVCount() > 0;\n\n    for (let i = 0; i < triangleIndices.length; i++) {\n      let triangleIndex = triangleIndices[i];\n      let triangle = mesh.GetTriangle(triangleIndex);\n      let v0 = mesh.GetVertex(triangle.v0);\n      let v1 = mesh.GetVertex(triangle.v1);\n      let v2 = mesh.GetVertex(triangle.v2);\n      vertices.push(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z, v2.x, v2.y, v2.z);\n\n      if (triangle.HasVertexColors()) {\n        let vc0 = ConvertColorToThreeColor(mesh.GetVertexColor(triangle.c0));\n        let vc1 = ConvertColorToThreeColor(mesh.GetVertexColor(triangle.c1));\n        let vc2 = ConvertColorToThreeColor(mesh.GetVertexColor(triangle.c2));\n        vertexColors.push(vc0.r, vc0.g, vc0.b, vc1.r, vc1.g, vc1.b, vc2.r, vc2.g, vc2.b);\n      } else if (meshHasVertexColors) {\n        vertexColors.push(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n      }\n\n      let n0 = mesh.GetNormal(triangle.n0);\n      let n1 = mesh.GetNormal(triangle.n1);\n      let n2 = mesh.GetNormal(triangle.n2);\n      normals.push(n0.x, n0.y, n0.z, n1.x, n1.y, n1.z, n2.x, n2.y, n2.z);\n\n      if (triangle.HasTextureUVs()) {\n        let u0 = mesh.GetTextureUV(triangle.u0);\n        let u1 = mesh.GetTextureUV(triangle.u1);\n        let u2 = mesh.GetTextureUV(triangle.u2);\n        uvs.push(u0.x, u0.y, u1.x, u1.y, u2.x, u2.y);\n      } else if (meshHasUVs) {\n        uvs.push(0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n      }\n\n      let modelMaterialIndex = triangle.mat;\n\n      if (!modelToThreeMaterials.has(modelMaterialIndex)) {\n        modelToThreeMaterials.set(modelMaterialIndex, meshThreeMaterials.length);\n        meshThreeMaterials.push(modelThreeMaterials[modelMaterialIndex]);\n        meshOriginalMaterials.push(modelMaterialIndex);\n\n        if (i > 0) {\n          groups[groups.length - 1].end = i - 1;\n          groups.push({\n            start: groups[groups.length - 1].end + 1,\n            end: -1\n          });\n        }\n      }\n    }\n\n    groups[groups.length - 1].end = triangleCount - 1;\n    threeGeometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    if (vertexColors.length !== 0) {\n      threeGeometry.setAttribute('color', new THREE.Float32BufferAttribute(vertexColors, 3));\n    }\n\n    threeGeometry.setAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n\n    if (uvs.length !== 0) {\n      threeGeometry.setAttribute('uv', new THREE.Float32BufferAttribute(uvs, 2));\n    }\n\n    for (let i = 0; i < groups.length; i++) {\n      let group = groups[i];\n      threeGeometry.addGroup(group.start * 3, (group.end - group.start + 1) * 3, i);\n    }\n\n    let threeMesh = new THREE.Mesh(threeGeometry, meshThreeMaterials);\n    threeMesh.name = mesh.GetName();\n    threeMesh.userData = {\n      originalMeshId: meshInstanceId,\n      originalMaterials: meshOriginalMaterials,\n      threeMaterials: null\n    };\n    return threeMesh;\n  }\n\n  function ConvertMesh(threeObject, model, meshInstanceId, modelThreeMaterials) {\n    let mesh = model.GetMesh(meshInstanceId.meshIndex);\n    let type = GetMeshType(mesh);\n\n    if (type === MeshType.TriangleMesh) {\n      let threeMesh = CreateThreeMesh(model, meshInstanceId, modelThreeMaterials);\n      threeObject.add(threeMesh);\n    }\n  }\n\n  function ConvertNodeHierarchy(threeRootNode, model, modelThreeMaterials, stateHandler) {\n    let rootNode = model.GetRootNode();\n    let nodeTree = new ThreeNodeTree(rootNode, threeRootNode);\n    let meshInstances = nodeTree.GetMeshInstances();\n    RunTasksBatch(meshInstances.length, 100, {\n      runTask: (firstMeshInstanceIndex, lastMeshInstanceIndex, onReady) => {\n        for (let meshInstanceIndex = firstMeshInstanceIndex; meshInstanceIndex <= lastMeshInstanceIndex; meshInstanceIndex++) {\n          let meshInstance = meshInstances[meshInstanceIndex];\n          let node = meshInstance.node;\n          let threeNode = meshInstance.threeNode;\n          let meshInstanceId = new MeshInstanceId(node.GetId(), meshInstance.meshIndex);\n          ConvertMesh(threeNode, model, meshInstanceId, modelThreeMaterials);\n        }\n\n        onReady();\n      },\n      onReady: () => {\n        stateHandler.OnModelLoaded(threeRootNode);\n      }\n    });\n  }\n\n  let stateHandler = new ThreeConversionStateHandler(callbacks);\n  let shadingType = GetShadingType(model);\n  let modelThreeMaterials = [];\n\n  for (let materialIndex = 0; materialIndex < model.MaterialCount(); materialIndex++) {\n    let threeMaterial = CreateThreeMaterial(stateHandler, model, materialIndex, shadingType, params, output);\n    modelThreeMaterials.push(threeMaterial);\n  }\n\n  let threeObject = new THREE.Object3D();\n  ConvertNodeHierarchy(threeObject, model, modelThreeMaterials, stateHandler);\n}","map":{"version":3,"names":["RunTasksBatch","IsEqual","CreateObjectUrl","CreateObjectUrlWithMimeType","MaterialType","MeshInstanceId","GetMeshType","MeshType","ConvertColorToThreeColor","GetShadingType","ShadingType","THREE","ModelToThreeConversionParams","constructor","forceMediumpForMaterials","ModelToThreeConversionOutput","defaultMaterial","objectUrls","ThreeConversionStateHandler","callbacks","texturesNeeded","texturesLoaded","threeObject","OnTextureNeeded","OnTextureLoaded","onTextureLoaded","Finish","OnModelLoaded","onModelLoaded","ThreeNodeTree","rootNode","threeRootNode","meshInstances","AddNode","node","threeNode","matrix","GetTransformation","GetMatrix","threeMatrix","Matrix4","fromArray","Get","applyMatrix4","childNode","GetChildNodes","threeChildNode","Object3D","add","meshIndex","GetMeshIndices","push","GetMeshInstances","ConvertModelToThreeObject","model","params","output","CreateThreeMaterial","stateHandler","materialIndex","shadingType","SetTextureParameters","texture","threeTexture","wrapS","RepeatWrapping","wrapT","rotation","offset","x","y","repeat","scale","LoadTexture","threeMaterial","IsValid","loader","TextureLoader","textureObjectUrl","mimeType","buffer","load","needsUpdate","err","material","GetMaterial","baseColor","color","vertexColors","setRGB","materialParams","opacity","transparent","alphaTest","side","DoubleSide","precision","Phong","MeshPhongMaterial","type","specularColor","specular","shininess","specularMap","Physical","MeshStandardMaterial","metalness","roughness","metalnessMap","roughnessMap","emissiveColor","emissive","diffuseMap","multiplyDiffuseMap","map","bumpMap","normalMap","emissiveMap","isDefault","CreateThreeMesh","meshInstanceId","modelThreeMaterials","mesh","GetMesh","triangleCount","TriangleCount","triangleIndices","i","sort","a","b","aTriangle","GetTriangle","bTriangle","mat","threeGeometry","BufferGeometry","meshThreeMaterials","meshOriginalMaterials","modelToThreeMaterials","Map","vertices","normals","uvs","groups","start","end","meshHasVertexColors","VertexColorCount","meshHasUVs","TextureUVCount","length","triangleIndex","triangle","v0","GetVertex","v1","v2","z","HasVertexColors","vc0","GetVertexColor","c0","vc1","c1","vc2","c2","r","g","n0","GetNormal","n1","n2","HasTextureUVs","u0","GetTextureUV","u1","u2","modelMaterialIndex","has","set","setAttribute","Float32BufferAttribute","group","addGroup","threeMesh","Mesh","name","GetName","userData","originalMeshId","originalMaterials","threeMaterials","ConvertMesh","TriangleMesh","ConvertNodeHierarchy","GetRootNode","nodeTree","runTask","firstMeshInstanceIndex","lastMeshInstanceIndex","onReady","meshInstanceIndex","meshInstance","GetId","MaterialCount"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/threejs/threeconverter.js"],"sourcesContent":["import { RunTasksBatch } from '../core/taskrunner.js';\r\nimport { IsEqual } from '../geometry/geometry.js';\r\nimport { CreateObjectUrl, CreateObjectUrlWithMimeType } from '../io/bufferutils.js';\r\nimport { MaterialType } from '../model/material.js';\r\nimport { MeshInstanceId } from '../model/meshinstance.js';\r\nimport { GetMeshType, MeshType } from '../model/meshutils.js';\r\nimport { ConvertColorToThreeColor, GetShadingType, ShadingType } from './threeutils.js';\r\n\r\nimport * as THREE from 'three';\r\n\r\nexport class ModelToThreeConversionParams\r\n{\r\n\tconstructor ()\r\n\t{\r\n\t\tthis.forceMediumpForMaterials = false;\r\n\t}\r\n}\r\n\r\nexport class ModelToThreeConversionOutput\r\n{\r\n\tconstructor ()\r\n\t{\r\n\t\tthis.defaultMaterial = null;\r\n\t\tthis.objectUrls = [];\r\n\t}\r\n}\r\n\r\nexport class ThreeConversionStateHandler\r\n{\r\n\tconstructor (callbacks)\r\n\t{\r\n\t\tthis.callbacks = callbacks;\r\n\t\tthis.texturesNeeded = 0;\r\n\t\tthis.texturesLoaded = 0;\r\n\t\tthis.threeObject = null;\r\n\t}\r\n\r\n\tOnTextureNeeded ()\r\n\t{\r\n\t\tthis.texturesNeeded += 1;\r\n\t}\r\n\r\n\tOnTextureLoaded ()\r\n\t{\r\n\t\tthis.texturesLoaded += 1;\r\n\t\tthis.callbacks.onTextureLoaded ();\r\n\t\tthis.Finish ();\r\n\t}\r\n\r\n\tOnModelLoaded (threeObject)\r\n\t{\r\n\t\tthis.threeObject = threeObject;\r\n\t\tthis.Finish ();\r\n\t}\r\n\r\n\tFinish ()\r\n\t{\r\n\t\tif (this.threeObject !== null && this.texturesNeeded === this.texturesLoaded) {\r\n\t\t\tthis.callbacks.onModelLoaded (this.threeObject);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport class ThreeNodeTree\r\n{\r\n\tconstructor (rootNode, threeRootNode)\r\n\t{\r\n\t\tthis.meshInstances = [];\r\n\t\tthis.AddNode (rootNode, threeRootNode);\r\n\t}\r\n\r\n\tAddNode (node, threeNode)\r\n\t{\r\n\t\tlet matrix = node.GetTransformation ().GetMatrix ();\r\n\t\tlet threeMatrix = new THREE.Matrix4 ().fromArray (matrix.Get ());\r\n\t\tthreeNode.applyMatrix4 (threeMatrix);\r\n\r\n\t\tfor (let childNode of node.GetChildNodes ()) {\r\n\t\t\tlet threeChildNode = new THREE.Object3D ();\r\n\t\t\tthreeNode.add (threeChildNode);\r\n\t\t\tthis.AddNode (childNode, threeChildNode);\r\n\t\t}\r\n\t\tfor (let meshIndex of node.GetMeshIndices ()) {\r\n\t\t\tthis.meshInstances.push ({\r\n\t\t\t\tnode : node,\r\n\t\t\t\tthreeNode : threeNode,\r\n\t\t\t\tmeshIndex : meshIndex\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tGetMeshInstances ()\r\n\t{\r\n\t\treturn this.meshInstances;\r\n\t}\r\n}\r\n\r\nexport function ConvertModelToThreeObject (model, params, output, callbacks)\r\n{\r\n\tfunction CreateThreeMaterial (stateHandler, model, materialIndex, shadingType, params, output)\r\n\t{\r\n\t\tfunction SetTextureParameters (texture, threeTexture)\r\n\t\t{\r\n\t\t\tthreeTexture.wrapS = THREE.RepeatWrapping;\r\n\t\t\tthreeTexture.wrapT = THREE.RepeatWrapping;\r\n\t\t\tthreeTexture.rotation = texture.rotation;\r\n\t\t\tthreeTexture.offset.x = texture.offset.x;\r\n\t\t\tthreeTexture.offset.y = texture.offset.y;\r\n\t\t\tthreeTexture.repeat.x = texture.scale.x;\r\n\t\t\tthreeTexture.repeat.y = texture.scale.y;\r\n\t\t}\r\n\r\n\t\tfunction LoadTexture (stateHandler, threeMaterial, texture, output, onTextureLoaded)\r\n\t\t{\r\n\t\t\tif (texture === null || !texture.IsValid ()) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlet loader = new THREE.TextureLoader ();\r\n\t\t\tstateHandler.OnTextureNeeded ();\r\n\t\t\tlet textureObjectUrl = null;\r\n\t\t\tif (texture.mimeType !== null) {\r\n\t\t\t\ttextureObjectUrl = CreateObjectUrlWithMimeType (texture.buffer, texture.mimeType);\r\n\t\t\t} else {\r\n\t\t\t\ttextureObjectUrl = CreateObjectUrl (texture.buffer);\r\n\t\t\t}\r\n\t\t\toutput.objectUrls.push (textureObjectUrl);\r\n\t\t\tloader.load (textureObjectUrl,\r\n\t\t\t\t(threeTexture) => {\r\n\t\t\t\t\tSetTextureParameters (texture, threeTexture);\r\n\t\t\t\t\tthreeMaterial.needsUpdate = true;\r\n\t\t\t\t\tonTextureLoaded (threeTexture);\r\n\t\t\t\t\tstateHandler.OnTextureLoaded ();\r\n\t\t\t\t},\r\n\t\t\t\tnull,\r\n\t\t\t\t(err) => {\r\n\t\t\t\t\tstateHandler.OnTextureLoaded ();\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet material = model.GetMaterial (materialIndex);\r\n\t\tlet baseColor = ConvertColorToThreeColor (material.color);\r\n\t\tif (material.vertexColors) {\r\n\t\t\tbaseColor.setRGB (1.0, 1.0, 1.0);\r\n\t\t}\r\n\r\n\t\tlet materialParams = {\r\n\t\t\tcolor : baseColor,\r\n\t\t\tvertexColors : material.vertexColors,\r\n\t\t\topacity : material.opacity,\r\n\t\t\ttransparent : material.transparent,\r\n\t\t\talphaTest : material.alphaTest,\r\n\t\t\tside : THREE.DoubleSide\r\n\t\t};\r\n\r\n\t\tif (params.forceMediumpForMaterials) {\r\n\t\t\tmaterialParams.precision = 'mediump';\r\n\t\t}\r\n\r\n\t\tlet threeMaterial = null;\r\n\t\tif (shadingType === ShadingType.Phong) {\r\n\t\t\tthreeMaterial = new THREE.MeshPhongMaterial (materialParams);\r\n\t\t\tif (material.type === MaterialType.Phong) {\r\n\t\t\t\tlet specularColor = ConvertColorToThreeColor (material.specular);\r\n\t\t\t\tif (IsEqual (material.shininess, 0.0)) {\r\n\t\t\t\t\tspecularColor.setRGB (0.0, 0.0, 0.0);\r\n\t\t\t\t}\r\n\t\t\t\tthreeMaterial.specular = specularColor;\r\n\t\t\t\tthreeMaterial.shininess = material.shininess * 100.0;\r\n\t\t\t\tLoadTexture (stateHandler, threeMaterial, material.specularMap, output, (threeTexture) => {\r\n\t\t\t\t\tthreeMaterial.specularMap = threeTexture;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else if (shadingType === ShadingType.Physical) {\r\n\t\t\tthreeMaterial = new THREE.MeshStandardMaterial (materialParams);\r\n\t\t\tif (material.type === MaterialType.Physical) {\r\n\t\t\t\tthreeMaterial.metalness = material.metalness;\r\n\t\t\t\tthreeMaterial.roughness = material.roughness;\r\n\t\t\t\tLoadTexture (stateHandler, threeMaterial, material.metalnessMap, output, (threeTexture) => {\r\n\t\t\t\t\tthreeMaterial.metalness = 1.0;\r\n\t\t\t\t\tthreeMaterial.roughness = 1.0;\r\n\t\t\t\t\tthreeMaterial.metalnessMap = threeTexture;\r\n\t\t\t\t\tthreeMaterial.roughnessMap = threeTexture;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet emissiveColor = ConvertColorToThreeColor (material.emissive);\r\n\t\tthreeMaterial.emissive = emissiveColor;\r\n\r\n\t\tLoadTexture (stateHandler, threeMaterial, material.diffuseMap, output, (threeTexture) => {\r\n\t\t\tif (!material.multiplyDiffuseMap) {\r\n\t\t\t\tthreeMaterial.color.setRGB (1.0, 1.0, 1.0);\r\n\t\t\t}\r\n\t\t\tthreeMaterial.map = threeTexture;\r\n\t\t});\r\n\t\tLoadTexture (stateHandler, threeMaterial, material.bumpMap, output, (threeTexture) => {\r\n\t\t\tthreeMaterial.bumpMap = threeTexture;\r\n\t\t});\r\n\t\tLoadTexture (stateHandler, threeMaterial, material.normalMap, output, (threeTexture) => {\r\n\t\t\tthreeMaterial.normalMap = threeTexture;\r\n\t\t});\r\n\t\tLoadTexture (stateHandler, threeMaterial, material.emissiveMap, output, (threeTexture) => {\r\n\t\t\tthreeMaterial.emissiveMap = threeTexture;\r\n\t\t});\r\n\r\n\t\tif (material.isDefault) {\r\n\t\t\toutput.defaultMaterial = threeMaterial;\r\n\t\t}\r\n\r\n\t\treturn threeMaterial;\r\n\t}\r\n\r\n\tfunction CreateThreeMesh (model, meshInstanceId, modelThreeMaterials)\r\n\t{\r\n\t\tlet mesh = model.GetMesh (meshInstanceId.meshIndex);\r\n\t\tlet triangleCount = mesh.TriangleCount ();\r\n\r\n\t\tlet triangleIndices = [];\r\n\t\tfor (let i = 0; i < triangleCount; i++) {\r\n\t\t\ttriangleIndices.push (i);\r\n\t\t}\r\n\t\ttriangleIndices.sort ((a, b) => {\r\n\t\t\tlet aTriangle = mesh.GetTriangle (a);\r\n\t\t\tlet bTriangle = mesh.GetTriangle (b);\r\n\t\t\treturn aTriangle.mat - bTriangle.mat;\r\n\t\t});\r\n\r\n\t\tlet threeGeometry = new THREE.BufferGeometry ();\r\n\t\tlet meshThreeMaterials = [];\r\n\t\tlet meshOriginalMaterials = [];\r\n\t\tlet modelToThreeMaterials = new Map ();\r\n\r\n\t\tlet vertices = [];\r\n\t\tlet vertexColors = [];\r\n\t\tlet normals = [];\r\n\t\tlet uvs = [];\r\n\r\n\t\tlet groups = [];\r\n\t\tgroups.push ({\r\n\t\t\tstart : 0,\r\n\t\t\tend : -1\r\n\t\t});\r\n\r\n\t\tlet meshHasVertexColors = (mesh.VertexColorCount () > 0);\r\n\t\tlet meshHasUVs = (mesh.TextureUVCount () > 0);\r\n\t\tfor (let i = 0; i < triangleIndices.length; i++) {\r\n\t\t\tlet triangleIndex = triangleIndices[i];\r\n\t\t\tlet triangle = mesh.GetTriangle (triangleIndex);\r\n\r\n\t\t\tlet v0 = mesh.GetVertex (triangle.v0);\r\n\t\t\tlet v1 = mesh.GetVertex (triangle.v1);\r\n\t\t\tlet v2 = mesh.GetVertex (triangle.v2);\r\n\t\t\tvertices.push (v0.x, v0.y, v0.z, v1.x, v1.y, v1.z, v2.x, v2.y, v2.z);\r\n\r\n\t\t\tif (triangle.HasVertexColors ()) {\r\n\t\t\t\tlet vc0 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c0));\r\n\t\t\t\tlet vc1 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c1));\r\n\t\t\t\tlet vc2 = ConvertColorToThreeColor (mesh.GetVertexColor (triangle.c2));\r\n\t\t\t\tvertexColors.push (\r\n\t\t\t\t\tvc0.r, vc0.g, vc0.b,\r\n\t\t\t\t\tvc1.r, vc1.g, vc1.b,\r\n\t\t\t\t\tvc2.r, vc2.g, vc2.b\r\n\t\t\t\t);\r\n\t\t\t} else if (meshHasVertexColors) {\r\n\t\t\t\tvertexColors.push (\r\n\t\t\t\t\t0.0, 0.0, 0.0,\r\n\t\t\t\t\t0.0, 0.0, 0.0,\r\n\t\t\t\t\t0.0, 0.0, 0.0\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tlet n0 = mesh.GetNormal (triangle.n0);\r\n\t\t\tlet n1 = mesh.GetNormal (triangle.n1);\r\n\t\t\tlet n2 = mesh.GetNormal (triangle.n2);\r\n\t\t\tnormals.push (n0.x, n0.y, n0.z, n1.x, n1.y, n1.z, n2.x, n2.y, n2.z);\r\n\r\n\t\t\tif (triangle.HasTextureUVs ()) {\r\n\t\t\t\tlet u0 = mesh.GetTextureUV (triangle.u0);\r\n\t\t\t\tlet u1 = mesh.GetTextureUV (triangle.u1);\r\n\t\t\t\tlet u2 = mesh.GetTextureUV (triangle.u2);\r\n\t\t\t\tuvs.push (u0.x, u0.y, u1.x, u1.y, u2.x, u2.y);\r\n\t\t\t} else if (meshHasUVs) {\r\n\t\t\t\tuvs.push (0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\r\n\t\t\t}\r\n\r\n\t\t\tlet modelMaterialIndex = triangle.mat;\r\n\t\t\tif (!modelToThreeMaterials.has (modelMaterialIndex)) {\r\n\t\t\t\tmodelToThreeMaterials.set (modelMaterialIndex, meshThreeMaterials.length);\r\n\t\t\t\tmeshThreeMaterials.push (modelThreeMaterials[modelMaterialIndex]);\r\n\t\t\t\tmeshOriginalMaterials.push (modelMaterialIndex);\r\n\t\t\t\tif (i > 0) {\r\n\t\t\t\t\tgroups[groups.length - 1].end = i - 1;\r\n\t\t\t\t\tgroups.push ({\r\n\t\t\t\t\t\tstart : groups[groups.length - 1].end + 1,\r\n\t\t\t\t\t\tend : -1\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgroups[groups.length - 1].end = triangleCount - 1;\r\n\r\n\t\tthreeGeometry.setAttribute ('position', new THREE.Float32BufferAttribute (vertices, 3));\r\n\t\tif (vertexColors.length !== 0) {\r\n\t\t\tthreeGeometry.setAttribute ('color', new THREE.Float32BufferAttribute (vertexColors, 3));\r\n\t\t}\r\n\t\tthreeGeometry.setAttribute ('normal', new THREE.Float32BufferAttribute (normals, 3));\r\n\t\tif (uvs.length !== 0) {\r\n\t\t\tthreeGeometry.setAttribute ('uv', new THREE.Float32BufferAttribute (uvs, 2));\r\n\t\t}\r\n\t\tfor (let i = 0; i < groups.length; i++) {\r\n\t\t\tlet group = groups[i];\r\n\t\t\tthreeGeometry.addGroup (group.start * 3, (group.end - group.start + 1) * 3, i);\r\n\t\t}\r\n\r\n\t\tlet threeMesh = new THREE.Mesh (threeGeometry, meshThreeMaterials);\r\n\t\tthreeMesh.name = mesh.GetName ();\r\n\t\tthreeMesh.userData = {\r\n\t\t\toriginalMeshId : meshInstanceId,\r\n\t\t\toriginalMaterials : meshOriginalMaterials,\r\n\t\t\tthreeMaterials : null\r\n\t\t};\r\n\r\n\t\treturn threeMesh;\r\n\t}\r\n\r\n\tfunction ConvertMesh (threeObject, model, meshInstanceId, modelThreeMaterials)\r\n\t{\r\n\t\tlet mesh = model.GetMesh (meshInstanceId.meshIndex);\r\n\t\tlet type = GetMeshType (mesh);\r\n\t\tif (type === MeshType.TriangleMesh) {\r\n\t\t\tlet threeMesh = CreateThreeMesh (model, meshInstanceId, modelThreeMaterials);\r\n\t\t\tthreeObject.add (threeMesh);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ConvertNodeHierarchy (threeRootNode, model, modelThreeMaterials, stateHandler)\r\n\t{\r\n\t\tlet rootNode = model.GetRootNode ();\r\n\t\tlet nodeTree = new ThreeNodeTree (rootNode, threeRootNode);\r\n\t\tlet meshInstances = nodeTree.GetMeshInstances ();\r\n\r\n\t\tRunTasksBatch (meshInstances.length, 100, {\r\n\t\t\trunTask : (firstMeshInstanceIndex, lastMeshInstanceIndex, onReady) => {\r\n\t\t\t\tfor (let meshInstanceIndex = firstMeshInstanceIndex; meshInstanceIndex <= lastMeshInstanceIndex; meshInstanceIndex++) {\r\n\t\t\t\t\tlet meshInstance = meshInstances[meshInstanceIndex];\r\n\t\t\t\t\tlet node = meshInstance.node;\r\n\t\t\t\t\tlet threeNode = meshInstance.threeNode;\r\n\t\t\t\t\tlet meshInstanceId = new MeshInstanceId (node.GetId (), meshInstance.meshIndex);\r\n\t\t\t\t\tConvertMesh (threeNode, model, meshInstanceId, modelThreeMaterials);\r\n\t\t\t\t}\r\n\t\t\t\tonReady ();\r\n\t\t\t},\r\n\t\t\tonReady : () => {\r\n\t\t\t\tstateHandler.OnModelLoaded (threeRootNode);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tlet stateHandler = new ThreeConversionStateHandler (callbacks);\r\n\tlet shadingType = GetShadingType (model);\r\n\r\n\tlet modelThreeMaterials = [];\r\n\tfor (let materialIndex = 0; materialIndex < model.MaterialCount (); materialIndex++) {\r\n\t\tlet threeMaterial = CreateThreeMaterial (stateHandler, model, materialIndex, shadingType, params, output);\r\n\t\tmodelThreeMaterials.push (threeMaterial);\r\n\t}\r\n\r\n\tlet threeObject = new THREE.Object3D ();\r\n\tConvertNodeHierarchy (threeObject, model, modelThreeMaterials, stateHandler);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}