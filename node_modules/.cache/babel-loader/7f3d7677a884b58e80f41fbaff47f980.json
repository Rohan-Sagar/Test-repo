{"ast":null,"code":"import { MeshInstance, MeshInstanceId } from './meshinstance.js';\nimport { Node } from './node.js';\nimport { ModelObject3D } from './object.js';\nexport class Model extends ModelObject3D {\n  constructor() {\n    super();\n    this.root = new Node();\n    this.materials = [];\n    this.meshes = [];\n  }\n\n  GetRootNode() {\n    return this.root;\n  }\n\n  MaterialCount() {\n    return this.materials.length;\n  }\n\n  MeshCount() {\n    return this.meshes.length;\n  }\n\n  MeshInstanceCount() {\n    let count = 0;\n    this.root.Enumerate(node => {\n      count += node.MeshIndexCount();\n    });\n    return count;\n  }\n\n  VertexCount() {\n    let count = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      count += meshInstance.VertexCount();\n    });\n    return count;\n  }\n\n  VertexColorCount() {\n    let count = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      count += meshInstance.VertexColorCount();\n    });\n    return count;\n  }\n\n  NormalCount() {\n    let count = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      count += meshInstance.NormalCount();\n    });\n    return count;\n  }\n\n  TextureUVCount() {\n    let count = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      count += meshInstance.TextureUVCount();\n    });\n    return count;\n  }\n\n  TriangleCount() {\n    let count = 0;\n    this.EnumerateMeshInstances(meshInstance => {\n      count += meshInstance.TriangleCount();\n    });\n    return count;\n  }\n\n  AddMaterial(material) {\n    this.materials.push(material);\n    return this.materials.length - 1;\n  }\n\n  GetMaterial(index) {\n    return this.materials[index];\n  }\n\n  AddMesh(mesh) {\n    this.meshes.push(mesh);\n    return this.meshes.length - 1;\n  }\n\n  AddMeshToRootNode(mesh) {\n    const meshIndex = this.AddMesh(mesh);\n    this.root.AddMeshIndex(meshIndex);\n    return meshIndex;\n  }\n\n  RemoveMesh(index) {\n    this.meshes.splice(index, 1);\n    this.root.Enumerate(node => {\n      for (let i = 0; i < node.meshIndices.length; i++) {\n        if (node.meshIndices[i] === index) {\n          node.meshIndices.splice(i, 1);\n          i -= 1;\n        } else if (node.meshIndices[i] > index) {\n          node.meshIndices[i] -= 1;\n        }\n      }\n    });\n  }\n\n  GetMesh(index) {\n    return this.meshes[index];\n  }\n\n  GetMeshInstance(instanceId) {\n    let foundNode = null;\n    this.root.Enumerate(node => {\n      if (node.GetId() === instanceId.nodeId) {\n        foundNode = node;\n      }\n    });\n\n    if (foundNode === null) {\n      return null;\n    }\n\n    const nodeMeshIndices = foundNode.GetMeshIndices();\n\n    if (nodeMeshIndices.indexOf(instanceId.meshIndex) === -1) {\n      return null;\n    }\n\n    let foundMesh = this.GetMesh(instanceId.meshIndex);\n    let id = new MeshInstanceId(foundNode.GetId(), instanceId.meshIndex);\n    return new MeshInstance(id, foundNode, foundMesh);\n  }\n\n  EnumerateMeshes(onMesh) {\n    for (const mesh of this.meshes) {\n      onMesh(mesh);\n    }\n  }\n\n  EnumerateMeshInstances(onMeshInstance) {\n    this.root.Enumerate(node => {\n      for (let meshIndex of node.GetMeshIndices()) {\n        let id = new MeshInstanceId(node.GetId(), meshIndex);\n        let mesh = this.GetMesh(meshIndex);\n        let meshInstance = new MeshInstance(id, node, mesh);\n        onMeshInstance(meshInstance);\n      }\n    });\n  }\n\n  EnumerateTransformedMeshes(onMesh) {\n    this.EnumerateMeshInstances(meshInstance => {\n      const transformed = meshInstance.GetTransformedMesh();\n      onMesh(transformed);\n    });\n  }\n\n  EnumerateVertices(onVertex) {\n    this.EnumerateMeshInstances(meshInstance => {\n      meshInstance.EnumerateVertices(onVertex);\n    });\n  }\n\n  EnumerateTriangleVertexIndices(onTriangleVertexIndices) {\n    this.EnumerateMeshInstances(meshInstance => {\n      meshInstance.EnumerateTriangleVertexIndices(onTriangleVertexIndices);\n    });\n  }\n\n  EnumerateTriangleVertices(onTriangleVertices) {\n    this.EnumerateMeshInstances(meshInstance => {\n      meshInstance.EnumerateTriangleVertices(onTriangleVertices);\n    });\n  }\n\n}","map":{"version":3,"names":["MeshInstance","MeshInstanceId","Node","ModelObject3D","Model","constructor","root","materials","meshes","GetRootNode","MaterialCount","length","MeshCount","MeshInstanceCount","count","Enumerate","node","MeshIndexCount","VertexCount","EnumerateMeshInstances","meshInstance","VertexColorCount","NormalCount","TextureUVCount","TriangleCount","AddMaterial","material","push","GetMaterial","index","AddMesh","mesh","AddMeshToRootNode","meshIndex","AddMeshIndex","RemoveMesh","splice","i","meshIndices","GetMesh","GetMeshInstance","instanceId","foundNode","GetId","nodeId","nodeMeshIndices","GetMeshIndices","indexOf","foundMesh","id","EnumerateMeshes","onMesh","onMeshInstance","EnumerateTransformedMeshes","transformed","GetTransformedMesh","EnumerateVertices","onVertex","EnumerateTriangleVertexIndices","onTriangleVertexIndices","EnumerateTriangleVertices","onTriangleVertices"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/model/model.js"],"sourcesContent":["import { MeshInstance, MeshInstanceId } from './meshinstance.js';\r\nimport { Node } from './node.js';\r\nimport { ModelObject3D } from './object.js';\r\n\r\nexport class Model extends ModelObject3D\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n        this.root = new Node ();\r\n        this.materials = [];\r\n        this.meshes = [];\r\n    }\r\n\r\n    GetRootNode ()\r\n    {\r\n        return this.root;\r\n    }\r\n\r\n    MaterialCount ()\r\n    {\r\n        return this.materials.length;\r\n    }\r\n\r\n    MeshCount ()\r\n    {\r\n        return this.meshes.length;\r\n    }\r\n\r\n    MeshInstanceCount ()\r\n    {\r\n        let count = 0;\r\n        this.root.Enumerate ((node) => {\r\n            count += node.MeshIndexCount ();\r\n        });\r\n        return count;\r\n    }\r\n\r\n    VertexCount ()\r\n    {\r\n        let count = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            count += meshInstance.VertexCount ();\r\n        });\r\n        return count;\r\n    }\r\n\r\n    VertexColorCount ()\r\n    {\r\n        let count = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            count += meshInstance.VertexColorCount ();\r\n        });\r\n        return count;\r\n    }\r\n\r\n    NormalCount ()\r\n    {\r\n        let count = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            count += meshInstance.NormalCount ();\r\n        });\r\n        return count;\r\n    }\r\n\r\n    TextureUVCount ()\r\n    {\r\n        let count = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            count += meshInstance.TextureUVCount ();\r\n        });\r\n        return count;\r\n    }\r\n\r\n    TriangleCount ()\r\n    {\r\n        let count = 0;\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            count += meshInstance.TriangleCount ();\r\n        });\r\n        return count;\r\n    }\r\n\r\n    AddMaterial (material)\r\n    {\r\n        this.materials.push (material);\r\n        return this.materials.length - 1;\r\n    }\r\n\r\n    GetMaterial (index)\r\n    {\r\n        return this.materials[index];\r\n    }\r\n\r\n    AddMesh (mesh)\r\n    {\r\n        this.meshes.push (mesh);\r\n        return this.meshes.length - 1;\r\n    }\r\n\r\n    AddMeshToRootNode (mesh)\r\n    {\r\n        const meshIndex = this.AddMesh (mesh);\r\n        this.root.AddMeshIndex (meshIndex);\r\n        return meshIndex;\r\n    }\r\n\r\n    RemoveMesh (index)\r\n    {\r\n        this.meshes.splice (index, 1);\r\n        this.root.Enumerate ((node) => {\r\n            for (let i = 0; i < node.meshIndices.length; i++) {\r\n                if (node.meshIndices[i] === index) {\r\n                    node.meshIndices.splice (i, 1);\r\n                    i -= 1;\r\n                } else if (node.meshIndices[i] > index) {\r\n                    node.meshIndices[i] -= 1;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    GetMesh (index)\r\n    {\r\n        return this.meshes[index];\r\n    }\r\n\r\n    GetMeshInstance (instanceId)\r\n    {\r\n        let foundNode = null;\r\n        this.root.Enumerate ((node) => {\r\n            if (node.GetId () === instanceId.nodeId) {\r\n                foundNode = node;\r\n            }\r\n        });\r\n        if (foundNode === null) {\r\n            return null;\r\n        }\r\n        const nodeMeshIndices = foundNode.GetMeshIndices ();\r\n        if (nodeMeshIndices.indexOf (instanceId.meshIndex) === -1) {\r\n            return null;\r\n        }\r\n        let foundMesh = this.GetMesh (instanceId.meshIndex);\r\n        let id = new MeshInstanceId (foundNode.GetId (), instanceId.meshIndex);\r\n        return new MeshInstance (id, foundNode, foundMesh);\r\n    }\r\n\r\n    EnumerateMeshes (onMesh)\r\n    {\r\n        for (const mesh of this.meshes) {\r\n            onMesh (mesh);\r\n        }\r\n    }\r\n\r\n    EnumerateMeshInstances (onMeshInstance)\r\n    {\r\n        this.root.Enumerate ((node) => {\r\n            for (let meshIndex of node.GetMeshIndices ()) {\r\n                let id = new MeshInstanceId (node.GetId (), meshIndex);\r\n                let mesh = this.GetMesh (meshIndex);\r\n                let meshInstance = new MeshInstance (id, node, mesh);\r\n                onMeshInstance (meshInstance);\r\n            }\r\n        });\r\n    }\r\n\r\n    EnumerateTransformedMeshes (onMesh)\r\n    {\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            const transformed = meshInstance.GetTransformedMesh ();\r\n            onMesh (transformed);\r\n        });\r\n    }\r\n\r\n    EnumerateVertices (onVertex)\r\n    {\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            meshInstance.EnumerateVertices (onVertex);\r\n        });\r\n    }\r\n\r\n    EnumerateTriangleVertexIndices (onTriangleVertexIndices)\r\n    {\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            meshInstance.EnumerateTriangleVertexIndices (onTriangleVertexIndices);\r\n        });\r\n    }\r\n\r\n    EnumerateTriangleVertices (onTriangleVertices)\r\n    {\r\n        this.EnumerateMeshInstances ((meshInstance) => {\r\n            meshInstance.EnumerateTriangleVertices (onTriangleVertices);\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}