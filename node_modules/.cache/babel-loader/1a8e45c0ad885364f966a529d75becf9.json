{"ast":null,"code":"import { IsObjectEmpty } from '../core/core.js';\nimport { Coord3D } from '../geometry/coord3d.js';\nimport { Direction } from '../geometry/geometry.js';\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\nimport { Node, NodeType } from '../model/node.js';\nimport { Mesh } from '../model/mesh.js';\nimport { Triangle } from '../model/triangle.js';\nimport { ImporterBase } from './importerbase.js';\nimport { Quaternion } from '../geometry/quaternion.js';\nimport { Matrix } from '../geometry/matrix.js';\nimport { Transformation } from '../geometry/transformation.js';\nimport { ColorToMaterialConverter } from './importerutils.js';\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\nexport class ImporterBim extends ImporterBase {\n  constructor() {\n    super();\n  }\n\n  CanImportExtension(extension) {\n    return extension === 'bim';\n  }\n\n  GetUpDirection() {\n    return Direction.Z;\n  }\n\n  ClearContent() {\n    this.meshIdToMesh = null;\n    this.colorToMaterial = null;\n  }\n\n  ResetContent() {\n    this.meshIdToMesh = new Map();\n    this.colorToMaterial = new ColorToMaterialConverter(this.model);\n  }\n\n  ImportContent(fileContent, onFinish) {\n    let textContent = ArrayBufferToUtf8String(fileContent);\n    let bimJson = null;\n\n    try {\n      bimJson = JSON.parse(textContent);\n    } catch (err) {\n      this.SetError('Failed to parse bim file.');\n      onFinish();\n      return;\n    }\n\n    for (let bimMesh of bimJson.meshes) {\n      this.meshIdToMesh.set(bimMesh.mesh_id, bimMesh);\n    }\n\n    this.ImportProperties(bimJson, this.model);\n\n    for (let bimElement of bimJson.elements) {\n      let mesh = this.ImportElement(bimElement);\n      mesh.SetName(bimElement.type);\n      this.ImportProperties(bimElement, mesh);\n    }\n\n    onFinish();\n  }\n\n  ImportElement(bimElement) {\n    let defaultMaterialIndex = this.colorToMaterial.GetMaterialIndex(bimElement.color.r, bimElement.color.g, bimElement.color.b, bimElement.color.a);\n    let rootNode = this.model.GetRootNode();\n    let bimMesh = this.meshIdToMesh.get(bimElement.mesh_id);\n    let mesh = this.ImportMesh(bimMesh, triangleIndex => {\n      if (bimElement.face_colors) {\n        let faceMaterialIndex = this.colorToMaterial.GetMaterialIndex(bimElement.face_colors[triangleIndex * 4 + 0], bimElement.face_colors[triangleIndex * 4 + 1], bimElement.face_colors[triangleIndex * 4 + 2], bimElement.face_colors[triangleIndex * 4 + 3]);\n        return faceMaterialIndex;\n      } else {\n        return defaultMaterialIndex;\n      }\n    });\n    let meshIndex = this.model.AddMesh(mesh);\n    let elementNode = new Node();\n    elementNode.SetType(NodeType.MeshNode);\n    elementNode.AddMeshIndex(meshIndex);\n    let translation = new Coord3D(0.0, 0.0, 0.0);\n\n    if (bimElement.vector) {\n      translation = new Coord3D(bimElement.vector.x, bimElement.vector.y, bimElement.vector.z);\n    }\n\n    let rotation = new Quaternion(0.0, 0.0, 0.0, 1.0);\n\n    if (bimElement.rotation) {\n      rotation = new Quaternion(bimElement.rotation.qx, bimElement.rotation.qy, bimElement.rotation.qz, bimElement.rotation.qw);\n    }\n\n    let scale = new Coord3D(1.0, 1.0, 1.0);\n    let matrix = new Matrix().ComposeTRS(translation, rotation, scale);\n    elementNode.SetTransformation(new Transformation(matrix));\n    rootNode.AddChildNode(elementNode);\n    return mesh;\n  }\n\n  ImportMesh(bimMesh, getMaterialIndex) {\n    let mesh = new Mesh();\n\n    for (let i = 0; i < bimMesh.coordinates.length; i += 3) {\n      mesh.AddVertex(new Coord3D(bimMesh.coordinates[i + 0], bimMesh.coordinates[i + 1], bimMesh.coordinates[i + 2]));\n    }\n\n    for (let i = 0; i < bimMesh.indices.length; i += 3) {\n      let triangle = new Triangle(bimMesh.indices[i + 0], bimMesh.indices[i + 1], bimMesh.indices[i + 2]);\n      triangle.SetMaterial(getMaterialIndex(i / 3));\n      mesh.AddTriangle(triangle);\n    }\n\n    return mesh;\n  }\n\n  ImportProperties(source, target) {\n    function AddProperty(group, name, value) {\n      if (value === undefined || value === null) {\n        return;\n      }\n\n      let property = new Property(PropertyType.Text, name, value);\n      group.AddProperty(property);\n    }\n\n    if (!source.info || IsObjectEmpty(source.info)) {\n      return;\n    }\n\n    let info = source.info;\n    let propertyGroup = new PropertyGroup('Info');\n    AddProperty(propertyGroup, 'Guid', source.guid);\n    AddProperty(propertyGroup, 'Type', source.type);\n\n    for (let propertyName in info) {\n      if (Object.prototype.hasOwnProperty.call(info, propertyName)) {\n        if (typeof info[propertyName] === 'string') {\n          AddProperty(propertyGroup, propertyName, info[propertyName]);\n        }\n      }\n    }\n\n    target.AddPropertyGroup(propertyGroup);\n  }\n\n}","map":{"version":3,"names":["IsObjectEmpty","Coord3D","Direction","ArrayBufferToUtf8String","Node","NodeType","Mesh","Triangle","ImporterBase","Quaternion","Matrix","Transformation","ColorToMaterialConverter","Property","PropertyGroup","PropertyType","ImporterBim","constructor","CanImportExtension","extension","GetUpDirection","Z","ClearContent","meshIdToMesh","colorToMaterial","ResetContent","Map","model","ImportContent","fileContent","onFinish","textContent","bimJson","JSON","parse","err","SetError","bimMesh","meshes","set","mesh_id","ImportProperties","bimElement","elements","mesh","ImportElement","SetName","type","defaultMaterialIndex","GetMaterialIndex","color","r","g","b","a","rootNode","GetRootNode","get","ImportMesh","triangleIndex","face_colors","faceMaterialIndex","meshIndex","AddMesh","elementNode","SetType","MeshNode","AddMeshIndex","translation","vector","x","y","z","rotation","qx","qy","qz","qw","scale","matrix","ComposeTRS","SetTransformation","AddChildNode","getMaterialIndex","i","coordinates","length","AddVertex","indices","triangle","SetMaterial","AddTriangle","source","target","AddProperty","group","name","value","undefined","property","Text","info","propertyGroup","guid","propertyName","Object","prototype","hasOwnProperty","call","AddPropertyGroup"],"sources":["/Users/rohansagar/Desktop/node+react/client/node-react-3d/node_modules/online-3d-viewer/source/engine/import/importerbim.js"],"sourcesContent":["import { IsObjectEmpty } from '../core/core.js';\r\nimport { Coord3D } from '../geometry/coord3d.js';\r\nimport { Direction } from '../geometry/geometry.js';\r\nimport { ArrayBufferToUtf8String } from '../io/bufferutils.js';\r\nimport { Node, NodeType } from '../model/node.js';\r\nimport { Mesh } from '../model/mesh.js';\r\nimport { Triangle } from '../model/triangle.js';\r\nimport { ImporterBase } from './importerbase.js';\r\nimport { Quaternion } from '../geometry/quaternion.js';\r\nimport { Matrix } from '../geometry/matrix.js';\r\nimport { Transformation } from '../geometry/transformation.js';\r\nimport { ColorToMaterialConverter } from './importerutils.js';\r\nimport { Property, PropertyGroup, PropertyType } from '../model/property.js';\r\n\r\nexport class ImporterBim extends ImporterBase\r\n{\r\n    constructor ()\r\n    {\r\n        super ();\r\n    }\r\n\r\n    CanImportExtension (extension)\r\n    {\r\n        return extension === 'bim';\r\n    }\r\n\r\n    GetUpDirection ()\r\n    {\r\n        return Direction.Z;\r\n    }\r\n\r\n    ClearContent ()\r\n    {\r\n        this.meshIdToMesh = null;\r\n        this.colorToMaterial = null;\r\n    }\r\n\r\n    ResetContent ()\r\n    {\r\n        this.meshIdToMesh = new Map ();\r\n        this.colorToMaterial = new ColorToMaterialConverter (this.model);\r\n    }\r\n\r\n    ImportContent (fileContent, onFinish)\r\n    {\r\n        let textContent = ArrayBufferToUtf8String (fileContent);\r\n        let bimJson = null;\r\n        try {\r\n            bimJson = JSON.parse (textContent);\r\n        } catch (err) {\r\n            this.SetError ('Failed to parse bim file.');\r\n            onFinish ();\r\n            return;\r\n        }\r\n\r\n        for (let bimMesh of bimJson.meshes) {\r\n            this.meshIdToMesh.set (bimMesh.mesh_id, bimMesh);\r\n        }\r\n\r\n        this.ImportProperties (bimJson, this.model);\r\n        for (let bimElement of bimJson.elements) {\r\n            let mesh = this.ImportElement (bimElement);\r\n            mesh.SetName (bimElement.type);\r\n            this.ImportProperties (bimElement, mesh);\r\n        }\r\n\r\n        onFinish ();\r\n    }\r\n\r\n    ImportElement (bimElement)\r\n    {\r\n        let defaultMaterialIndex = this.colorToMaterial.GetMaterialIndex (\r\n            bimElement.color.r,\r\n            bimElement.color.g,\r\n            bimElement.color.b,\r\n            bimElement.color.a\r\n        );\r\n\r\n        let rootNode = this.model.GetRootNode ();\r\n\r\n        let bimMesh = this.meshIdToMesh.get (bimElement.mesh_id);\r\n        let mesh = this.ImportMesh (bimMesh, (triangleIndex) => {\r\n            if (bimElement.face_colors) {\r\n                let faceMaterialIndex = this.colorToMaterial.GetMaterialIndex (\r\n                    bimElement.face_colors[triangleIndex * 4 + 0],\r\n                    bimElement.face_colors[triangleIndex * 4 + 1],\r\n                    bimElement.face_colors[triangleIndex * 4 + 2],\r\n                    bimElement.face_colors[triangleIndex * 4 + 3]\r\n                );\r\n                return faceMaterialIndex;\r\n            } else {\r\n                return defaultMaterialIndex;\r\n            }\r\n        });\r\n        let meshIndex = this.model.AddMesh (mesh);\r\n\r\n        let elementNode = new Node ();\r\n        elementNode.SetType (NodeType.MeshNode);\r\n        elementNode.AddMeshIndex (meshIndex);\r\n\r\n        let translation = new Coord3D (0.0, 0.0, 0.0);\r\n        if (bimElement.vector) {\r\n            translation = new Coord3D (\r\n                bimElement.vector.x,\r\n                bimElement.vector.y,\r\n                bimElement.vector.z\r\n            );\r\n        }\r\n        let rotation = new Quaternion (0.0, 0.0, 0.0, 1.0);\r\n        if (bimElement.rotation) {\r\n            rotation = new Quaternion (\r\n                bimElement.rotation.qx,\r\n                bimElement.rotation.qy,\r\n                bimElement.rotation.qz,\r\n                bimElement.rotation.qw\r\n            );\r\n        }\r\n        let scale = new Coord3D (1.0, 1.0, 1.0);\r\n        let matrix = new Matrix ().ComposeTRS (translation, rotation, scale);\r\n        elementNode.SetTransformation (new Transformation (matrix));\r\n\r\n        rootNode.AddChildNode (elementNode);\r\n        return mesh;\r\n    }\r\n\r\n    ImportMesh (bimMesh, getMaterialIndex)\r\n    {\r\n        let mesh = new Mesh ();\r\n\r\n        for (let i = 0; i < bimMesh.coordinates.length; i += 3) {\r\n            mesh.AddVertex (new Coord3D (\r\n                bimMesh.coordinates[i + 0],\r\n                bimMesh.coordinates[i + 1],\r\n                bimMesh.coordinates[i + 2]\r\n            ));\r\n        }\r\n\r\n        for (let i = 0; i < bimMesh.indices.length; i += 3) {\r\n            let triangle = new Triangle (\r\n                bimMesh.indices[i + 0],\r\n                bimMesh.indices[i + 1],\r\n                bimMesh.indices[i + 2]\r\n            );\r\n            triangle.SetMaterial (getMaterialIndex (i / 3));\r\n            mesh.AddTriangle (triangle);\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    ImportProperties (source, target)\r\n    {\r\n        function AddProperty (group, name, value)\r\n        {\r\n            if (value === undefined || value === null) {\r\n                return;\r\n            }\r\n            let property = new Property (PropertyType.Text, name, value);\r\n            group.AddProperty (property);\r\n        }\r\n\r\n        if (!source.info || IsObjectEmpty (source.info)) {\r\n            return;\r\n        }\r\n\r\n        let info = source.info;\r\n        let propertyGroup = new PropertyGroup ('Info');\r\n        AddProperty (propertyGroup, 'Guid', source.guid);\r\n        AddProperty (propertyGroup, 'Type', source.type);\r\n        for (let propertyName in info) {\r\n            if (Object.prototype.hasOwnProperty.call (info, propertyName)) {\r\n                if (typeof info[propertyName] === 'string') {\r\n                    AddProperty (propertyGroup, propertyName, info[propertyName]);\r\n                }\r\n            }\r\n        }\r\n        target.AddPropertyGroup (propertyGroup);\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,uBAAT,QAAwC,sBAAxC;AACA,SAASC,IAAT,EAAeC,QAAf,QAA+B,kBAA/B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,wBAAT,QAAyC,oBAAzC;AACA,SAASC,QAAT,EAAmBC,aAAnB,EAAkCC,YAAlC,QAAsD,sBAAtD;AAEA,OAAO,MAAMC,WAAN,SAA0BR,YAA1B,CACP;EACIS,WAAW,GACX;IACI;EACH;;EAEDC,kBAAkB,CAAEC,SAAF,EAClB;IACI,OAAOA,SAAS,KAAK,KAArB;EACH;;EAEDC,cAAc,GACd;IACI,OAAOlB,SAAS,CAACmB,CAAjB;EACH;;EAEDC,YAAY,GACZ;IACI,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,eAAL,GAAuB,IAAvB;EACH;;EAEDC,YAAY,GACZ;IACI,KAAKF,YAAL,GAAoB,IAAIG,GAAJ,EAApB;IACA,KAAKF,eAAL,GAAuB,IAAIZ,wBAAJ,CAA8B,KAAKe,KAAnC,CAAvB;EACH;;EAEDC,aAAa,CAAEC,WAAF,EAAeC,QAAf,EACb;IACI,IAAIC,WAAW,GAAG5B,uBAAuB,CAAE0B,WAAF,CAAzC;IACA,IAAIG,OAAO,GAAG,IAAd;;IACA,IAAI;MACAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYH,WAAZ,CAAV;IACH,CAFD,CAEE,OAAOI,GAAP,EAAY;MACV,KAAKC,QAAL,CAAe,2BAAf;MACAN,QAAQ;MACR;IACH;;IAED,KAAK,IAAIO,OAAT,IAAoBL,OAAO,CAACM,MAA5B,EAAoC;MAChC,KAAKf,YAAL,CAAkBgB,GAAlB,CAAuBF,OAAO,CAACG,OAA/B,EAAwCH,OAAxC;IACH;;IAED,KAAKI,gBAAL,CAAuBT,OAAvB,EAAgC,KAAKL,KAArC;;IACA,KAAK,IAAIe,UAAT,IAAuBV,OAAO,CAACW,QAA/B,EAAyC;MACrC,IAAIC,IAAI,GAAG,KAAKC,aAAL,CAAoBH,UAApB,CAAX;MACAE,IAAI,CAACE,OAAL,CAAcJ,UAAU,CAACK,IAAzB;MACA,KAAKN,gBAAL,CAAuBC,UAAvB,EAAmCE,IAAnC;IACH;;IAEDd,QAAQ;EACX;;EAEDe,aAAa,CAAEH,UAAF,EACb;IACI,IAAIM,oBAAoB,GAAG,KAAKxB,eAAL,CAAqByB,gBAArB,CACvBP,UAAU,CAACQ,KAAX,CAAiBC,CADM,EAEvBT,UAAU,CAACQ,KAAX,CAAiBE,CAFM,EAGvBV,UAAU,CAACQ,KAAX,CAAiBG,CAHM,EAIvBX,UAAU,CAACQ,KAAX,CAAiBI,CAJM,CAA3B;IAOA,IAAIC,QAAQ,GAAG,KAAK5B,KAAL,CAAW6B,WAAX,EAAf;IAEA,IAAInB,OAAO,GAAG,KAAKd,YAAL,CAAkBkC,GAAlB,CAAuBf,UAAU,CAACF,OAAlC,CAAd;IACA,IAAII,IAAI,GAAG,KAAKc,UAAL,CAAiBrB,OAAjB,EAA2BsB,aAAD,IAAmB;MACpD,IAAIjB,UAAU,CAACkB,WAAf,EAA4B;QACxB,IAAIC,iBAAiB,GAAG,KAAKrC,eAAL,CAAqByB,gBAArB,CACpBP,UAAU,CAACkB,WAAX,CAAuBD,aAAa,GAAG,CAAhB,GAAoB,CAA3C,CADoB,EAEpBjB,UAAU,CAACkB,WAAX,CAAuBD,aAAa,GAAG,CAAhB,GAAoB,CAA3C,CAFoB,EAGpBjB,UAAU,CAACkB,WAAX,CAAuBD,aAAa,GAAG,CAAhB,GAAoB,CAA3C,CAHoB,EAIpBjB,UAAU,CAACkB,WAAX,CAAuBD,aAAa,GAAG,CAAhB,GAAoB,CAA3C,CAJoB,CAAxB;QAMA,OAAOE,iBAAP;MACH,CARD,MAQO;QACH,OAAOb,oBAAP;MACH;IACJ,CAZU,CAAX;IAaA,IAAIc,SAAS,GAAG,KAAKnC,KAAL,CAAWoC,OAAX,CAAoBnB,IAApB,CAAhB;IAEA,IAAIoB,WAAW,GAAG,IAAI5D,IAAJ,EAAlB;IACA4D,WAAW,CAACC,OAAZ,CAAqB5D,QAAQ,CAAC6D,QAA9B;IACAF,WAAW,CAACG,YAAZ,CAA0BL,SAA1B;IAEA,IAAIM,WAAW,GAAG,IAAInE,OAAJ,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAAlB;;IACA,IAAIyC,UAAU,CAAC2B,MAAf,EAAuB;MACnBD,WAAW,GAAG,IAAInE,OAAJ,CACVyC,UAAU,CAAC2B,MAAX,CAAkBC,CADR,EAEV5B,UAAU,CAAC2B,MAAX,CAAkBE,CAFR,EAGV7B,UAAU,CAAC2B,MAAX,CAAkBG,CAHR,CAAd;IAKH;;IACD,IAAIC,QAAQ,GAAG,IAAIhE,UAAJ,CAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAf;;IACA,IAAIiC,UAAU,CAAC+B,QAAf,EAAyB;MACrBA,QAAQ,GAAG,IAAIhE,UAAJ,CACPiC,UAAU,CAAC+B,QAAX,CAAoBC,EADb,EAEPhC,UAAU,CAAC+B,QAAX,CAAoBE,EAFb,EAGPjC,UAAU,CAAC+B,QAAX,CAAoBG,EAHb,EAIPlC,UAAU,CAAC+B,QAAX,CAAoBI,EAJb,CAAX;IAMH;;IACD,IAAIC,KAAK,GAAG,IAAI7E,OAAJ,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAAZ;IACA,IAAI8E,MAAM,GAAG,IAAIrE,MAAJ,GAAcsE,UAAd,CAA0BZ,WAA1B,EAAuCK,QAAvC,EAAiDK,KAAjD,CAAb;IACAd,WAAW,CAACiB,iBAAZ,CAA+B,IAAItE,cAAJ,CAAoBoE,MAApB,CAA/B;IAEAxB,QAAQ,CAAC2B,YAAT,CAAuBlB,WAAvB;IACA,OAAOpB,IAAP;EACH;;EAEDc,UAAU,CAAErB,OAAF,EAAW8C,gBAAX,EACV;IACI,IAAIvC,IAAI,GAAG,IAAItC,IAAJ,EAAX;;IAEA,KAAK,IAAI8E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/C,OAAO,CAACgD,WAAR,CAAoBC,MAAxC,EAAgDF,CAAC,IAAI,CAArD,EAAwD;MACpDxC,IAAI,CAAC2C,SAAL,CAAgB,IAAItF,OAAJ,CACZoC,OAAO,CAACgD,WAAR,CAAoBD,CAAC,GAAG,CAAxB,CADY,EAEZ/C,OAAO,CAACgD,WAAR,CAAoBD,CAAC,GAAG,CAAxB,CAFY,EAGZ/C,OAAO,CAACgD,WAAR,CAAoBD,CAAC,GAAG,CAAxB,CAHY,CAAhB;IAKH;;IAED,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/C,OAAO,CAACmD,OAAR,CAAgBF,MAApC,EAA4CF,CAAC,IAAI,CAAjD,EAAoD;MAChD,IAAIK,QAAQ,GAAG,IAAIlF,QAAJ,CACX8B,OAAO,CAACmD,OAAR,CAAgBJ,CAAC,GAAG,CAApB,CADW,EAEX/C,OAAO,CAACmD,OAAR,CAAgBJ,CAAC,GAAG,CAApB,CAFW,EAGX/C,OAAO,CAACmD,OAAR,CAAgBJ,CAAC,GAAG,CAApB,CAHW,CAAf;MAKAK,QAAQ,CAACC,WAAT,CAAsBP,gBAAgB,CAAEC,CAAC,GAAG,CAAN,CAAtC;MACAxC,IAAI,CAAC+C,WAAL,CAAkBF,QAAlB;IACH;;IAED,OAAO7C,IAAP;EACH;;EAEDH,gBAAgB,CAAEmD,MAAF,EAAUC,MAAV,EAChB;IACI,SAASC,WAAT,CAAsBC,KAAtB,EAA6BC,IAA7B,EAAmCC,KAAnC,EACA;MACI,IAAIA,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;QACvC;MACH;;MACD,IAAIE,QAAQ,GAAG,IAAItF,QAAJ,CAAcE,YAAY,CAACqF,IAA3B,EAAiCJ,IAAjC,EAAuCC,KAAvC,CAAf;MACAF,KAAK,CAACD,WAAN,CAAmBK,QAAnB;IACH;;IAED,IAAI,CAACP,MAAM,CAACS,IAAR,IAAgBrG,aAAa,CAAE4F,MAAM,CAACS,IAAT,CAAjC,EAAiD;MAC7C;IACH;;IAED,IAAIA,IAAI,GAAGT,MAAM,CAACS,IAAlB;IACA,IAAIC,aAAa,GAAG,IAAIxF,aAAJ,CAAmB,MAAnB,CAApB;IACAgF,WAAW,CAAEQ,aAAF,EAAiB,MAAjB,EAAyBV,MAAM,CAACW,IAAhC,CAAX;IACAT,WAAW,CAAEQ,aAAF,EAAiB,MAAjB,EAAyBV,MAAM,CAAC7C,IAAhC,CAAX;;IACA,KAAK,IAAIyD,YAAT,IAAyBH,IAAzB,EAA+B;MAC3B,IAAII,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAsCP,IAAtC,EAA4CG,YAA5C,CAAJ,EAA+D;QAC3D,IAAI,OAAOH,IAAI,CAACG,YAAD,CAAX,KAA8B,QAAlC,EAA4C;UACxCV,WAAW,CAAEQ,aAAF,EAAiBE,YAAjB,EAA+BH,IAAI,CAACG,YAAD,CAAnC,CAAX;QACH;MACJ;IACJ;;IACDX,MAAM,CAACgB,gBAAP,CAAyBP,aAAzB;EACH;;AAlKL"},"metadata":{},"sourceType":"module"}